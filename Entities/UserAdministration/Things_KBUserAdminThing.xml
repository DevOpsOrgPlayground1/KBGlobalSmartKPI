<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b2319"
 majorVersion="8"
 minorVersion="4"
 modelPersistenceProviderPackage="MssqlPersistenceProviderPackage"
 revision="4"
 schemaVersion="1041"
 universal="password">
    <Things>
        <Thing
         aspect.isExtension="true"
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2021-09-01T09:33:16.884+02:00"
         name="KBUserAdminThing"
         projectName="KBUserAdmin"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read>
                    <Principal
                     isPermitted="true"
                     name="KBUserAdminGroup_V1"
                     type="Group"></Principal>
                </Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="getAdminUserGroupList">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="getGeneralUserGroupList">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="checkGroupInKBGroupList">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="getGroupsByUser">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup_1"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup_V1"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup_1"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup_V1"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup_1"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup_V1"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup_1"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup_V1"
                         type="Group"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup_1"
                         type="Group"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserAdminGroup_V1"
                         type="Group"></Principal>
                    </EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="getUserProperties">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="getUserSeqFromNameList">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="listAllUsers">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="KBOrganization"
                     type="Organization"></Principal>
                    <Principal
                     isPermitted="true"
                     name="KBUserAdminOrganisation"
                     type="Organization"></Principal>
                    <Principal
                     isPermitted="true"
                     name="KBUserAdminOrganisation_V1"
                     type="Organization"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="addNewUser">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="description"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="addUserIntoGroup">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="group"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="0 = not in KB Group List;&#xA;1 = in AdminUserGroupList,&#xA;2 = in GeneralUserGroupList"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="checkGroupInKBGroupList">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="group"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description="//result definition&#xA;//0 = General user; &#xA;//1 = user in Admin Group; &#xA;//2 = user is Admin;"
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="checkLoginUser">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="loginUser"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="deleteUser">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="filterUserGroups">
                        <ResultType
                         aspect.dataShape="KBUserGroupDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="genUserGroup"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="sysAdmGroup"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="userAdmGroup"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="userGroups"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getAdminsGroupList">
                        <ResultType
                         aspect.dataShape="KBUserGroupDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getAdminUserGroupList">
                        <ResultType
                         aspect.dataShape="KBUserGroupDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getGeneralUserGroupList">
                        <ResultType
                         aspect.dataShape="KBUserGroupDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getGroupsByUser">
                        <ResultType
                         aspect.dataShape="KBUserGroupDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getProjectList">
                        <ResultType
                         aspect.dataShape="RootEntityList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getProjectRuntimePermissions">
                        <ResultType
                         aspect.dataShape="RunTimePermissionMatrixDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="projectName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getUserProperties">
                        <ResultType
                         aspect.dataShape="KBUserAdminUserInfoDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getUserSeqFromNameList">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="list"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="inGeneralGroup">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="genUserGroup"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="userGroups"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="initNewUserGroups">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="listAllUsers">
                        <ResultType
                         aspect.dataShape="KBUserAdminUserDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="loginUser"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="loginUserGroupID"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="listAllUsersBackup">
                        <ResultType
                         aspect.dataShape="KBUserAdminUserDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="removeUserFromAllGroups">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="removeUserFromGroup">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="group"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="removeUserFromGroupList">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="groupList"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="tempService">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="updateUserProperties">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="city"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="department"
                             ordinal="14"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="description"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="emailAddress"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="firstName"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="fullName"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="isEnabled"
                             ordinal="17"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="isLDAP"
                             ordinal="16"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="isLocked"
                             ordinal="18"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="language"
                             ordinal="11"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="lastName"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="mobilePhone"
                             ordinal="13"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="state"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="title"
                             ordinal="10"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="user"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="UserTimeZone"
                             ordinal="15"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="workPhone"
                             ordinal="12"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="zipCode"
                             ordinal="9"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="addNewUser">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        user = Resources["KBThingWorxServerSystem"].CheckLdapUser({accountUser:user});
                                        
                                        //logger.debug("KBUserAdminThing.addNewUser " + user);
                                        var dateValue = new Date();
                                        
                                        var params = {
                                        	password: "newuser"+dateValue.getTime() /* STRING */,
                                        	name: user  /* STRING */,
                                        	description: description /* STRING */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // no return
                                        Resources["EntityServices"].CreateUser(params);
                                        //logger.debug("KBUserAdminThing.addNewUser, user created.");
                                        
                                        //me.initNewUserGroups({user: user});
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="addUserIntoGroup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        Groups[group].AddMember({
                                        	member: user /* STRING */,
                                        	type: "User" /* STRING */
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="checkGroupInKBGroupList">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //logger.debug("KBUserAdmin.checkGroupInKBGroupList, group="+group);
                                        var flag = 0;
                                        
                                        var AdminUserGroupList = me.getAdminUserGroupList();
                                        //var result = AdminUserGroupList;
                                        var tableLength = AdminUserGroupList.rows.length;
                                        //logger.debug("KBUserAdmin.checkGroupInKBGroupList, getAdminUserGroupList="+AdminUserGroupList);
                                        for (var x=0; x < tableLength; x++) {
                                            var row = AdminUserGroupList.rows[x];
                                            if(group === row.Group) {flag = 1;}
                                        }
                                        
                                        var GeneralUserGroupList = me.getGeneralUserGroupList();
                                        //var result = GeneralUserGroupList;
                                        var tableLength2 = GeneralUserGroupList.rows.length;
                                        //logger.debug("KBUserAdmin.checkGroupInKBGroupList, getGeneralUserGroupList="+tableLength2);
                                        for (var x2=0; x2 < tableLength2; x2++) {
                                            var row2 = GeneralUserGroupList.rows[x2];
                                            if(group === row2.Group) {flag = 2;}
                                        }
                                        
                                        var result = flag;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="checkLoginUser">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //result definition
                                        //0 = General user; 
                                        //1 = user in Admin Group; 
                                        //2 = user is Admin;
                                        var userGroupID = 0;
                                        
                                        //in KBUserAdminGroup_V1?
                                        // result: INFOTABLE dataShape: "EntityList"
                                        var userGroup =  Users[loginUser].GetGroups();
                                        var tableLength = userGroup.rows.length;
                                        if(tableLength > 0) {
                                            for (var x=0; x < tableLength; x++) {
                                                var row = userGroup.rows[x];
                                                if(row.name === "KBUserAdminGroup_V1") {userGroupID = 1;}
                                        	}
                                        }
                                        
                                        //isAdmin?
                                        // result: INFOTABLE dataShape: "EntityList"
                                        //var userGroup2 =  Users[loginUser].GetGroups();
                                        if(tableLength > 0) {
                                            //var tableLength = userGroup2.rows.length;
                                            for (var x2=0; x2 < tableLength; x2++) {
                                                var row2 = userGroup.rows[x2];
                                                if(row2.name === "Administrators") {userGroupID = 2;}
                                        	}
                                        }
                                        
                                        var result = userGroupID;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="deleteUser">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	name: user /* USERNAME */
                                        };
                                        
                                        // no return
                                        Resources["EntityServices"].DeleteUser(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="filterUserGroups">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //init outputTable
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBUserGroupDS"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBUserGroupDS)
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var tableLength = userGroups.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = userGroups.rows[x];
                                            var group = row.Group;    
                                        	//check in general user group
                                            var tableLength1 = genUserGroup.rows.length;
                                            for (var x1=0; x1 < tableLength1; x1++) {
                                                var row1 = genUserGroup.rows[x1];
                                                var group1 = row1.Group;
                                                if(group === group1) {
                                                    outputTable.AddRow({Group: group});
                                                }
                                            }    
                                        	//check in user admin group
                                            var tableLength2 = userAdmGroup.rows.length;
                                            for (var x2=0; x2 < tableLength2; x2++) {
                                                var row2 = userAdmGroup.rows[x2];
                                                var group2 = row2.Group;
                                                if(group === group2) {
                                                    outputTable.AddRow({Group: group});
                                                }
                                            }    
                                        	//check in sys admin group
                                            var tableLength3 = sysAdmGroup.rows.length;
                                            for (var x3=0; x3 < tableLength3; x3++) {
                                                var row3 = sysAdmGroup.rows[x3];
                                                var group3 = row3.Group;
                                                if(group === group3) {
                                                    outputTable.AddRow({Group: group});
                                                }
                                            }        
                                        }
                                        
                                        var sort = new Object();
                                        sort.name = "Group";
                                        sort.ascending = true;
                                        outputTable.Sort(sort);
                                        
                                        var result = outputTable;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getAdminsGroupList">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        logger.debug("KBUserAdmin.getAdminsGroupList, started");
                                        var params = {
                                        	maxItems: 200 /* NUMBER */,
                                        	types: {"items": ["Group"]} /* the type of item you're looking for */,
                                        	names: { "items": ["KBThingWorxUserHandling"] } /* change to your Vocabulary name */,
                                        	//term: "AssignableGeneralUserGroup" /* change to your Term */
                                            term: "AssignableAdministratorGroup" /* change to your Term */
                                        };
                                        var tempTable = Resources["SearchFunctions"].SearchModelTagTerm(params);
                                        logger.debug("KBUserAdmin.getAdminsGroupList, SearchModelTagTerm="+tempTable);
                                        //var result = tempTable;
                                        
                                        var params2 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBUserGroupDS"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params2);
                                        
                                        var tableLength = tempTable.rows.length;
                                        logger.debug("KBUserAdmin.getAdminsGroupList, tableLength="+tableLength);
                                        for (var x=0; x < tableLength; x++) {
                                            var row = tempTable.rows[x];
                                            var name = row.name;
                                            logger.debug("KBUserAdmin.getAdminsGroupList, x="+x+", name="+name);
                                            if(name != "KBThingWorxUserHandling") {
                                               outputTable.AddRow({Group:name});
                                            }
                                        }
                                        
                                        var sort = new Object();
                                        sort.name = "Group";
                                        sort.ascending = true;
                                        outputTable.Sort(sort);
                                        
                                        var result = outputTable;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getAdminUserGroupList">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	maxItems: 200 /* NUMBER */,
                                        	types: {"items": ["Group"]} /* the type of item you're looking for */,
                                        	names: { "items": ["KBThingWorxUserHandling"] } /* change to your Vocabulary name */,
                                        	//term: "AssignableGeneralUserGroup" /* change to your Term */
                                            term: "AssignableAdminUserGroup" /* change to your Term */
                                        };
                                        var tempTable = Resources["SearchFunctions"].SearchModelTagTerm(params);
                                        //var result = tempTable;
                                        
                                        var params2 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBUserGroupDS"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params2);
                                        
                                        var tableLength = tempTable.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = tempTable.rows[x];
                                            var name = row.name;
                                            if(name != "KBThingWorxUserHandling") {
                                               outputTable.AddRow({Group:name});
                                            }
                                        }
                                        
                                        var sort = new Object();
                                        sort.name = "Group";
                                        sort.ascending = true;
                                        outputTable.Sort(sort);
                                        
                                        var result = outputTable;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getGeneralUserGroupList">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        logger.debug("KBUserAdmin.getGeneralUserGroupList, started");
                                        var params = {
                                        	maxItems: 200 /* NUMBER */,
                                        	types: {"items": ["Group"]} /* the type of item you're looking for */,
                                        	names: { "items": ["KBThingWorxUserHandling"] } /* change to your Vocabulary name */,
                                        	term: "AssignableGeneralUserGroup" /* change to your Term */
                                            //term: "AssignableAdminUserGroup" /* change to your Term */
                                        };
                                        var tempTable = Resources["SearchFunctions"].SearchModelTagTerm(params);
                                        logger.debug("KBUserAdmin.getGeneralUserGroupList, SearchModelTagTerm="+tempTable);
                                        //var result = tempTable;
                                        
                                        var params2 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBUserGroupDS"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params2);
                                        
                                        var tableLength = tempTable.rows.length;
                                        logger.debug("KBUserAdmin.getGeneralUserGroupList, tableLength="+tableLength);
                                        for (var x=0; x < tableLength; x++) {
                                            logger.debug("KBUserAdmin.getGeneralUserGroupList, x="+x);
                                            var row = tempTable.rows[x];
                                            var name = row.name;
                                            logger.debug("KBUserAdmin.getGeneralUserGroupList, name="+name);
                                            if(name != "KBThingWorxUserHandling") {
                                               outputTable.AddRow({Group:name});
                                            }
                                        }
                                        
                                        var sort = new Object();
                                        sort.name = "Group";
                                        sort.ascending = true;
                                        outputTable.Sort(sort);
                                        
                                        var result = outputTable;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getGroupsByUser">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var groupList =  Users[user].GetGroups();
                                        //var result = tempTable;
                                        //logger.debug("KBUserAdmin.getGroupsByUser, tempTable="+tempTable);
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBUserGroupDS"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBUserGroupDS)
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var tableLength = groupList.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = groupList.rows[x];
                                            var groupName = row.name;
                                            if((groupName!=="ComposerUsers")&&(groupName!=="Users")) {
                                                outputTable.AddRow({
                                                    Group: row.name
                                                });    
                                            }
                                        }
                                        
                                        var sort = new Object();
                                        sort.name = "Group";
                                        sort.ascending = true;
                                        outputTable.Sort(sort);
                                        
                                        var result = outputTable;
                                        
                                        /*
                                        var params2 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBUserGroupWithFlagDS"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params2);
                                        
                                        var tableLength = tempTable.rows.length;
                                        //logger.debug("KBUserAdmin.getGroupsByUser, tableLength="+tableLength);
                                        for (var x=0; x < tableLength; x++) {
                                            var row = tempTable.rows[x];
                                            var name = row.name;    
                                            //logger.debug("KBUserAdmin.getGroupsByUser, Group="+name);
                                            var flag =  me.checkGroupInKBGroupList({
                                                group: name 
                                            });    
                                            //logger.debug("KBUserAdmin.getGroupsByUser, checkGroupInKBGroupList="+flag);
                                            if(flag === 1) {outputTable.AddRow({
                                                Group: name,
                                                AdminGroupFlag: true,
                                                GeneralGroupFlag: false
                                            });}     
                                            if(flag === 2) {outputTable.AddRow({
                                                Group: name,
                                                AdminGroupFlag: false,
                                                GeneralGroupFlag: true
                                            });}        
                                        }
                                        
                                        var sort = new Object();
                                        sort.name = "Group";
                                        sort.ascending = true;
                                        outputTable.Sort(sort);
                                        
                                        var result = outputTable;
                                        */
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getProjectList">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	maxItems: 200 /* NUMBER */,
                                        	nameMask: undefined /* STRING */,
                                        	type: "Project" /* STRING */,
                                        	tags: undefined /* TAGS */
                                        };
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var result = Resources["EntityServices"].GetEntityList(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getProjectRuntimePermissions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //1. get entity list of project
                                        var entityList =  Projects[projectName].GetEntities();
                                        //var result = entityList;
                                        
                                        //2. get Thing list, add to infoTable
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "EntityReference"
                                        };
                                        var thingList = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var tableLength2 = entityList.rows.length;
                                        for (var x2=0; x2 < tableLength2; x2++) {
                                            var row2 = entityList.rows[x2];
                                            if(row2.type === "Thing") {
                                               thingList.AddRow({
                                               		name: row2.name,
                                                   	type: row2.type
                                               });
                                            }
                                        }
                                        //var result = thingList;
                                        
                                        //3. get Mashup list
                                        var params2 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "EntityReference"
                                        };
                                        var mashupList = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params2);
                                        var tableLength3 = entityList.rows.length;
                                        for (var x3=0; x3 < tableLength3; x3++) {
                                            var row3 = entityList.rows[x3];
                                            if(row3.type === "Mashup") {
                                               mashupList.AddRow({
                                               		name: row3.name,
                                                   	type: row3.type
                                               });
                                            }
                                        }
                                        //var result = mashupList;
                                        
                                        //4. for each Mashup, get referred Thing list, and add into Thing list infoTable
                                        var tableLength4 = mashupList.rows.length;
                                        for (var x4=0; x4 < tableLength4; x4++) {
                                            var row4 = mashupList.rows[x4];
                                            var mashupName = row4.name;
                                            // result: INFOTABLE dataShape: "RootEntityList"
                                        	var tempThingList =  Mashups[mashupName].GetRelatedThings();
                                            var tableLength42 = tempThingList.rows.length;
                                            for (var x42=0; x42 < tableLength42; x42++) {
                                                var row42 = tempThingList.rows[x42];
                                                //var result = row42.name;
                                                //var result = thingList.Find({
                                                //	name: row42.name,
                                                //    type: "Thing"
                                                //});       
                                                thingList.AddRow({
                                                    name: row42.name,
                                                    type: "Thing"
                                                });
                                            }
                                        }
                                        //var result = thingList;
                                        
                                        //5. for each item of Thing list, get referred Thing list, and add into Thing list infoTable
                                        var tableLength5 = thingList.rows.length;
                                        for (var x5=0; x5 < tableLength5; x5++) {
                                            var row5 = thingList.rows[x5];
                                            //Your code here
                                            // result: INFOTABLE dataShape: "ThingRelationship"
                                            var relationThingList =  Things[row5.name].GetThingRelationships({
                                                maxDepth: 10 /* INTEGER */
                                            });    
                                            var tableLength52 = relationThingList.rows.length;
                                            for (var x52=0; x52 < tableLength52; x52++) {
                                                var row52 = relationThingList.rows[x52];
                                                if((row52.name !== row5.name) && (row52.name !== "")) {
                                                    thingList.AddRow({
                                                        name: row52.name,
                                                        type: "Thing"
                                                    });                      
                                                }
                                            }
                                        }
                                        //var result = thingList;
                                        
                                        //6. check permissons of Mashup list
                                        //var result = mashupList;
                                        //create outputTable
                                        var params6 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "RunTimePermissionDS"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(RunTimePermissionDS)
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params6);
                                        //var result = outputTable;
                                        //sort mashupList
                                        var sort6 = new Object();
                                        sort6.name = "name";
                                        sort6.ascending = true;
                                        mashupList.Sort(sort6);
                                        //var result = mashupList;
                                        //for each mashup, GetRunTimePermissions
                                        var tableLength6 = mashupList.rows.length;
                                        for (var x6=0; x6 < tableLength6; x6++) {
                                            var row6 = mashupList.rows[x6];
                                            var tempPermissionList = Mashups[row6.name].GetRunTimePermissions();    
                                            var sort62 = new Object();
                                            sort62.name = "name";
                                            sort62.ascending = true;
                                            tempPermissionList.Sort(sort62);    
                                            //var result = tempPermissionList;    
                                            //add permissions into outputTable
                                            var tableLength62 = tempPermissionList.rows.length;
                                            
                                            if(tableLength62 === 0) {
                                                outputTable.AddRow({
                                                	entityName: row6.name,
                                                    entityType: "Mashup",
                                                    name: "",
                                                    type: "",
                                                    permissionName: "PropertyRead",
                                                    isPermitted: false
                                                });       
                                            }
                                            
                                            for (var x62=0; x62 < tableLength62; x62++) {
                                                var row62 = tempPermissionList.rows[x62];
                                                outputTable.AddRow({
                                                	entityName: row6.name,
                                                    entityType: "Mashup",
                                                    name: row62.name,
                                                    type: row62.type,
                                                    permissionName: row62.permissionName,
                                                    isPermitted: row62.isPermitted
                                                });
                                            }
                                        }
                                        //var result = outputTable;
                                        
                                        //7. check permissons of Thing list
                                        var sort7 = new Object();
                                        sort7.name = "name";
                                        sort7.ascending = true;
                                        thingList.Sort(sort7);
                                        //var result = thingList;
                                        var preThing = "";
                                        var curThing = "";
                                        var tableLength7 = thingList.rows.length;
                                        for (var x7=0; x7 < tableLength7; x7++) {
                                            var row7 = thingList.rows[x7];
                                            curThing = row7.name;
                                            if(curThing !== preThing) {
                                            	// result: INFOTABLE dataShape: "Permissions"
                                        		//var result =  Things["KBUserAdminThing"].GetRunTimePermissions();
                                                var tempPermissionList2 =  Things[curThing].GetRunTimePermissions();        
                                                var sort72 = new Object();
                                                sort72.name = "name";
                                                sort72.ascending = true;
                                                tempPermissionList2.Sort(sort72);        
                                                //var result = tempPermissionList2;        
                                                var tableLength72 = tempPermissionList2.rows.length;
                                                
                                                if(tableLength72 === 0) {
                                                    outputTable.AddRow({
                                                        entityName: curThing,
                                                        entityType: "Thing",
                                                        name: "",
                                                        type: "",
                                                        permissionName: "PropertyRead",
                                                        isPermitted: false
                                                    });           
                                                }
                                                
                                                for (var x72=0; x72 < tableLength72; x72++) {
                                                    var row72 = tempPermissionList2.rows[x72];
                                                    outputTable.AddRow({
                                                        entityName: curThing,
                                                        entityType: "Thing",
                                                        name: row72.name,
                                                        type: row72.type,
                                                        permissionName: row72.permissionName,
                                                        isPermitted: row72.isPermitted
                                                    });
                                                    preThing = curThing;
                                                }
                                            }
                                        }
                                        //var result = outputTable;
                                        
                                        //8. output permission matrix
                                        var params8 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "RunTimePermissionMatrixDS"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(RunTimePermissionMatrixDS)
                                        var outputTable2 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params8);
                                        var cc = 0; //counter for 1st record
                                        var preEntityType = "";
                                        var curEntityType = "";
                                        var preEntityName = "";
                                        var curEntityName = "";
                                        var preType = "";
                                        var curType = "";
                                        var preName = "";
                                        var curName = "";
                                        var allowRead = false;
                                        var allowWrite = false;
                                        var allowServiceExe = false;
                                        var allowEventExe = false;
                                        var allowEventSub = false;
                                        var allowReadPre = false;
                                        var allowWritePre = false;
                                        var allowServiceExePre = false;
                                        var allowEventExePre = false;
                                        var allowEventSubPre = false;
                                        var tableLength8 = outputTable.rows.length;
                                        for (var x8=0; x8 < tableLength8; x8++) {
                                            var row8 = outputTable.rows[x8];
                                            cc++;
                                            //logger.debug("getProjectPermissions, cc = " + cc); 
                                            
                                        	//read data
                                            preEntityType = curEntityType;
                                            preEntityName = curEntityName;
                                            preType = curType;
                                            preName = curName;    
                                            allowReadPre = allowRead;
                                            allowWritePre = allowWrite;
                                            allowServiceExePre = allowServiceExe;
                                            allowEventExePre = allowEventExe;
                                            allowEventSubPre = allowEventSub;     
                                            curEntityName = row8.entityName;
                                            curEntityType = row8.entityType;
                                            curName = row8.name;
                                            curType = row8.type;
                                            var permissionName = row8.permissionName;
                                            var isPermitted = row8.isPermitted;
                                            if(permissionName === "PropertyRead") {allowRead = isPermitted;}
                                            if(permissionName === "PropertyWrite") {allowWrite = isPermitted;}
                                            if(permissionName === "ServiceInvoke") {allowServiceExe = isPermitted;}
                                            if(permissionName === "EventInvoke") {allowEventExe = isPermitted;}
                                            if(permissionName === "EventSubscribe") {allowEventSub = isPermitted;}
                                            //logger.debug("getProjectPermissions, preEntityName = " + preEntityName);
                                            //logger.debug("getProjectPermissions, curEntityName = " + curEntityName);
                                            //logger.debug("getProjectPermissions, preName = " + preName);
                                            //logger.debug("getProjectPermissions, curName = " + curName);
                                            //logger.debug("getProjectPermissions, permissionName = " + permissionName);
                                            //logger.debug("getProjectPermissions, isPermitted = " + isPermitted);
                                        	//logger.debug("getProjectPermissions, prePermissions = " + allowReadPre + "," + allowWritePre + "," + allowServiceExePre + "," + allowEventExePre + "," + allowEventSubPre);
                                            //logger.debug("getProjectPermissions, curPermissions = " + allowRead + "," + allowWrite + "," + allowServiceExe + "," + allowEventExe + "," + allowEventSub);
                                        	
                                        	//if changes found, add previous data
                                            if(((curEntityName !== preEntityName) || (curName !== preName)) && (cc > 2)) {
                                                outputTable2.AddRow({
                                                    entityType: preEntityType,
                                                    entityName: preEntityName,
                                                    type: preType,
                                                    name: preName,
                                                    allowRead: allowReadPre,
                                                    allowWrite: allowWritePre,
                                                    allowServiceExe: allowServiceExePre,
                                                    allowEventExe: allowEventExePre,
                                                    allowEventSub: allowEventSubPre
                                                });
                                                //logger.debug("getProjectPermissions, add 1 row");
                                                allowRead = false;
                                                allowWrite = false;
                                                allowServiceExe = false;
                                                allowEventExe = false;
                                                allowEventSub = false;   
                                        		if(permissionName === "PropertyRead") {allowRead = isPermitted;}
                                        		if(permissionName === "PropertyWrite") {allowWrite = isPermitted;}
                                        		if(permissionName === "ServiceInvoke") {allowServiceExe = isPermitted;}
                                        		if(permissionName === "EventInvoke") {allowEventExe = isPermitted;}
                                        		if(permissionName === "EventSubscribe") {allowEventSub = isPermitted;}		
                                                //logger.debug("getProjectPermissions, reset var");
                                            }  	
                                        
                                        }
                                        
                                        //add last record
                                        if(cc>0) {
                                            outputTable2.AddRow({
                                                entityType: curEntityType,
                                                entityName: curEntityName,
                                                type: curType,
                                                name: curName,
                                                allowRead: allowRead,
                                                allowWrite: allowWrite,
                                                allowServiceExe: allowServiceExe,
                                                allowEventExe: allowEventExe,
                                                allowEventSub: allowEventSub
                                            });
                                        }
                                        var result = outputTable2;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getUserProperties">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //init outputTable
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBUserAdminUserInfoDS"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBUserAdminUserInfoDS)
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        //get user properties
                                        var tempTable = Users[user].GetPropertyValues();
                                        //var result = Users[user].GetPropertyValues();
                                        var row = tempTable.rows[0];
                                        
                                        //get isEnabled
                                        var isActive = Users[user].IsEnabled();
                                        
                                        //get isLocked
                                        var isLocked = Users[user].IsLocked();
                                        
                                        /*
                                        //get locked user list
                                        var lockedUserList = Resources["EntityServices"].GetLockedUsers();
                                        //var result = lockedUserList;
                                        
                                        //check if user is locked
                                        var isLocked = false;
                                        var tableLength = lockedUserList.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row2 = lockedUserList.rows[x];
                                            if(user === row2.name) {isLocked = true;}
                                        }
                                        */
                                        
                                        //output data
                                        outputTable.AddRow({
                                        	description: 	row.description,
                                            isActive: 		isActive,
                                            isLocked: 		isLocked,
                                            isLDAPUser: 	row.isLDAPUser,
                                            emailAddress: 	row.emailAddress,
                                            lastName: 		row.lastName,
                                            firstName: 		row.firstName,
                                            fullName: 		row.fullName,
                                            city: 			row.city,
                                            state: 			row.state,
                                            zipCode:		row.zipCode,
                                            title:			row.title,
                                            language:		row.language,
                                            workPhone:		row.workPhone,
                                            mobilePhone:	row.mobilePhone,
                                            department: 	row.department,
                                            UserTimeZone: 	row.UserTimeZone,
                                            isNotLDAPUser: 	!row.isLDAPUser
                                        });
                                        
                                        var result = outputTable;
                                        
                                        // result: INFOTABLE
                                        //var Result = Resources["KBThingWorxServerSystem"].GetAvailableTimeZones();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getUserSeqFromNameList">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var i = 1; // for output
                                        var f = true; // flag
                                        
                                        if(user === undefined) {f = false;}
                                        if(user === "") {f = false;}
                                        
                                        if(f===true) {
                                            var tableLength = list.rows.length;
                                            for (var x=0; x < tableLength; x++) {
                                                var row = list.rows[x];
                                                var name = row.name;
                                                if(name === user) {i = x+1;}
                                            }
                                        }
                                        
                                        var result = i;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="inGeneralGroup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = false;
                                        var tableLength = userGroups.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = userGroups.rows[x];
                                            var group = row.Group;    
                                        	//check in general user group
                                            var tableLength1 = genUserGroup.rows.length;
                                            for (var x1=0; x1 < tableLength1; x1++) {
                                                var row1 = genUserGroup.rows[x1];
                                                var group1 = row1.Group;
                                                if(group === group1) {result = true;}
                                         	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="initNewUserGroups">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //logger.debug("KBUserAdminThing.initNewUserGroups, user=" + user);
                                        
                                        //added this part of code for bug fixing of users not able to added with exact initials
                                        // result: INFOTABLE dataShape: "KBUserAdminUserDS"
                                        try{
                                        var userData = me.listAllUsers({
                                        	loginUser: undefined /* STRING */ ,
                                        	loginUserGroupID: undefined /* INTEGER */
                                        });
                                        var lowerUser = user.toLowerCase();
                                        var userName;
                                        if (userData.rows.length > 0) {
                                        	for (var i = 0; i < userData.rows.length; i++) {
                                        		if (userData.rows[i].lowName == lowerUser) {
                                        		 userName = userData.rows[i].name;
                                        		}
                                        	}
                                        }
                                        if(userName === null && userName === ''){
                                        userName = user;   
                                        }
                                        //finished this part of code for bug fixing of users not able to added with exact initials
                                        Groups["KBUserGroup"].AddMember({
                                        	member: userName,
                                        	type: "User"
                                        });
                                        
                                        Users[userName].AddRunTimePermission({
                                        	principal: "KBUserAdminGroup_V1",
                                        	allow: true,
                                        	resource: "*",
                                        	type: "PropertyRead",
                                        	principalType: "Group"
                                        });
                                        //logger.debug("KBUserAdminThing.addNewUser, added PropertyRead permission.");
                                        
                                        Users[userName].AddRunTimePermission({
                                        	principal: "KBUserAdminGroup_V1",
                                        	allow: true,
                                        	resource: "*",
                                        	type: "PropertyWrite",
                                        	principalType: "Group"
                                        });
                                        //logger.debug("KBUserAdminThing.addNewUser, added PropertyWrite permission.");
                                        
                                        Users[userName].AddRunTimePermission({
                                        	principal: "KBUserAdminGroup_V1",
                                        	allow: true,
                                        	resource: "*",
                                        	type: "ServiceInvoke",
                                        	principalType: "Group"
                                        });
                                        //logger.debug("KBUserAdminThing.addNewUser, added ServiceInvoke permission.");
                                        
                                        Users[userName].AddDesignTimePermission({
                                        	principal: "KBUserAdminGroup_V1",
                                        	allow: true,
                                        	resource: "*",
                                        	type: "Read",
                                        	principalType: "Group"
                                        });
                                        //logger.debug("KBUserAdminThing.addNewUser, added Read permission.");
                                        
                                        Users[userName].AddDesignTimePermission({
                                        	principal: "KBUserAdminGroup_V1",
                                        	allow: true,
                                        	resource: "*",
                                        	type: "Update",
                                        	principalType: "Group"
                                        });
                                        //logger.debug("KBUserAdminThing.addNewUser, added Write permission.");
                                        
                                        Users[userName].AddDesignTimePermission({
                                        	principal: "KBUserAdminGroup_V1",
                                        	allow: true,
                                        	resource: "*",
                                        	type: "Delete",
                                        	principalType: "Group"
                                        });
                                        //logger.debug("KBUserAdminThing.addNewUser, added Delete permission.");
                                        
                                        Users[userName].AddVisibilityPermission({
                                        	principal: "KBUserAdminOrganisation_V1" /* STRING */ ,
                                        	principalType: "Organization" /* STRING */
                                        });
                                        //logger.debug("KBUserAdminThing.addNewUser, added Visibility Permission.");
                                        
                                        Users[userName].EnableUser();
                                        }catch(e){
                                         logger.error('error in initNewUserGroups service of KBUserAdminThing: ' + e);  
                                        }
                                        //sleep for 1 min
                                        /*
                                        // dateValue:DATETIME
                                        var date0 = new Date();
                                        // dateAddMinutes(dateValue:DATETIME, amount:NUMBER):STRING
                                        var date1 = date0;
                                        var date2 = dateAddMinutes(date0, 1);
                                        while(date1<date2) {
                                        	date1 = new Date();
                                            ////logger.debug("KBUserAdminThing.addNewUser, sleep...");
                                        }
                                        */
                                        
                                        /*
                                        var now = new Date().getTime();
                                        while(new Date().getTime() < now + 10000){ 
                                            //just loop to wait
                                            ////logger.debug("KBUserAdminThing.addNewUser, sleep...");
                                        }
                                        */
                                        
                                        ////sleep for 1 min
                                        ///*
                                        //// dateValue:DATETIME
                                        //var date0 = new Date();
                                        //// dateAddMinutes(dateValue:DATETIME, amount:NUMBER):STRING
                                        //var date1 = date0;
                                        //var date2 = dateAddMinutes(date0, 1);
                                        //while(date1<date2) {
                                        //	date1 = new Date();
                                        //    ////logger.debug("KBUserAdminThing.addNewUser, sleep...");
                                        //}
                                        //*/
                                        //
                                        ///*
                                        //var now = new Date().getTime();
                                        //while(new Date().getTime() < now + 10000){ 
                                        //    //just loop to wait
                                        //    ////logger.debug("KBUserAdminThing.addNewUser, sleep...");
                                        //}
                                        //*/
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="listAllUsers">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //init outputTable
                                        var params0 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBUserAdminUserDS"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBUserAdminUserDataShape)
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params0);
                                        
                                        //                                        //for normal login user
                                        //                                        if(loginUserGroupID === 0) {
                                        //                                            outputTable.AddRow({
                                        //                                                name: loginUser,
                                        //                                                description: Users[loginUser].description,
                                        //                                                lowName: loginUser
                                        //                                            });       
                                        //                                        }
                                        //                                        
                                        //                                        // for admin login user
                                        //                                        if (loginUserGroupID > 0) {
                                        	var params = {
                                        		maxItems: 1000 /* NUMBER */,
                                        		searchExpression: undefined /* STRING */,
                                        		modelTags: undefined /* TAGS */,
                                        		query: undefined /* QUERY */,
                                        		aspects: undefined /* JSON */,
                                        		excludedAspects: undefined /* JSON */,
                                        		maxSearchItems: undefined /* NUMBER */
                                        	};
                                        	// result: INFOTABLE dataShape: SearchResults
                                        	//var result = Resources["SearchFunctions"].SearchPeople(params);
                                        	var userList = Resources["SearchFunctions"].SearchPeople(params).peopleResults;
                                        	//var result = Resources["SearchFunctions"].SearchPeople(params).commonResults;
                                        
                                        	var tableLength = userList.rows.length;
                                        	for (var x=0; x < tableLength; x++) {
                                        		var row = userList.rows[x];
                                        		var name = row.name;
                                        		var lowName = name.toLowerCase();
                                        		var description = row.description;
                                        		var flag = true;
                                        		if(name==="Administrator") {flag = false;}
                                        		if(name==="FederationSubsystemUser") {flag = false;}
                                        		if(name==="NagiosRead") {flag = false;}
                                        		if(name==="SuperUser") {flag = false;}
                                        		if(name==="System") {flag = false;}
                                        		if(flag) {
                                        			outputTable.AddRow({
                                        				name: name,
                                        				description: description,
                                        				lowName: lowName
                                        			});       
                                        		}
                                        	}
                                          //                                      }	
                                        //var result = outputTable;
                                        
                                        var sort = new Object();
                                        sort.name = "lowName";
                                        sort.ascending = true;
                                        outputTable.Sort(sort);
                                        
                                        var result = outputTable;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="listAllUsersBackup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	maxItems: 1000 /* NUMBER */,
                                        	searchExpression: undefined /* STRING */,
                                        	modelTags: undefined /* TAGS */,
                                        	query: undefined /* QUERY */,
                                        	aspects: undefined /* JSON */,
                                        	excludedAspects: undefined /* JSON */,
                                        	maxSearchItems: undefined /* NUMBER */
                                        };
                                        // result: INFOTABLE dataShape: SearchResults
                                        //var result = Resources["SearchFunctions"].SearchPeople(params);
                                        var userList = Resources["SearchFunctions"].SearchPeople(params).peopleResults;
                                        //var result = Resources["SearchFunctions"].SearchPeople(params).commonResults;
                                        
                                        var params2 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBUserAdminUserDS"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBUserAdminUserDataShape)
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params2);
                                        
                                        var tableLength = userList.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = userList.rows[x];
                                            var name = row.name;
                                            var lowName = name.toLowerCase();
                                            var description = row.description;
                                            var flag = true;
                                            if(name==="Administrator") {flag = false;}
                                            if(name==="FederationSubsystemUser") {flag = false;}
                                            if(name==="NagiosRead") {flag = false;}
                                            if(name==="SuperUser") {flag = false;}
                                            if(name==="System") {flag = false;}
                                            //if((name!="Administrator") && (name!="FederationSubsystemUser") && (name!="NagiosRead") && (name!="SuperUser") && (name!="System")) {
                                            if(flag) {
                                                outputTable.AddRow({
                                                    name: name,
                                                    description: description,
                                                    lowName: lowName
                                                });       
                                            }
                                        }
                                        //var result = outputTable;
                                        
                                        var sort = new Object();
                                        sort.name = "lowName";
                                        sort.ascending = true;
                                        outputTable.Sort(sort);
                                        
                                        var result = outputTable;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="removeUserFromAllGroups">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var groupList = me.getGroupsByUser({
                                        	user: user /* STRING */
                                        });
                                        //var result = groupList;
                                        
                                        var tableLength = groupList.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = groupList.rows[x];
                                            var groupName = row.Group;
                                            if((groupName!=="ComposerUsers")&&(groupName!=="Users")&&(groupName!=="KBUserGroup")&&(groupName!=="FactoryLicenses")) {
                                                Groups[groupName].DeleteMember({
                                                    member: user,
                                                    type: "User"
                                                });    
                                            }   
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="removeUserFromGroup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        Groups[group].DeleteMember({
                                        	member: user /* STRING */,
                                        	type: "User" /* STRING */
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="removeUserFromGroupList">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var tableLength = groupList.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = groupList.rows[x];
                                            var groupName = row.Group;
                                            //if((groupName!=="ComposerUsers")&&(groupName!=="Users")&&(groupName!=="KBUserGroup")&&(groupName!=="FactoryLicenses")) {
                                            Groups[groupName].DeleteMember({
                                                member: user,
                                                type: "User"
                                            });    
                                            //}   
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="tempService">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: "EntityList"
                                        var result =  Users["A03"].GetGroups();
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="updateUserProperties">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if(isLDAP) {
                                            //Users[user].description = description;
                                            //Users[user].emailAddress = emailAddress;
                                            //Users[user].lastName = lastName;
                                            //Users[user].firstName = firstName;
                                            //Users[user].fullName = fullName;
                                            //Users[user].city = city;
                                            //Users[user].state = state;
                                            //Users[user].zipCode = zipCode;
                                            //Users[user].title = title;
                                            //Users[user].language = language;
                                            //Users[user].workPhone = workPhone;
                                            //Users[user].mobilePhone = mobilePhone;
                                            //Users[user].department = department;
                                            Users[user].UserTimeZone = UserTimeZone;
                                        }
                                        
                                        if(!isLDAP) {
                                            //Users[user].description = description;
                                            Users[user].emailAddress = emailAddress;
                                            Users[user].lastName = lastName;
                                            Users[user].firstName = firstName;
                                            Users[user].fullName = fullName;
                                            Users[user].city = city;
                                            Users[user].state = state;
                                            Users[user].zipCode = zipCode;
                                            Users[user].title = title;
                                            Users[user].language = language;
                                            Users[user].workPhone = workPhone;
                                            Users[user].mobilePhone = mobilePhone;
                                            Users[user].department = department;
                                            Users[user].UserTimeZone = UserTimeZone;
                                        }
                                        
                                        //update Enabled
                                        if(isEnabled) {Users[user].EnableUser();}
                                        if(!isEnabled) {Users[user].DisableUser();}
                                        
                                        //update Locked
                                        if(isLocked) {Users[user].LockUser();}
                                        if(!isLocked) {Users[user].UnlockUser();}
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
