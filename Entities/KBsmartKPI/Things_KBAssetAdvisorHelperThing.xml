<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b706"
 majorVersion="9"
 minorVersion="0"
 modelPersistenceProviderPackage="MssqlPersistenceProviderPackage"
 revision="12"
 schemaVersion="1109"
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         lastModifiedDate="2022-05-02T20:28:08.948Z"
         name="KBAssetAdvisorHelperThing"
         projectName="KBAssetAdvisor"
         published="false"
         tags="KBAssetAdvisor:Project"
         thingTemplate="KBGenericThingTemplate"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="GetCVSTimeBasePeriodDates">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBMesKitHelperUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="PartsAtLineForVisualisation">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBMesKitHelperUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetKPITruckFromInfoTable">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBMesKitHelperUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                    </EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="ActualStatusColor">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBMesKitHelperUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="KBBackGroundWorker"
                     type="Organization"></Principal>
                    <Principal
                     isPermitted="true"
                     name="KBOrganization"
                     type="Organization"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDatePeriodWithIterations">
                        <ResultType
                         aspect.dataShape="KBAssetAdvisorDatePeriod"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="DatePeriod"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="NUMBER"
                             description=""
                             name="Offset"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAllMaintenanceKPIValues">
                        <ResultType
                         aspect.dataShape="KBAssetAdvisorMaintenanceKPIDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="KPITimeBase"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Machine"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDowntimeSAPTruck">
                        <ResultType
                         aspect.dataShape="KBAssetAdvisorSAPDowntime2DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="PlantID"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="WorkCenter"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMaintenanceCostsSAPTruck">
                        <ResultType
                         aspect.dataShape="KBAssetAdvisorMaintenanceCosts2DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="PlantID"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="WorkCenter"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                     <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDowntimeStatisticsTWX">
                        <ResultType
                         aspect.dataShape="KBAssetAdvisorMachineDowntimeStatisticsTWXDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="KPITimeBase"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Machine"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMonthStartWithIterations">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="DatePeriod"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="NUMBER"
                             description=""
                             name="Offset"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                  	<ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetUtilizationTruckTarget">
                        <ResultType
                         aspect.dataShape="KBAssetAdvisorTargetUtilizationDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="KPIName"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="KPITimeBase"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Machine"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDatePeriodWithIterations">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {	
                                        	var kpidateStart;
                                        	var kpidateEnd;
                                            var params = {
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "KBAssetAdvisorDatePeriod"
                                        	};
                                        	// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAssetAdvisorDatePeriod)
                                        	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                            
                                            //YEAR
                                        	
                                            if (DatePeriod == 'Year') {
                                            	kpidateStart = new Date(Resources["KBThingWorxServerSystem"].GetUTCYear(), 0, 1);
                                            	kpidateEnd = dateAddMonths(kpidateStart, 11);
                                            	kpidateStart = dateAddYears(kpidateStart, Offset);
                                            	kpidateEnd = dateAddYears(kpidateEnd, Offset);
                                            	var newEntry = new Object();
                                            	newEntry.kpidateStart = kpidateStart;
                                            	newEntry.kpidateEnd = kpidateEnd;
                                            	result.AddRow(newEntry);
                                            }
                                            
                                            //MONTH
                                             if (DatePeriod == 'Month') {
                                             	kpidateStart = new Date();
                                             	kpidateStart = Things["KBTimeHelperThing"].GetCurrentMonthStartWithIterations({
                                             		Iterations: Offset /* NUMBER */
                                             	});
                                        
                                        	var offsettime = Resources["KBThingWorxServerSystem"].GetTimeZoneOffsetInMinutesWithDate({
                                        		timeZoneId: Things["KBTimeHelperThing"].ServerTimeZone /* STRING */ ,
                                        		dateTime: kpidateStart
                                        	});
                                                var newEntry1 = new Object();
                                            	newEntry1.kpidateStart = dateAddMinutes(kpidateStart, offsettime);
                                            	newEntry1.kpidateEnd = dateAddMinutes(kpidateStart, offsettime);
                                            	result.AddRow(newEntry1);         
                                             }
                                        
                                        
                                        } catch (err) {
                                        	logger.error("Error on service testInsert2: " + err + " on thing:" + me.name + " at:" + err.lineNumber);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDowntimeSAPTruck">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        	var params = {
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "KBAssetAdvisorSAPDowntime2DataShape"
                                        	};
                                        	// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAssetAdvisorUtilizationTEST)
                                        	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                            var DB = 'KBAssetAdvisorDatabaseAzureThing';
                                        	var params1 = {
                                        		WorkCenter: WorkCenter /* STRING */ ,
                                                PlantID: PlantID /* STRING */		  
                                        	};
                                        	var GetDowntimeFromSAPInfotable = Things[DB].GetDowntimeFromSAP(params1);
                                        	var tableLength = GetDowntimeFromSAPInfotable.getRowCount();
                                        	for (var x = 0; x < tableLength; x++) {
                                        		var row = GetDowntimeFromSAPInfotable.rows[x];
                                        		var date1 = row.calendar_year_month_start;
                                        		// dateFormat(dateValue:DATETIME, dateFormat:STRING):STRING
                                        		var formattedDate = dateFormat(date1, "MM/yy");
                                        		//Your code here
                                        		var newEntry = new Object();
                                        		newEntry.DowntimeSAP = row.malfunction_duration_fl.toFixed(1);                                        		
                                        		//		newEntry.Date = dateValue;
                                        		newEntry.DateString = formattedDate;
                                        		result.AddRow(newEntry);
                                        	}
                                        
                                        
                                        } catch (err) {
                                        	logger.error("Error on service GetDowntimeSAPTruck: " + err + " on thing:" + me.name + " at:" + err.lineNumber);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAllMaintenanceKPIValues">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        	// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAssetAdvisorUtilizationTEST)
                                        	var params2 = {
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "KBAssetAdvisorMaintenanceKPIDataShape"
                                        	};
                                        	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params2);
                                        	var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();
                                        	var params1 = {
                                        		Machine: Machine /* BOOLEAN */ ,
                                        		KPITimeBase: KPITimeBase /* STRING */ 		
                                        	};
                                        	var AllMaintenanceKPIValues1 = Things[DB].GetMaintenanceKPIValues(params1);
                                        	var tableLength = AllMaintenanceKPIValues1.rows.length;
                                        	for (var x = 0; x < tableLength; x++) {
                                        		var row = AllMaintenanceKPIValues1.rows[x];
                                        		//Your code here
                                        		var newEntry = new Object();
                                                var date1 = row.Time;
                                        	// dateFormat(dateValue:DATETIME, dateFormat:STRING):STRING
                                                var formattedDate = dateFormat(date1, "MM/yy");
                                                newEntry.MTBF = row.MTBF;
                                                newEntry.MTTR = row.MTTR;
                                                newEntry.MRT = row.MRT;
                                                newEntry.Time = row.Time; 
                                        		newEntry.TimeString = formattedDate;
                                                result.AddRow(newEntry); 
                                        	}
                                        } catch (err) {
                                        	logger.error("GetAllMaintenanceKPIValues Error: " + err + " on thing: " + me.name + " at: " + err.lineNumber);
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMaintenanceCostsSAPTruck">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        	var params = {
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "KBAssetAdvisorMaintenanceCosts2DataShape"
                                        	};
                                        	// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAssetAdvisorUtilizationTEST)
                                        	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                            var DB = 'KBAssetAdvisorDatabaseAzureThing';
                                        	var params1 = {
                                        		WorkCenter: WorkCenter /* STRING */ ,
                                                PlantID: PlantID /* STRING */		  
                                        	};
                                        	var GetMaintenanceCostsInfotable = Things[DB].GetMaintenanceCosts(params1);
                                        	var tableLength = GetMaintenanceCostsInfotable.getRowCount();
                                        	for (var x = 0; x < tableLength; x++) {
                                        		var row = GetMaintenanceCostsInfotable.rows[x];
                                        
                                        		var date1 = row.TimePeriod;
                                        		// dateFormat(dateValue:DATETIME, dateFormat:STRING):STRING
                                        		var formattedDate = dateFormat(date1, "MM/yy");
                                        
                                        		//Your code here
                                        		var newEntry = new Object();
                                        		newEntry.Actual = row.ActualCosts.toFixed(0);
                                        		newEntry.IndMaterial = row.IndMaterial.toFixed(0);
                                        		newEntry.ExtLabour = row.ExtLabour.toFixed(0);
                                        		newEntry.IntLabour = row.IntLabour.toFixed(0);
                                        		newEntry.Others = row.Others.toFixed(0);
                                        		newEntry.TimePeriodString = formattedDate;
                                        		newEntry.CostsCurrency = 'costs,' + ' ' +row.Currency;
                                        		                                        
                                        		result.AddRow(newEntry);
                                        	}
                                        
                                        
                                        } catch (err) {
                                        	logger.error("Error on service GetMaintenanceCostsSAPTruck: " + err + " on thing:" + me.name + " at:" + err.lineNumber);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDowntimeStatisticsTWX">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "KBAssetAdvisorMachineDowntimeStatisticsTWXDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAssetAdvisorUtilizationTEST)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();
                                        var params1 = {
                                        	Machine: Machine /* BOOLEAN */ ,
                                        	KPITimeBase: KPITimeBase /* STRING */
                                        };
                                        var GetMachineDowntimeStatisticLastYearInfotable = Things[DB].GetMachineDowntimeStatisticLastYear(params1);
                                        var tableLength = GetMachineDowntimeStatisticLastYearInfotable.rows.length;
                                        for (var x = 0; x < tableLength; x++) {
                                        	var row = GetMachineDowntimeStatisticLastYearInfotable.rows[x];
                                        	//Your code here
                                        	var date1 = row.KPIDateTimeEnd;
                                        	// dateFormat(dateValue:DATETIME, dateFormat:STRING):STRING
                                        	var formattedDate = dateFormat(date1, "MM/yy");
                                        	var KPIFLoatValueInHours = row.KPIFloatValue / 3600;
                                        	var newEntry = new Object();
                                        	newEntry.DowntimeTWX = KPIFLoatValueInHours.toFixed(1);
                                        	newEntry.DateString = formattedDate;
                                        	result.AddRow(newEntry);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMonthStartWithIterations">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {	
                                        	var kpidateStart;
                                        	var kpidateEnd;
                                            var params = {
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "KBAssetAdvisorYearStartYearEnd"
                                        	};
                                        	// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAssetAdvisorYearStartYearEnd)
                                        	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                            
                                            //YEAR
                                        	
                                            if (DatePeriod == 'year') {
                                            	kpidateStart = new Date(Resources["KBThingWorxServerSystem"].GetUTCYear(), 0, 1);
                                            	kpidateEnd = dateAddMonths(kpidateStart, 11);
                                            	kpidateStart = dateAddYears(kpidateStart, Offset);
                                            	kpidateEnd = dateAddYears(kpidateEnd, Offset);
                                            	var newEntry = new Object();
                                            	newEntry.kpidateStart = kpidateStart;
                                            	newEntry.kpidateEnd = kpidateEnd;
                                            	result.AddRow(newEntry);
                                            }
                                            
                                            //MONTH
                                             if (DatePeriod == 'month') {
                                             	kpidateStart = new Date();
                                             	kpidateStart = Things["KBTimeHelperThing"].GetCurrentMonthStartWithIterations({
                                             		Iterations: Offset /* NUMBER */
                                             	});
                                        
                                        	var offsettime = Resources["KBThingWorxServerSystem"].GetTimeZoneOffsetInMinutesWithDate({
                                        		timeZoneId: Things["KBTimeHelperThing"].ServerTimeZone /* STRING */ ,
                                        		dateTime: kpidateStart
                                        	});
                                                var newEntry1 = new Object();
                                            	newEntry1.kpidateStart = dateAddMinutes(kpidateStart, offsettime);
                                            	newEntry1.kpidateEnd = dateAddMinutes(kpidateStart, offsettime);
                                            	result.AddRow(newEntry1);         
                                             }
                                        
                                        
                                        } catch (err) {
                                        	logger.error("Error on service testInsert2: " + err + " on thing:" + me.name + " at:" + err.lineNumber);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetUtilizationTruckTarget">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        	var params = {
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "KBAssetAdvisorTargetUtilizationDataShape"
                                        	};
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAssetAdvisorUtilizationTEST)
                                        	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        	var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();
                                        	var params1 = {
                                        		Machine: Machine /* BOOLEAN */ ,
                                                KPIName: KPIName /* STRING */,
                                        		KPITimeBase: KPITimeBase /* STRING */         
                                        	};
                                        	var GetUtilizationTruckTable = Things[DB].GetUtilizationTruck(params1);
                                        	var tableLength = GetUtilizationTruckTable.rows.length;
                                        	for (var x = 0; x < tableLength; x++) {
                                        		var row = GetUtilizationTruckTable.rows[x];
                                        		//    result = row; 
                                        		//Your code here
                                        		var date1 = row.KPIDateTimeEnd;
                                        		// dateFormat(dateValue:DATETIME, dateFormat:STRING):STRING
                                        		var formattedDate = dateFormat(date1, "MM/yy");
                                        		var newEntry = new Object();
                                        		newEntry.Utilization = row.KPIFloatValue;
                                        		newEntry.TargetUtilization = 100;
                                        		newEntry.KPIDateTimeEnd = row.KPIDateTimeEnd;
                                        		newEntry.KPIDateTimeEndString = formattedDate;
                                        		result.AddRow(newEntry);
                                        	}
                                        } catch (err) {
                                        	logger.error("GetUtilizationTruckTarget Error: " + err + " on thing: " + me.name + " at: " + err.lineNumber);
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
