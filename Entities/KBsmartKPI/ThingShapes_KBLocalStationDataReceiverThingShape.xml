<?xml version="1.0" encoding="UTF-8"?>
<Entities build="b97" majorVersion="8" minorVersion="4"
	modelPersistenceProviderPackage="MssqlPersistenceProviderPackage"
	revision="11" schemaVersion="1044" universal="password">
	<ThingShapes>
		<ThingShape aspect.isExtension="true" className=""
			description="" documentationContent="" homeMashup=""
			lastModifiedDate="2021-05-14T10:17:48.974+02:00"
			name="KBLocalStationDataReceiverThingShape" projectName="KBsmartKPI"
			tags="">
			<PropertyDefinitions>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.defaultValue="false"
					aspect.isLogged="false" aspect.isPersistent="true"
					aspect.isReadOnly="false" baseType="BOOLEAN" category=""
					description="" isLocalOnly="false"
					name="BypassGenericTestBenchDataBuffer" ordinal="8"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.defaultValue="false"
					aspect.isLogged="false" aspect.isPersistent="true"
					aspect.isReadOnly="false" baseType="BOOLEAN" category=""
					description="" isLocalOnly="false" name="BypassMachineDataBuffer"
					ordinal="5"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.defaultValue="false"
					aspect.isLogged="false" aspect.isPersistent="true"
					aspect.isReadOnly="false" baseType="BOOLEAN" category=""
					description="" isLocalOnly="false" name="BypassMessageDataBuffer"
					ordinal="4"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.defaultValue="false"
					aspect.isLogged="false" aspect.isPersistent="true"
					aspect.isReadOnly="false" baseType="BOOLEAN" category=""
					description="" isLocalOnly="false" name="BypassPartDataBuffer"
					ordinal="6"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.defaultValue="false"
					aspect.isLogged="false" aspect.isPersistent="true"
					aspect.isReadOnly="false" baseType="BOOLEAN" category=""
					description="" isLocalOnly="false" name="BypassStateDataBuffer"
					ordinal="7"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE"
					aspect.dataShape="KBQuickButtonsDataShape"
					aspect.isPersistent="true" baseType="INFOTABLE" category=""
					description="" isLocalOnly="false" name="QuickButtonsInfotable"
					ordinal="2"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isPersistent="true"
					baseType="BOOLEAN" category="" description="" isLocalOnly="false"
					name="StationInMaintenanceStatus" ordinal="3"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="true"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					baseType="STRING" category=""
					description="Current Order Number in Production (from last message)"
					isLocalOnly="false" name="CurrentOrderNumber" ordinal="23"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="true"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					baseType="STRING" category=""
					description="Current Operation Number in Production"
					isLocalOnly="false" name="CurrentOperationNumber" ordinal="23"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="true"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					baseType="STRING" category=""
					description="Current Part Number in Production (from last message)"
					isLocalOnly="false" name="CurrentPartNumber" ordinal="24"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="false"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					aspect.thingTemplate="KBLocalMachineThingTemplate"
					baseType="THINGNAME" category="" description="" isLocalOnly="false"
					name="KBLocalLineThing" ordinal="3"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="true"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					baseType="STRING" category=""
					description="Last Order Number in Production (last one from messages which is different to current one)"
					isLocalOnly="false" name="LastOrderNumber" ordinal="21"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="true"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					baseType="STRING" category=""
					description="Last Part Number in Production (last one from messages which is different to current one)"
					isLocalOnly="false" name="LastPartNumber" ordinal="22"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="true"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					baseType="STRING" category="" description="Line"
					isLocalOnly="false" name="Line" ordinal="1"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE"
					aspect.dataShape="KBLocalStationDataReceiverMachineDataShape"
					aspect.isLogged="false" aspect.isPersistent="true"
					aspect.isReadOnly="false" baseType="INFOTABLE" category=""
					description="" isLocalOnly="false" name="MachineData" ordinal="16"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE"
					aspect.dataShape="KBLocalStationDataReceiverStateDataShape"
					aspect.isLogged="false" aspect.isPersistent="true"
					aspect.isReadOnly="false" baseType="INFOTABLE" category=""
					description="" isLocalOnly="false" name="MachineEvent" ordinal="15"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="true"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					baseType="STRING" category="" description="Machine State"
					isLocalOnly="false" name="MachineState" ordinal="10"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="true"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					baseType="DATETIME" category="" description="Machine State Date"
					isLocalOnly="false" name="MachineStateDate" ordinal="11"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="true"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					baseType="STRING" category="" description="Machine State Level2"
					isLocalOnly="false" name="MachineStateLevel2" ordinal="25"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE"
					aspect.dataShape="KBLocalStationDataReceiverMessageDataShape"
					aspect.isLogged="false" aspect.isPersistent="false"
					aspect.isReadOnly="false" baseType="INFOTABLE" category=""
					description="***DEPRECATED***" isLocalOnly="false"
					name="MessageData" ordinal="18"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE"
					aspect.dataShape="KBLocalStationDataReceiverPartDataShape"
					aspect.isLogged="false" aspect.isPersistent="false"
					aspect.isReadOnly="false" baseType="INFOTABLE" category=""
					description="***DEPRECATED***" isLocalOnly="false" name="PartData"
					ordinal="17"></PropertyDefinition>
				<PropertyDefinition aspect.cacheTime="0.0"
					aspect.dataChangeType="VALUE" aspect.isLogged="true"
					aspect.isPersistent="true" aspect.isReadOnly="false"
					baseType="STRING" category="" description="Station"
					isLocalOnly="false" name="Station" ordinal="2"></PropertyDefinition>
					<PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.defaultValue="false"
                     aspect.isPersistent="true"
                     baseType="BOOLEAN"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="isBlockingInputMaskWithPMMT"
                     ordinal="4"></PropertyDefinition>
                     <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.defaultValue="false"
                     aspect.isPersistent="true"
                     baseType="BOOLEAN"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="IsMTOnsite"
                     ordinal="5"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="BOOLEAN"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="StartSAPPMNotification"
                     ordinal="2"></PropertyDefinition>
			</PropertyDefinitions>
			<ServiceDefinitions>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetMachineData">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverMachineDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="machineDataInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="true"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetMachineDataForDevice">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverMachineDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="machineDataInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetMachineDataWithoutBuffer">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverMachineDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="machineDataInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetMessage">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverMessageDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="messageInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="true"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetMessageForDevice">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverMessageDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="messageInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetMessageWithoutBuffer">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverMessageDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="messageInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetPartData">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverPartDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="partDataInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="true"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetPartDataForDevice">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverPartDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="partDataInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetPartDataWithoutBuffer">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverPartDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="partDataInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetRetestAtTestBenchMessage">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition aspect.isRequired="false"
							baseType="STRING" description="" name="Description" ordinal="5"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="INTEGER" description="" name="NumberOfParts"
							ordinal="4"></FieldDefinition>
						<FieldDefinition aspect.defaultValue="-"
							aspect.isRequired="true" baseType="STRING" description=""
							name="OrderNumber" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.defaultValue="-"
							aspect.isRequired="true" baseType="STRING" description=""
							name="PartNumber" ordinal="2"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="DATETIME" description="" name="ProductionDate"
							ordinal="6"></FieldDefinition>
						<FieldDefinition aspect.defaultValue="-"
							aspect.isRequired="true" baseType="STRING" description=""
							name="SerialNumber" ordinal="3"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetSapPmState">
					<ResultType baseType="STRING" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="MSAUS" name="IsNotified"
							ordinal="8"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="TEXT_LINE" name="LongText"
							ordinal="5"></FieldDefinition>
						<FieldDefinition aspect.defaultValue="Y1"
							baseType="STRING" description="QMART" name="NotificationType"
							ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="INTEGER" description="PRIOK" name="Priority"
							ordinal="9"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="EQUNR" name="SapEquipmentNumber"
							ordinal="4"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="TPLNR"
							name="SapFunctionalLocation" ordinal="3"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="QMTXT" name="ShortText"
							ordinal="2"></FieldDefinition>
						<FieldDefinition
							aspect.defaultValue="1970-01-01T00:00:00.000+01:00"
							baseType="DATETIME" description="AUSVN + AUZTV"
							name="StartDateTime" ordinal="10"></FieldDefinition>
						<FieldDefinition aspect.defaultValue="0"
							baseType="STRING" description="STATE" name="State" ordinal="11"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="QMNAM" name="UserName" ordinal="6"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="PARNR" name="UserPhone"
							ordinal="7"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetSingleDynamicMessage">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="Description" ordinal="2"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="Identifier" ordinal="3"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="ShortName" ordinal="4"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="Type" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetSinglePartConfirmationV1">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition aspect.isRequired="true"
							baseType="DATETIME" description="" name="ProductionTime"
							ordinal="2"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="BOOLEAN" description="" name="isPartOK" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="BOOLEAN" description="" name="isPartFullyProduced"
							ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false"
							baseType="STRING" description="" name="PartNumber" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false"
							baseType="STRING" description="" name="SerialNumber" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false"
							baseType="STRING" description="" name="SAPOrderNumber"
							ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false"
							baseType="STRING" description="" name="SAPOperationNumber"
							ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false"
							baseType="INTEGER" description="" name="TimePerPartSec"
							ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false"
							baseType="STRING" description="" name="ScrapReason" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="INTEGER" description="" name="NumberOfParts"
							ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetSingleMessageV1">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="MessageType1" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="MessageType2" ordinal="2"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="Message" ordinal="3"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="Comment" ordinal="4"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="DATETIME" description="" name="MessageTime" ordinal="5"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetSingleDynamicState">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="EventName" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="Status" ordinal="2"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetSingleStateV1">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="StatusType" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="Status" ordinal="2"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="SubStatus" ordinal="3"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="Comment" ordinal="4"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="DATETIME" description="" name="StatusTime" ordinal="5"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetSingleMachineDataV1">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
      					<FieldDefinition aspect.isRequired="true" baseType="DATETIME"
							description="" name="MachineDataTime" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true" baseType="STRING" description=""
							name="MachineDataType" ordinal="2"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true" baseType="NUMBER" description=""
							name="MachineData" ordinal="3"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="NUMBER" description=""
							name="MachineDataLSL" ordinal="4"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="NUMBER" description=""
							name="MachineDataUSL" ordinal="5"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="STRING" description=""
							name="MachineDataUnit" ordinal="6"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="STRING" description=""
							name="Description" ordinal="7"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="STRING" description=""
							name="Comment" ordinal="8"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetSinglePartDataV1">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
      					<FieldDefinition aspect.isRequired="true" baseType="DATETIME"
							description="" name="PartDataTime" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true" baseType="STRING" description=""
							name="PartDataType" ordinal="2"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true" baseType="NUMBER" description=""
							name="PartData" ordinal="3"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="NUMBER" description=""
							name="PartDataLSL" ordinal="4"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="NUMBER" description=""
							name="PartDataUSL" ordinal="5"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="STRING" description=""
							name="PartDataUnit" ordinal="6"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="STRING" description=""
							name="Description" ordinal="7"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="STRING" description=""
							name="Comment" ordinal="8"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="STRING" description=""
							name="SerialNumber" ordinal="8"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="STRING" description=""
							name="TrackingNumber" ordinal="8"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="STRING" description=""
							name="OrderNumber" ordinal="8"></FieldDefinition>
						<FieldDefinition aspect.isRequired="false" baseType="STRING" description=""
							name="PartNumber" ordinal="8"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetSingleDynamicStateWithDate">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="EventName" ordinal="1"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="DATETIME" description="" name="ProductionDate"
							ordinal="3"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING" description="" name="Status" ordinal="2"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetSingleOkNokDecision">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition baseType="DATETIME"
							description="Production Date Time" name="DateTime" ordinal="5"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="BOOLEAN" description="" name="isPartOk" ordinal="1"></FieldDefinition>
						<FieldDefinition baseType="STRING" description=""
							name="OrderNumber" ordinal="2"></FieldDefinition>
						<FieldDefinition baseType="STRING" description=""
							name="PartNumber" ordinal="3"></FieldDefinition>
						<FieldDefinition baseType="STRING" description=""
							name="SerialNumber" ordinal="4"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetState">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverStateDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="stateInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="true"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetStateForDevice">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverStateDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="stateInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="GetFilteredQuickButtonsInfotable">
					<ResultType aspect.dataShape="KBQuickButtonsDataShape"
						baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition baseType="STRING" description=""
							name="Filter1" ordinal="1"></FieldDefinition>
						<FieldDefinition baseType="STRING" description=""
							name="Filter2" ordinal="2"></FieldDefinition>
						<FieldDefinition baseType="STRING" description=""
							name="Filter3" ordinal="3"></FieldDefinition>
						<FieldDefinition baseType="STRING" description=""
							name="Filter4" ordinal="4"></FieldDefinition>
						<FieldDefinition baseType="STRING" description=""
							name="Filter5" ordinal="5"></FieldDefinition>
						<FieldDefinition baseType="STRING" description=""
							name="Station" ordinal="6"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="GetQuickButtonsCount">
					<ResultType baseType="NUMBER" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions></ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetStateWithoutBuffer">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBLocalStationDataReceiverStateDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="stateInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetTestBenchData">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBGenericTestBenchInputDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="testBenchInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetCVSAdgTestBenchData">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBGenericTestBenchInputDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="testBenchInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="true"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetTestBenchDataForDevice">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBGenericTestBenchInputDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="testBenchInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="true"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetCVSAdgTestBenchDataForDevice">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBGenericTestBenchInputDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="testBenchInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetTestBenchDataWithoutBuffer">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBGenericTestBenchInputDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="testBenchInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="SetCVSAdgTestBenchDataWithoutBuffer">
					<ResultType baseType="BOOLEAN" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition
							aspect.dataShape="KBGenericTestBenchInputDataShape"
							aspect.isRequired="true" baseType="INFOTABLE" description=""
							name="testBenchInfoTable" ordinal="1"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition aspect.isAsync="false"
					category="" description="" isAllowOverride="false"
					isLocalOnly="false" isOpen="false" isPrivate="false"
					name="UploadTestBenchPDF">
					<ResultType baseType="STRING" description=""
						name="result" ordinal="0"></ResultType>
					<ParameterDefinitions>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING"
							description="Material Number (Alphanumeric, 18 chars, always mandatory)"
							name="MaterialNumber" ordinal="2"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING"
							description="Number of parts (for OEE later useful) - 1 if only 1 serial number tested, multiple for ranges (e.g. valves/cables with set testing)"
							name="NumberOfParts" ordinal="3"></FieldDefinition>
						<FieldDefinition baseType="BLOB"
							description="PDF Content (Base64 encoding of the file content)"
							name="PDF" ordinal="1"></FieldDefinition>
						<FieldDefinition
							aspect.defaultValue="1970-01-01T00:00:00.000+01:00"
							baseType="DATETIME"
							description="Production Date + Time (optional)"
							name="ProductionDateTime" ordinal="5"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING"
							description="Production order number (Character Field, 12 digits, mandatory) - even if only numberic at KB currently"
							name="ProductionOrderNumber" ordinal="6"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING"
							description="Protocol Type:&#xA;ET I                 &#x9;Elektrische Prüfprotokolle &#x9;Electrical Safety Report&#xA;ET II                 &#x9;Funktionsprüfprotokolle&#x9;Functional Test Report&#xA;ET III                 &#x9;Checklisten extern&#x9;External Quality Test Report&#xA;ET IV                 &#x9;Checklisten intern&#x9;Internal Quality Test Report&#xA;ET V                 &#x9;Drehmoment&#x9;Torque Report&#xA;ET VI                 &#x9;Messbericht&#x9;Dimension Report "
							name="ProtocolType" ordinal="7"></FieldDefinition>
						<FieldDefinition aspect.isRequired="true"
							baseType="STRING"
							description="Result (mandatory)&#xA;FAIL&#xA;PASS"
							name="ResultValue" ordinal="8"></FieldDefinition>
						<FieldDefinition aspect.defaultValue="-"
							baseType="STRING"
							description="Serial number (optional):&#xA;List of serial numbers (1-n for which the same transferred test protocol is valid) - max. 18 chararcters for each serial number (for multiples, for each serial number output file is created)"
							name="SerialNumber" ordinal="4"></FieldDefinition>
					</ParameterDefinitions>
				</ServiceDefinition>
				<ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetIsBlockingInputMaskWithPMMT">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="Input"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SetIsMTOnsite">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="Input"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
			</ServiceDefinitions>
			<EventDefinitions></EventDefinitions>
			<ServiceMappings></ServiceMappings>
			<ServiceImplementations>
				<ServiceImplementation description=""
					handlerName="Script" name="SetMachineData">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    try {
                                    	
                                    	var dateValue = new Date();
                                    
                                    	if (me.BypassMachineDataBuffer) {
                                              // result: BOOLEAN
                                            result = me.SetMachineDataWithoutBuffer({
                                                machineDataInfoTable: machineDataInfoTable /* INFOTABLE */
                                            });   
                                    
                                    //		Things["KBProcessDataReceiverProcessedFileRepositoryThing"].SaveJSON({
                                    //			path: "SetMachineData\\"+dateValue.getTime()+me.name+".json" /* STRING */,
                                    //			content: machineDataInfoTable.ToJSON() /* JSON */
                                    //		});
                                    	} else {
                                    		
                                    		Things["KBProcessDataReceiverFileRepositoryThing"].SaveJSON({
                                    			path: "SetMachineData\\"+dateValue.getTime()+me.name+".json" /* STRING */,
                                    			content: machineDataInfoTable.ToJSON() /* JSON */
                                    		});
                                    		
                                    		result = true;
                                    	}
                                    
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetMachineDataForDevice">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = true;
                                    									
                                    try {
                                    	logger.debug("Start SetMachineDataForDevice Service");
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetMachineDataWithoutBuffer">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    logger.debug("SetMachineDataWithoutBuffer: Start SetMachineData Service");
                                    logger.debug("SetMachineDataWithoutBuffer: "+machineDataInfoTable.ToJSON());
                                    
                                    var tableLength = machineDataInfoTable.rows.length;
                                    var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();
                                    
                                    logger.debug("SetMachineDataWithoutBuffer: Number of rows in Data Table: " + tableLength);
                                    
                                    for (var x = 0; x < tableLength; x++) {
                                    
                                    	logger.debug("SetMachineDataWithoutBuffer: Executing line: " + x);
                                    
                                    	me.Line = machineDataInfoTable.rows[x].Line;
                                        me.Station = machineDataInfoTable.rows[x].Station;
                                    
                                    	var filter = new Object();
                                    	filter.ShortName = machineDataInfoTable.rows[x].ShortName;
                                    	try {
                                    		me.MachineData.Delete(filter);
                                    		me.MachineData.AddRow(machineDataInfoTable.rows[x]);
                                    	} catch(err) {
                                    		logger.debug("Warning updating Thing property (but can be continued!): " + err);
                                    	}
                                    
                                    	var value_str = machineDataInfoTable.rows[x].Value;
                                    	logger.debug("SetMachineDataWithoutBuffer: SetPartData Service - value 1: " + value_str);
                                    	if (value_str == null || value_str == undefined || value_str == "") { value_str = "0";}
                                    	logger.debug("SetMachineDataWithoutBuffer: SetPartData Service - value 2: " + value_str);
                                    	var value_str1 = value_str.replace(/\,/, ".");
                                    	logger.debug("SetMachineDataWithoutBuffer: SetPartData Service - value 3: " + value_str1);
                                    	var value_float = parseFloat(value_str1);
                                    	logger.debug("SetMachineDataWithoutBuffer: SetPartData Service - value 4: " + value_float);
                                    
                                    	var ul_str = machineDataInfoTable.rows[x].UpperLimit;
                                    	if (ul_str == null || ul_str == undefined || ul_str == "") { ul_str = "0";}
                                    	var ul_str1 = ul_str.replace(/\,/, ".");
                                    	var ul_float = parseFloat(ul_str1);
                                    	logger.debug("SetMachineDataWithoutBuffer: SetPartData Service - ul: " + ul_float);
                                    
                                    	var ll_str = machineDataInfoTable.rows[x].LowerLimit;
                                    	if (ll_str == null || ll_str == undefined || ll_str == "") { ll_str = "0";}
                                    	var ll_str1 = ll_str.replace(/\,/, ".");
                                    	var ll_float = parseFloat(ll_str1);
                                    	logger.debug("SetMachineDataWithoutBuffer: SetPartData Service - ll: " + ll_float);
                                    
var result = true;                                    


var AZUREFunctionURL = "";

var URLsystem = Resources["KBThingWorxServerSystem"].GetStagingIdentifier();
if (URLsystem == "PROD") {
                                    	//Database		
                                    	var params = {
                                    		ValueName: machineDataInfoTable.rows[x].ShortName /* STRING */,
                                    		Value: value_float /* NUMBER */,
                                    		LowerLimit: ll_float /* NUMBER */,
                                    		Unit: machineDataInfoTable.rows[x].Unit /* STRING */,
                                    		UpperLimit: ul_float /* NUMBER */,
                                    		DateTime: machineDataInfoTable.rows[x].DateTime /* DATETIME */,
                                    		Machine: me.name /* STRING */,
                                    		Description: machineDataInfoTable.rows[x].Description,
                                    		Comment: machineDataInfoTable.rows[x].Identifier
                                    	};
                                    	
                                    	// result: NUMBER
                                    	result = Things[DB].AddMachineFloatDataToDataTable(params);	                            	
} else if (URLsystem == "TEST") {
	AZUREFunctionURL = "https://smartproductiondataconnectortest.azurewebsites.net/api/SensorFloatData_V1?code=GeoOE6HGLA_1KmrXuYopB7Q6Y1AXViRE6PyCRvPnlQW7AzFuwQwyjA==";
} else {
	AZUREFunctionURL = "https://smartproductiondataconnectordev.azurewebsites.net/api/SensorFloatData_V1?code=6xSEGls36neqlv8gwu3Nk0I8Jgmmoty53jf9fSWePHNoAzFuwOKzNw==";
}

if (URLsystem != "PROD") {
											if (Resources["ContentLoaderFunctions"].PostJSON({
									        url: AZUREFunctionURL,
									        content: {
									            "SourceSystem": Resources["KBThingWorxServerSystem"].GetCommonHostName(),
									            "StagingLevel": Resources["KBThingWorxServerSystem"].GetStagingIdentifier(),
									            "DeviceName": me.name,
									            "SensorName": machineDataInfoTable.rows[x].ShortName,
									            "Description": machineDataInfoTable.rows[x].Description,
									            "Comment": machineDataInfoTable.rows[x].Identifier,
									            "Unit": machineDataInfoTable.rows[x].Unit,
									            "MeassurementValue": value_float,
									            "MeassurementValueLSL": ll_float,
									            "MeassurementValueUSL": ul_float,
									            "MeassurementDateTimeJava": machineDataInfoTable.rows[x].DateTime
									    } /* JSON */
									    }).result == "OK"){
									    	result = true; 
									    } else {
									    	result = false; 
									    } 
}


                                    	logger.debug("SetMachineDataWithoutBuffer: " + result);

                                    
if (result) {
                                    	
                                    	// result: BOOLEAN
                                    	result = me.SetMachineDataForDevice({
                                    		machineDataInfoTable: machineDataInfoTable /* INFOTABLE */
                                    	});
                                    	if (!result){
                                    		logger.warn("SetMachineDataWithoutBuffer: SetMachineDataForDevice was not successful");
                                    	}
}else {
                                    		logger.error("SetMachineDataWithoutBuffer: smartproductiondataconnector was not successful");
}                                    	
                                    	
                                    
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetMessage">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    try {
                                    	
                                    	var dateValue = new Date();
                                    
                                    	if (me.BypassMessageDataBuffer) {
                                    		// result: BOOLEAN
                                    		result = me.SetMessageWithoutBuffer({
                                    		    messageInfoTable: messageInfoTable /* INFOTABLE */
                                    		}); 		
                                    
                                    //		Things["KBProcessDataReceiverProcessedFileRepositoryThing"].SaveJSON({
                                    //			path: "SetMessage\\"+dateValue.getTime()+me.name+".json" /* STRING */,
                                    //			content: messageInfoTable.ToJSON() /* JSON */
                                    //		});
                                    	} else {
                                    		
                                    		Things["KBProcessDataReceiverFileRepositoryThing"].SaveJSON({
                                    			path: "SetMessage\\"+dateValue.getTime()+me.name+".json" /* STRING */,
                                    			content: messageInfoTable.ToJSON() /* JSON */
                                    		});
                                    		
                                    		result = true;
                                    	}
                                    
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="GetQuickButtonsCount">
					<ConfigurationTables>
						<ConfigurationTable description=""
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                        <![CDATA[
                                        var result;
                                        try{
                                         result=me.QuickButtonsInfotable.rows.length;
                                        }catch(err){
                                             result=0;}
                                        ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="GetFilteredQuickButtonsInfotable">
					<ConfigurationTables>
						<ConfigurationTable description=""
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                        <![CDATA[
                                        try{
                                            var Condition="";
                                            var query = 
                                                {"filters": {
                                                    "type": "OR",
                                                    "filters": [ 
                                                        {"type": "EQ","fieldName": "Category","value": ""+Filter1+""},
                                                        {"type": "EQ","fieldName": "Category","value": ""+Filter2+""},
                                                        {"type": "EQ","fieldName": "Category","value": ""+Filter3+""},
                                                        {"type": "EQ","fieldName": "Category","value": ""+Filter4+""},
                                                        {"type": "EQ","fieldName": "Category","value": ""+Filter5+""}
                                            ]}};
                                        var params = {
                                        	infoTableName: "QuickButtonsInfotable" /* STRING */,
                                        	dataShapeName: "KBQuickButtonsDataShape" /* DATASHAPENAME */
                                        };
                                        
                                        var NewInfotable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                             var params3 = {
                                            		t: Things[Station].QuickButtonsInfotable /* INFOTABLE */,
                                            		query: query /* QUERY */
                                            	};
                                        //        var result = me.QuickButtonsInfotable; 
                                         	var result=Resources["InfoTableFunctions"].Query(params3);
                                            
                                        } catch(err) {
                                        	logger.error("KBLIBFP08-Bayonet2Promotic2StationThing GetFilteredQuickButtonsInfotable: " + err + " on thing:" + me.name+ " at:" + err.lineNumber);
                                        
                                        }
                                        ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetMessageForDevice">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = true;
                                    									
                                    try {
                                    	logger.debug("Start SetMessageForDevice Service");
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetMessageWithoutBuffer">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var temp;
try {
	var result;
	var ignore = false;
	var difference = 9999;
	var difference2 = 9999;

	logger.debug("SetMessageWithoutBuffer: Start SetMessage Service");
	logger.debug("SetMessageWithoutBuffer: " + messageInfoTable.ToJSON());

	var tableLength = messageInfoTable.rows.length;
	var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();

	logger.debug("SetMessageWithoutBuffer: Number of rows in Data Table: " + tableLength);

	for (var x = 0; x < tableLength; x++) {
		var MessageTime;
        var Message;
		var messageDescription;
		var AdjustedMessageTime;
		

		    	logger.debug("SetMessageWithoutBuffer: Start Executing line: " + x);

		me.Line = messageInfoTable.rows[x].Line;
		me.Station = messageInfoTable.rows[x].Station;
        Message= messageInfoTable.rows[x].Identifier;
		MessageTime = messageInfoTable.rows[x].DateTime;
		AdjustedMessageTime = messageInfoTable.rows[x].DateTime;
		messageDescription = messageInfoTable.rows[x].Description;

		if (messageInfoTable.rows[x].Type == "STAFF" && messageInfoTable.rows[x].ShortName != "Operator Logout") {


			Message = Resources["EncryptionServices"].EncryptWithKey({
				data: messageInfoTable.rows[x].Identifier /* STRING */ ,
				key: "12345678901234567890123456789012345678901234567890123456" /* STRING */
			});

			//search overlapLogontime
			//Start of adjusting messagetime
			var OverlapSingOnTime = 0;
			var shiftstart;
			var shiftend;
			if (me.UsePlantOverlapSingOnTime) {
    	// logger.error("SetMessageWithoutBuffer: UsePlantOverlapSingOnTime: true" );
				// OverlapSingOnTime
				AdjustedMessageTime = messageInfoTable.rows[x].DateTime;
				if (Things[me.KBLocalLineThing] !== null && Things[Things[me.KBLocalLineThing].KBPlantThing] !== null) {
					if (Things[Things[me.KBLocalLineThing].KBPlantThing].OverlapSingOnTime > 0) {
						OverlapSingOnTime = Things[Things[me.KBLocalLineThing].KBPlantThing].OverlapSingOnTime;
					}
				}
				//search shiftstart and shiftstart
                // logger.error("SetMessageWithoutBuffer: OverlapSingOnTime: " +OverlapSingOnTime);
				if (OverlapSingOnTime > 0) {
					var FullShiftTimeInfotable = Things[DB].GetFullShiftTime({
						date: MessageTime,
						Machine: me.KBLocalLineThing
					});

					if (FullShiftTimeInfotable.getRowCount() > 0 && FullShiftTimeInfotable.CurrentStartTime !== "" && FullShiftTimeInfotable.CurrentStartTime !== null) {
						shiftstart = FullShiftTimeInfotable.rows[0].CurrentStartTime;
						shiftend = FullShiftTimeInfotable.rows[0].CurrentEndTime;
                        // logger.error("SetMessageWithoutBuffer: shiftstart1: " +shiftstart);
					} else {
						shiftstart = MessageTime;
                        // logger.error("SetMessageWithoutBuffer: shiftstart2: " +shiftstart);
					}
					//LastLogoutTime
					var LastLogoutTime = new Date(Things[DB].GetLastSpecificLogoutMessageTime({
						Machine: me.name,
						DateTime: MessageTime
					}).LastDate);
					if (LastLogoutTime === "" || LastLogoutTime === null) {
						LastLogoutTime = shiftstart;
                        // logger.error("SetMessageWithoutBuffer: LastLogoutTime: " +LastLogoutTime);
					}
					//record Logout for all at shift start
					var LastLogoutTimeCheck = new Date(Things[DB].GetLastSpecificLogoutMessageTime({
						Machine: me.name,
						DateTime: LastLogoutTime.setSeconds(LastLogoutTime.getSeconds() + 1)
					}).LastDate);
                    LastLogoutTime.setSeconds(LastLogoutTime.getSeconds() - 1);
					if (shiftstart != LastLogoutTimeCheck) {
                          // logger.error("SetMessageWithoutBuffer: LastLogoutTimeCheck: " +LastLogoutTimeCheck);
						var params = {
							infoTableName: "InfoTable",
							dataShapeName: "KBLocalStationDataReceiverMessageDataShape"
						};
						var params1 = {
							Message: 'Logout' /* STRING */ ,
							MessageType1: 'STAFF' /* STRING */ ,
							Machine: me.name /* STRING */ ,
							Description: 'Auto log out end of shift' /* STRING */ ,
							MessageType2: 'Operator Logout' /* STRING */ ,
							DateTime: shiftstart /* DATETIME */
						};
						Things[DB].AddMachineMessageToDataTable(params1);
					}
					//OperatorStatus
					var ListOfLoggedInUsers;
					var LastLogout;
                    var OperatorStatus = 0;
					if (shiftstart <= LastLogoutTime) {
                        
						ListOfLoggedInUsers = Things[DB].GetCVSUsersLoginListAtLine({
							StartDate: LastLogoutTime,
							EndDate: MessageTime.setSeconds( MessageTime.getSeconds() + 2),
							Station: me.name
						});
                        // logger.error("SetMessageWithoutBuffer: StartDate1: " +LastLogoutTime+" , EndDate: " +MessageTime);
                        
                        MessageTime.setSeconds(MessageTime.getSeconds() - 2);
                        
					} else {
						ListOfLoggedInUsers = Things[DB].GetCVSUsersLoginListAtLine({
							StartDate: shiftstart,
							EndDate: MessageTime.setSeconds(MessageTime.getSeconds() + 2),
							Station: me.name
						});
                        // logger.error("SetMessageWithoutBuffer: StartDate2: " +LastLogoutTime+" , EndDate: " +MessageTime);
                        
                         MessageTime.setSeconds(MessageTime.getSeconds() - 2);
					}
                     // logger.error("SetMessageWithoutBuffer: ListOfLoggedInUsers.getRowCount() : " +ListOfLoggedInUsers.getRowCount()+" , Message: "+Message );
						
					if (ListOfLoggedInUsers.getRowCount() > 0) {
                        
						var NewRecord = 0;
						for (var z = 0; z < ListOfLoggedInUsers.getRowCount(); z++) {
							if (ListOfLoggedInUsers.rows[z].userId == Message ) {
								LastLogout = ListOfLoggedInUsers.rows[z].LastLogout;
                                if(ListOfLoggedInUsers.rows[z].isLoggedIn){
                                	NewRecord = z + 1;
                                }
							}
						}
                        // logger.error("SetMessageWithoutBuffer: NewRecord: " +NewRecord+" , LastLogout: "+LastLogout);

						if (NewRecord > 0) {
							OperatorStatus = 1;
						} else {
							OperatorStatus = 0;
						}
					}
                    // logger.error("SetMessageWithoutBuffer: OperatorStatus : " +OperatorStatus);
                    // logger.error("SetMessageWithoutBuffer: MessageTime: " +MessageTime+" , shiftstart: "+shiftstart );
                    difference1 = Math.abs(MessageTime - shiftstart)/ (1000 * 60);
                    
					if (MessageTime >=shiftstart ) {
                        // logger.error("SetMessageWithoutBuffer: difference1 : " +difference1);
                        if (difference1 <= OverlapSingOnTime){
                            if(OperatorStatus === 0) {
                            
                            // logger.error("SetMessageWithoutBuffer: a: " );
							if (LastLogoutTime >= shiftstart && LastLogoutTime.setSeconds(LastLogoutTime.getSeconds() + 1) < MessageTime) {
                                // logger.error("SetMessageWithoutBuffer: LastLogout: " +LastLogout+" , LastLogoutTime: "+LastLogoutTime);
								if (LastLogout > LastLogoutTime) {
                                    // logger.error("SetMessageWithoutBuffer: c: " );
                                    if(LastLogout > MessageTime) {
                                        // logger.error("SetMessageWithoutBuffer: d: " );
										AdjustedMessageTime = LastLogout;
										messageDescription = messageDescription + ' recorder at: ' + LastLogout;
                                    }else{
                                        // logger.error("SetMessageWithoutBuffer: e: " );
                                        AdjustedMessageTime = MessageTime;
										messageDescription = messageDescription + ' recorder at: ' + MessageTime;
                                    }
								} else {
                                    // logger.error("SetMessageWithoutBuffer: f: " );
									AdjustedMessageTime = LastLogoutTime.setSeconds(LastLogoutTime.getSeconds() + 1);
									messageDescription = messageDescription + ' recorder at: ' + MessageTime;
								}
							} else {
								ignore = true;
							}
                            }else{
                                 if(MessageTime.getSeconds() + 2>shiftend){
                                    ignore=true;
                                }
                            }
						} else {
							//check end of the shift
                            difference2 = Math.abs(shiftend - MessageTime)/ (1000 * 60);
                            // logger.error("SetMessageWithoutBuffer: difference2 : " +difference2);
							//difference2 = dateDifference(min, MessageTime, shiftend);
							if (difference2<=OverlapSingOnTime && OperatorStatus==1) {
								// check if the user was not already logged off till the end of the shift
                                var ListOfLoggedInUsers2;
                               
                                    ListOfLoggedInUsers2 = Things[DB].GetCVSUsersLoginListAtLine({
                                    	StartDate: shiftstart,
                                    	EndDate: shiftend,
                                    	Station: me.name
                                    });
                                
                                // logger.error("SetMessageWithoutBuffer: StartDate3: " +shiftstart+" , EndDate: " +shiftend);
								if (ListOfLoggedInUsers2.getRowCount() > 0) {
									var NewRecord2 = 0;
									for (var zz = 0; zz < ListOfLoggedInUsers2.getRowCount(); zz++) {
										if (ListOfLoggedInUsers2.rows[zz].userId == Message && ListOfLoggedInUsers2.rows[zz].isLoggedIn) {
											NewRecord2 = zz + 1;
										}
									}
									 // logger.error("SetMessageWithoutBuffer: NewRecord2: " +NewRecord2);
									if (NewRecord2 > 0) {
										OperatorStatus = 1;
										//LastLogin=ListOfLoggedInUsers.rows[zz].LastLogin;
									} else {
										OperatorStatus = 0;
									}
								}else {
										OperatorStatus = 0;
								}
                                // logger.error("SetMessageWithoutBuffer: OperatorStatus: " +OperatorStatus);
								if (OperatorStatus == 1) {
									AdjustedMessageTime = shiftend.setSeconds(shiftend.getSeconds() - 1);
									messageDescription = messageDescription + ' recorder at: ' + MessageTime;
								} else {
									ingore = true;
								}
                                  // logger.error("SetMessageWithoutBuffer: difference2<=OverlapSingOnTime && OperatorStatus==1 ");
							}else if(difference2<=OverlapSingOnTime && OperatorStatus===0) {
								// check if the user was not already logged in till the end of the shift
								var ListOfLoggedInUsers3 = Things[DB].GetCVSUsersLoginListAtLine({
									StartDate: shiftend,
									EndDate: shiftend.setSeconds(shiftend.getSeconds() +2),
									Station: me.name
								});
								if (ListOfLoggedInUsers3.getRowCount() > 0) {
									var NewRecord3 = 0;
									for (var zzz = 0; zzz < ListOfLoggedInUsers3.getRowCount(); zzz++) {
										if (ListOfLoggedInUsers3.rows[zzz].userId == Message && ListOfLoggedInUsers3.rows[zzz].isLoggedIn) {
											NewRecord3 = zzz + 1;
										}
									}
                                    // logger.error("SetMessageWithoutBuffer: NewRecord3: "+NewRecord3);

									if (NewRecord3 > 0) {
										OperatorStatus = 1;
										//LastLogin=ListOfLoggedInUsers.rows[zz].LastLogin;
									} else {
										OperatorStatus = 0;
									}
								}else {
										OperatorStatus = 0;
									}
                                // logger.error("SetMessageWithoutBuffer: OperatorStatus: "+OperatorStatus);
								if (OperatorStatus === 0) {
									AdjustedMessageTime = shiftend.setSeconds(shiftend.getSeconds() - 1);
									messageDescription = messageDescription + ' recorder at: ' + MessageTime;
								} else {
									ignore = true;
								}
                                // logger.error("SetMessageWithoutBuffer: difference2<=OverlapSingOnTime && OperatorStatus==0");
                            }
 						}
					}
				}
			}
            MessageTime=AdjustedMessageTime;
			// end of adjusting messagetime
			// else keep the  AdjustedMessageTime = MessageTime, messageDescription = messageDescription  and ingore=false                    
			// logger.error("SetMessageWithoutBuffer: ignore : " +ignore);
            // logger.error("SetMessageWithoutBuffer: MessageTime : " +MessageTime);
            // logger.error("SetMessageWithoutBuffer: Message : " +Message);
            // logger.error("SetMessageWithoutBuffer: messageDescription : " +messageDescription);
            
            
		} if (!ignore) {
				//Database
				var params = {
					Message: Message /* STRING */ ,
					MessageType1: messageInfoTable.rows[x].Type /* STRING */ ,
					Machine: messageInfoTable.rows[x].Station /* STRING */ ,
					Description: messageDescription /* STRING */ ,
					MessageType2: messageInfoTable.rows[x].ShortName /* STRING */ ,
					DateTime: MessageTime /* DATETIME */
				};
				Things[DB].AddMachineMessageToDataTable(params);
			}
			
		result = true;

		var params2 = {
			messageInfoTable: messageInfoTable /* INFOTABLE */
		};

		logger.debug("SetMessageWithoutBuffer: End Executing line: " + x);

		// result: BOOLEAN
		result = me.SetMessageForDevice(params2);
		if (!result) {
			logger.warn("SetMessageWithoutBuffer: SetMessageForDevice was not successful");
		}
	}
} catch (err) {
	logger.error("Error on service SetMessageWithoutBuffer: " + err + " on thing:" + me.name + " at:" + err.lineNumber + " , UserId: " + temp);
}
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetPartData">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    try {
                                    	
                                    	var dateValue = new Date();
                                    
                                    	if (me.BypassPartDataBuffer) {
                                            // result: BOOLEAN
                                            result = me.SetPartDataWithoutBuffer({
                                                partDataInfoTable: partDataInfoTable /* INFOTABLE */
                                            });            
                                    
                                    //		Things["KBProcessDataReceiverProcessedFileRepositoryThing"].SaveJSON({
                                    //			path: "SetPartData\\"+dateValue.getTime()+me.name+".json" /* STRING */,
                                    //			content: partDataInfoTable.ToJSON() /* JSON */
                                    //		});
                                    	} else {
                                    		
                                    		Things["KBProcessDataReceiverFileRepositoryThing"].SaveJSON({
                                    			path: "SetPartData\\"+dateValue.getTime()+me.name+".json" /* STRING */,
                                    			content: partDataInfoTable.ToJSON() /* JSON */
                                    		});
                                    		
                                    		result = true;
                                    	}
                                    
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetPartDataForDevice">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = true;
                                    									
                                    try {
                                    	logger.debug("Start SetPartDataForDevice Service ("+me.name+")");
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetPartDataWithoutBuffer">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();
                                    
                                    	var params = {
                                    		Machine: me.name /* STRING */,
                                    		Type: "KBLocalStationDataReceiverPartDataShape" /* STRING */,
                                    		JSON: partDataInfoTable.ToJSON() /* STRING */
                                    	};
                                    
                                    if (Things[DB].AddProcessFloatDataToBufferDataTable(params) == 1) {
                                    	result = true;		
                                    } else {
                                    	logger.error("Error inserting data");
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetRetestAtTestBenchMessage">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = true;
                                    try {
                                    	var Identifier = OrderNumber+"~"+PartNumber+"~"+SerialNumber;
                                    	var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();
                                    												
                                    	var params = {
                                    		Message: NumberOfParts /* STRING */,
                                    		MessageType1: "RETEST" /* STRING */,
                                    		Machine: me.name /* STRING */,
                                    		Description: Description /* STRING */,
                                    		MessageType2: Identifier /* STRING */,
                                    		DateTime: ProductionDate /* DATETIME */
                                    	};
                                    	
                                    	// result: NUMBER
                                    	Things[DB].AddMachineMessageToDataTable(params);											
                                    	
                                    	if (me.KBLocalLineThing != undefined && me.KBLocalLineThing != "") {
                                    	
                                    		var params = {
                                    			Message: NumberOfParts /* STRING */,
                                    			MessageType1: "RETEST" /* STRING */,
                                    			Machine: me.KBLocalLineThing /* STRING */,
                                    			Description: Description /* STRING */,
                                    			MessageType2: Identifier /* STRING */,
                                    			DateTime: ProductionDate /* DATETIME */
                                    		};
                                    		
                                    		// result: NUMBER
                                    		Things[DB].AddMachineMessageToDataTable(params);											
                                    	}
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetSapPmState">
					<ConfigurationTables>
						<ConfigurationTable description=""
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = "";
                                    try {
                                    	if (!(me.KBLocalLineThing === "")){
                                    		var ARBPL = Things[me.KBLocalLineThing].SAPWorkcenterNumber;
                                    		if (!(me.ARBPL === "")){
                                    			var MSAUS = IsNotified;
                                    
                                    			if (MSAUS != "X" ) {
                                    				StartDateTime = new Date(); 
                                    			} 
                                    			
                                    			var DSID = StartDateTime.getTime().toString().substring(0, 10);
                                    			var QMART = NotificationType;
                                    			var QMTXT = ShortText;
                                    			var TPLNR = SapFunctionalLocation.toUpperCase();
                                    			var EQUNR = SapEquipmentNumber;
                                    			var TEXT_LINE = LongText;
                                    			var QMNAM = UserName;
                                    			var PARNR = UserPhone;
                                    			var PRIOK = Priority;
                                    			var AUSVN = dateFormat(StartDateTime, "yyyyMMdd");
                                    			var AUZTV =  dateFormat(StartDateTime, "HH:mm:ss");
                                    			var ID = me.name.substring(0,27)+StartDateTime.getTime();
                                    			var STATE = State;
                                    			
                                    			var SapXMLString =
                                    				"<soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:urn='http://knorr-bremse.com/xi/003/PM/SBSNotif'>" +
                                    					"<soapenv:Header/>" +
                                    					"<soapenv:Body>" +
                                    						"<urn:MT_DB_StoredProcedure_SBS_Notif>"+
                                    							"<row>" +
                                    								"<DSID>"+DSID+"</DSID>"+
                                    								"<ARBPL>"+ARBPL+"</ARBPL>"+
                                    								"<QMART>"+QMART+"</QMART>"+
                                    								"<QMTXT>"+QMTXT+"</QMTXT>"+
                                    								"<TPLNR>"+TPLNR+"</TPLNR>"+
                                    								"<EQUNR>"+EQUNR+"</EQUNR>"+
                                    								"<TEXT_LINE>"+TEXT_LINE+"</TEXT_LINE>"+
                                    								"<QMNAM>"+QMNAM+"</QMNAM>"+
                                    								"<PARNR>"+PARNR+"</PARNR>"+
                                    								"<MSAUS>"+MSAUS+"</MSAUS>"+
                                    								"<PRIOK>"+PRIOK+"</PRIOK>"+
                                    								"<AUSVN>"+AUSVN+"</AUSVN>"+
                                    								"<AUZTV>"+AUZTV+"</AUZTV>"+
                                    								"<STATE>"+STATE+"</STATE>"+
                                    								"<ID>"+ID+"</ID>"+
                                    							"</row>" +
                                    						"</urn:MT_DB_StoredProcedure_SBS_Notif>"+
                                    					"</soapenv:Body>" +
                                    				"</soapenv:Envelope>";
                                    			
                                    				var params = {
                                    					infoTableName : "InfoTable",
                                    					dataShapeName : "KBLocalStationDataReceiverStateDataShape"
                                    				};
                                    					
                                    				// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBLocalStationDataReceiverStateDataShape)
                                    				var infoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                    				
                                    				// KBLocalStationDataReceiverStateDataShape entry object
                                    				var newEntry = new Object();
                                    				newEntry.Line = me.KBLocalLineThing; // STRING [Primary Key]
                                    				newEntry.Station = me.name; // STRING [Primary Key]
                                    				newEntry.Type = "SAP PM"; // STRING [Primary Key]
                                    				newEntry.Description = SapXMLString; // STRING
                                    				newEntry.Identifier = "Created"; // STRING
                                    				newEntry.ShortName = ID.substring(0,255); // STRING [Primary Key]
                                    				newEntry.DateTime = StartDateTime; // DATETIME [Primary Key]
                                    				
                                    				infoTable.AddRow(newEntry);
                                    				
                                    				// result: BOOLEAN
                                    				var result =  me.SetState({
                                    					stateInfoTable: infoTable /* INFOTABLE */
                                    				});
                                    			
                                    			result = "OK";
                                    			
                                    		} else {
                                    			result = "NOK: SAPWorkcenterNumber not defined";
                                    			logger.error(me.name + " SetSapPmState: " +result);
                                    		}
                                    	} else {
                                    		result = "NOK: KBLocalLineThing not defined";
                                    		logger.error(me.name + " SetSapPmState: " +result);
                                    	}
                                    } catch(err) {
                                    	result = "NOK: "+err;
                                    	logger.error(me.name + " SetSapPmState: " +err);
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetSingleDynamicMessage">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var params = {
                                    	infoTableName : "InfoTable",
                                    	dataShapeName : "KBLocalStationDataReceiverMessageDataShape"
                                    };
                                    
                                    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBLocalStationDataReceiverMessageDataShape)
                                    var infoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                    
                                        // dateValue:DATETIME
                                        var dateValue = new Date();
                                    
                                    // KBLocalStationDataReceiverStateDataShape entry object
                                    var newEntry = new Object();
                                    newEntry.Line = me.KBLocalLineThing; // STRING - isPrimaryKey = true
                                    newEntry.Station = me.name; // STRING - isPrimaryKey = true
                                    newEntry.Type = Type; // STRING [Primary Key]
                                    newEntry.Description = Description; // STRING
                                    newEntry.Identifier = Identifier; // STRING
                                    newEntry.ShortName = ShortName; // STRING [Primary Key]
                                    newEntry.DateTime = dateValue; // DATETIME - isPrimaryKey = true
                                    infoTable.AddRow(newEntry);
                                    
                                    
                                    var result =  me.SetMessage({
                                    	messageInfoTable: infoTable /* INFOTABLE */
                                    });
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetSingleMessageV1">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var params = {
                                    	infoTableName : "InfoTable",
                                    	dataShapeName : "KBLocalStationDataReceiverMessageDataShape"
                                    };
                                    
                                    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBLocalStationDataReceiverMessageDataShape)
                                    var infoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                    
                                    
                                    // KBLocalStationDataReceiverStateDataShape entry object
                                    var newEntry = new Object();
                                    newEntry.Line = me.KBLocalLineThing; // STRING - isPrimaryKey = true
                                    newEntry.Station = me.name; // STRING - isPrimaryKey = true
                                    newEntry.Type = MessageType1; // STRING [Primary Key]
                                    newEntry.Description = Comment; // STRING
                                    newEntry.Identifier = Message; // STRING
                                    newEntry.ShortName = MessageType2; // STRING [Primary Key]
                                    newEntry.DateTime = MessageTime; // DATETIME - isPrimaryKey = true
                                    infoTable.AddRow(newEntry);
                                    
                                    
                                    var result =  me.SetMessage({
                                    	messageInfoTable: infoTable /* INFOTABLE */
                                    });
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetSinglePartConfirmationV1">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[

var station = me.name;
var machine = station;
if (isPartFullyProduced && me.KBLocalLineThing != undefined && me.KBLocalLineThing != ""){
	machine = me.KBLocalLineThing;
}

var result = false;
// result: NUMBER
if (Things["KBKPILocalThingWorxDatabaseThing"].AddQualityResultToDataTable({
	isPartOK: isPartOK /* BOOLEAN */,
	confirmToSAP: false /* BOOLEAN */,
	PartNumber: PartNumber /* STRING */,
	SAPconfirmationResult: undefined /* STRING */,
	confirmedToSAP: false /* BOOLEAN */,
	timePerPartSec: TimePerPartSec /* NUMBER */,
	ScrapReason: ScrapReason /* STRING */,
	OrderNumber: SAPOrderNumber /* STRING */,
	DateTime: ProductionTime /* DATETIME */,
	Machine: machine /* STRING */,
	NumberOfParts: NumberOfParts /* INTEGER */,
	Station: station /* STRING */,
	SAPOperationNumber: SAPOperationNumber /* STRING */,
	SerialNumber: SerialNumber /* STRING */,
	EmployeeID: undefined /* STRING */
}) > 0) {
	result = true;
}


                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetSingleDynamicState">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var params = {
                                    	infoTableName : "InfoTable",
                                    	dataShapeName : "KBLocalStationDataReceiverStateDataShape"
                                    };
                                    
                                    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBLocalStationDataReceiverStateDataShape)
                                    var infoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                    
                                        // dateValue:DATETIME
                                        var dateValue = new Date();
                                        //dateValue.setMilliseconds(0);
                                    
                                    // KBLocalStationDataReceiverStateDataShape entry object
                                    var newEntry = new Object();
                                    newEntry.Line = me.KBLocalLineThing; // STRING - isPrimaryKey = true
                                    newEntry.Station = me.name; // STRING - isPrimaryKey = true
                                    newEntry.Type = "STATE"; // STRING - isPrimaryKey = true
                                    newEntry.Description = undefined; // STRING
                                    newEntry.Identifier = Status; // STRING
                                    newEntry.ShortName = EventName; // STRING - isPrimaryKey = true
                                    newEntry.DateTime = dateValue; // DATETIME - isPrimaryKey = true
                                    
                                    infoTable.AddRow(newEntry);
                                    
                                    
                                    var params = {
                                    	stateInfoTable: infoTable /* INFOTABLE */
                                    };
                                    
                                    // result: BOOLEAN
                                    var result = me.SetState(params);
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetSingleStateV1">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var params = {
                                    	infoTableName : "InfoTable",
                                    	dataShapeName : "KBLocalStationDataReceiverStateDataShape"
                                    };
                                    
                                    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBLocalStationDataReceiverStateDataShape)
                                    var infoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                    
                                    // KBLocalStationDataReceiverStateDataShape entry object
                                    var newEntry = new Object();
                                    newEntry.Line = me.KBLocalLineThing; // STRING - isPrimaryKey = true
                                    newEntry.Station = me.name; // STRING - isPrimaryKey = true
                                    newEntry.Type = StatusType; // STRING - isPrimaryKey = true
                                    newEntry.Description = Comment; // STRING
                                    newEntry.Identifier = SubStatus; // STRING
                                    newEntry.ShortName = Status; // STRING - isPrimaryKey = true
                                    newEntry.DateTime = StatusTime; // DATETIME - isPrimaryKey = true
                                    
                                    infoTable.AddRow(newEntry);
                                    
                                    
                                    var params = {
                                    	stateInfoTable: infoTable /* INFOTABLE */
                                    };
                                    
                                    // result: BOOLEAN
                                    var result = me.SetState(params);
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetSingleMachineDataV1">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[

var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBLocalStationDataReceiverMachineDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBLocalStationDataReceiverMachineDataShape)
var infotable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

// KBADGMesKitRemoteThingMachineDataShape entry object
var newEntry = new Object();
newEntry.Line = me.KBLocalLineThing; // STRING [Primary Key]
newEntry.Station = me.name; // STRING [Primary Key]
newEntry.Value = MachineData; // STRING
newEntry.LowerLimit = MachineDataLSL; // STRING
newEntry.UpperLimit = MachineDataUSL; // STRING
newEntry.Description = Description; // STRING
newEntry.Identifier = Comment; // STRING
newEntry.DateTime = MachineDataTime; // DATETIME [Primary Key]
newEntry.ShortName = MachineDataType; // STRING [Primary Key]
newEntry.Unit = MachineDataUnit; // STRING
newEntry.Type = MachineDataType; // STRING [Primary Key]

infotable.AddRow(newEntry);

// result: BOOLEAN
var result = me.SetMachineData({
	machineDataInfoTable: infotable /* INFOTABLE */
});

                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetSinglePartDataV1">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[

var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBLocalStationDataReceiverPartDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBLocalStationDataReceiverPartDataShape)
var infotable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

// KBADGMesKitRemoteThingPartDataShape entry object
var newEntry = new Object();
newEntry.Line = me.KBLocalLineThing; // STRING [Primary Key]
newEntry.Station = me.name; // STRING [Primary Key]
newEntry.Value = PartData; // STRING
newEntry.LowerLimit = PartDataLSL; // STRING
newEntry.UpperLimit = PartDataUSL; // STRING
newEntry.Description = Description; // STRING
newEntry.Identifier = Comment; // STRING
newEntry.DateTime = PartDataTime; // DATETIME [Primary Key]
newEntry.ShortName = PartDataType; // STRING [Primary Key]
newEntry.Unit = PartDataUnit; // STRING
newEntry.Type = PartDataType; // STRING [Primary Key]
newEntry.SerialNumber = SerialNumber; // STRING
newEntry.TrackingNumber = TrackingNumber; // STRING
newEntry.OrderNumber = OrderNumber; // STRING
newEntry.PartNumber = PartNumber; // STRING


infotable.AddRow(newEntry);

// result: BOOLEAN
var result = me.SetPartData({
	partDataInfoTable: infotable /* INFOTABLE */
});

                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetSingleDynamicStateWithDate">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var params = {
                                    	infoTableName : "InfoTable",
                                    	dataShapeName : "KBLocalStationDataReceiverStateDataShape"
                                    };
                                    
                                    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBLocalStationDataReceiverStateDataShape)
                                    var infoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                    
                                        // dateValue:DATETIME
                                        var dateValue = ProductionDate;
                                        //dateValue.setMilliseconds(0);
                                    
                                    // KBLocalStationDataReceiverStateDataShape entry object
                                    var newEntry = new Object();
                                    newEntry.Line = me.KBLocalLineThing; // STRING - isPrimaryKey = true
                                    newEntry.Station = me.name; // STRING - isPrimaryKey = true
                                    newEntry.Type = "STATE"; // STRING - isPrimaryKey = true
                                    newEntry.Description = undefined; // STRING
                                    newEntry.Identifier = Status; // STRING
                                    newEntry.ShortName = EventName; // STRING - isPrimaryKey = true
                                    newEntry.DateTime = dateValue; // DATETIME - isPrimaryKey = true
                                    
                                    infoTable.AddRow(newEntry);
                                    
                                    
                                    var params = {
                                    	stateInfoTable: infoTable /* INFOTABLE */
                                    };
                                    
                                    // result: BOOLEAN
                                    var result = me.SetState(params);
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetSingleOkNokDecision">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    logger.debug("SetSingleOkNokDecision on " + me.name + ": OrderNumber = " + OrderNumber);
                                    logger.debug("SetSingleOkNokDecision on " + me.name + ": PartNumber = " + PartNumber);
                                    logger.debug("SetSingleOkNokDecision on " + me.name + ": SerialNumber = " + SerialNumber);
                                    logger.debug("SetSingleOkNokDecision on " + me.name + ": isPartOk = " + isPartOk);
                                    logger.debug("SetSingleOkNokDecision on " + me.name + ": DateTime = " + DateTime);
                                    
                                    
                                    
                                    var partOk = "0";
                                    
                                    try {
                                        if (isPartOk) {
                                            partOk = "1";
                                        }
                                    } catch(err) {
                                    	logger.debug("SetSingleOkNokDecision on " + me.name + ": error setting isPartOk");
                                    }
                                    
                                    logger.debug("SetSingleOkNokDecision on " + me.name + ": partOk = " + partOk);
                                    
                                    var params = {
                                    	infoTableName : "InfoTable",
                                    	dataShapeName : "KBADGMesKitRemoteThingPartDataShape"
                                    };
                                    
                                    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBADGMesKitRemoteThingPartDataShape)
                                    var infoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                    
                                    
                                    // KBADGMesKitRemoteThingPartDataShape entry object
                                    var newEntry = new Object();
                                    newEntry.Description = undefined; // STRING
                                    newEntry.PartNumber = PartNumber; // STRING
                                    newEntry.TrackingNumber = "NULL"; // STRING
                                    newEntry.OrderNumber = OrderNumber; // STRING
                                    newEntry.ShortName = "OK-NOK-Decision"; // STRING - isPrimaryKey = true
                                    newEntry.Unit = undefined; // STRING
                                    newEntry.UpperLimit = "1"; // STRING
                                    newEntry.DateTime = DateTime // DATETIME - isPrimaryKey = true
                                    newEntry.Line = me.KBLocalLineThing; // STRING - isPrimaryKey = true
                                    newEntry.Station = me.name; // STRING - isPrimaryKey = true
                                    newEntry.Type = "PARTDATA"; // STRING - isPrimaryKey = true
                                    newEntry.Identifier = "NULL"; // STRING
                                    newEntry.SerialNumber = SerialNumber; // STRING
                                    newEntry.Value = partOk; // STRING
                                    newEntry.LowerLimit = "0"; // STRING
                                    
                                    
                                    infoTable.AddRow(newEntry);
                                    
                                    
                                    
                                    var params = {
                                    	partDataInfoTable: infoTable /* INFOTABLE */
                                    };
                                    
                                    // result: BOOLEAN
                                    var result = me.SetPartData(params);
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetState">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    try {
                                    	
                                    	var dateValue = new Date();
                                    
                                    	if (me.BypassStateDataBuffer) {
                                            // result: BOOLEAN
                                            result = me.SetStateWithoutBuffer({
                                                stateInfoTable: stateInfoTable /* INFOTABLE */
                                            });
                                    
                                    //		Things["KBProcessDataReceiverProcessedFileRepositoryThing"].SaveJSON({
                                    //			path: "SetState\\"+dateValue.getTime()+me.name+".json" /* STRING */,
                                    //			content: stateInfoTable.ToJSON() /* JSON */
                                    //		});
                                    	} else {
                                    		
                                    		Things["KBProcessDataReceiverFileRepositoryThing"].SaveJSON({
                                    			path: "SetState\\"+dateValue.getTime()+me.name+".json" /* STRING */,
                                    			content: stateInfoTable.ToJSON() /* JSON */
                                    		});
                                    		
                                    		result = true;
                                    	}
                                    
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetStateForDevice">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = true;
                                    									
                                    try {
                                    	logger.debug("Start SetStateForDevice Service");
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetStateWithoutBuffer">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    logger.debug("SetStateWithoutBuffer: Start SetState Service");
                                    logger.debug("SetStateWithoutBuffer:  "+stateInfoTable.ToJSON());
                                    
                                    var tableLength = stateInfoTable.rows.length;
                                    var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();
                                    
                                    logger.debug("SetStateWithoutBuffer: Number of rows in Data Table: " + tableLength);
                                    
                                    for (var x = 0; x < tableLength; x++) {
                                    
                                    	logger.debug("SetStateWithoutBuffer: Executing line Start: " + x);
                                    	var doUpdate = false;
                                    	var updateId = 0;
                                    
                                    	me.Line = stateInfoTable.rows[x].Line;
                                        me.Station = stateInfoTable.rows[x].Station;
                                    	
                                    	logger.debug("SetStateWithoutBuffer: ShortName: " + stateInfoTable.rows[x].ShortName);
                                        if (stateInfoTable.rows[x].Description=="Manual Input"){
                                        	me.StopOIStatusAutomaticallyAfterXminutes=false;
                                        }
                                    	if (stateInfoTable.rows[x].Type == "Operator Screen" && stateInfoTable.rows[x].ShortName != "KBMaschStatus.1.Productive") {
                                            var params = {
                                                StatusType: "Operator Screen" /* STRING */,
                                                Machine: me.name /* STRING */
                                            };
                                    
                                    		try {
                                    	        // result: INFOTABLE dataShape: KBLastMachineStatusDataShape
                                    	        var lastStatus = Things[DB].GetLastMachineStatusFromDB(params);
                                                if (lastStatus.rows[0].Status == "KBMaschStatus.1.OI.AutoSet" && lastStatus.rows[0].SubStatus == "KBMaschStatus.2.OI.AutoSet.Start") {
                                                	doUpdate = true;
                                                	updateId = lastStatus.rows[0].Id;
                                                	stateInfoTable.rows[x].DateTime = dateAddSeconds(lastStatus.rows[0].StatusTime,1);
                                                }
                                    		} catch(err) {
                                    			logger.debug("SetStateWithoutBuffer: Warning: No provious state avaiable: " + err);
                                    		}
                                    	}
                                        var diff = dateDifference(me.MachineStateDate, stateInfoTable.rows[x].DateTime) ;
                                    	if (stateInfoTable.rows[x].Type == "Operator Screen" && diff < 0) {
                                    		logger.debug("SetStateWithoutBuffer: Type =  Operator Screen");
                                    	    //write it only if new date is later than old date!!!
                                    	    me.MachineState = stateInfoTable.rows[x].ShortName;
                                    	    me.MachineStateLevel2 = stateInfoTable.rows[x].Identifier;
                                    	    me.MachineStateDate = stateInfoTable.rows[x].DateTime;
                                    	}
                                    
                                    	var filter = new Object();
                                    	filter.ShortName = stateInfoTable.rows[x].ShortName;
                                    
                                    	logger.debug("SetStateWithoutBuffer: Filter: " + stateInfoTable.rows[x].ShortName);
                                    	
                                    	try {
                                    		me.MachineEvent.Delete(filter);
                                    		me.MachineEvent.AddRow(stateInfoTable.rows[x]);
                                    	} catch(err) {
                                    		logger.debug("Warning updating Thing property (but can be continued!): " + err);
                                    	}
                                    	
                                    	var description = stateInfoTable.rows[x].Description;
                                    	if (description==null || description==""){
                                    		description = "-";
                                    	}
                                    
                                    	logger.debug("SetStateWithoutBuffer: DB params: " + stateInfoTable.rows[x].ShortName);
                                    	logger.debug("SetStateWithoutBuffer: DB params: " + stateInfoTable.rows[x].Identifier);
                                    	logger.debug("SetStateWithoutBuffer: DB params: " + me.name);
                                    	logger.debug("SetStateWithoutBuffer: DB params: " + description);
                                    	logger.debug("SetStateWithoutBuffer: DB params: " + stateInfoTable.rows[x].Type);
                                    	logger.debug("SetStateWithoutBuffer: DB params: " + stateInfoTable.rows[x].DateTime);
                                    	
                                    	
                                    	if (doUpdate && updateId > 0) {
                                    		// result: NUMBER
                                    		logger.debug("SetStateWithoutBuffer: DB update start");
                                    		var result =  Things[DB].UpdateMachineStatusData({
                                    			NewStatus: stateInfoTable.rows[x].ShortName /* STRING */,
                                    			Id: updateId /* LONG */,
                                    			NewSubStatus: stateInfoTable.rows[x].Identifier /* STRING */
                                    		});
                                    		logger.debug("SetStateWithoutBuffer: DB update done");
                                    	} else {
                                    		//Database
                                    		var params = {
                                    			Status: stateInfoTable.rows[x].ShortName /* STRING */,
                                    			SubStatus: stateInfoTable.rows[x].Identifier /* STRING */,
                                    			Machine: me.name /* STRING */,
                                    			Description: description /* STRING */,
                                    			StatusType: stateInfoTable.rows[x].Type /* STRING */,
                                    			DateTime: stateInfoTable.rows[x].DateTime /* DATETIME */
                                    		};
                                    		
                                    		// result: NUMBER
                                    		logger.debug("SetStateWithoutBuffer: DB insert start");
                                    		Things[DB].AddMachineStatusToDataTable(params);
                                    		logger.debug("SetStateWithoutBuffer: DB insert done");
                                    	}
                                    	result = true;
                                    
                                    	var params = {
                                    		stateInfoTable: stateInfoTable /* INFOTABLE */
                                    	};
                                    	
                                    	// result: BOOLEAN
                                    	result = me.SetStateForDevice(params);
                                    	if (!result){
                                    		logger.warn("SetStateWithoutBuffer: SetStateForDevice was not successful");
                                    	}
                                    
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetTestBenchData">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    try {
                                    	
                                    	var dateValue = new Date();
                                    
                                    	if (me.BypassGenericTestBenchDataBuffer) {
                                    		// result: BOOLEAN
                                    		result = me.SetTestBenchDataWithoutBuffer({
                                    		    testBenchInfoTable: testBenchInfoTable /* INFOTABLE */
                                    		}); 		
                                    
                                    	} else {
                                    		
                                    		Things["KBProcessDataReceiverFileRepositoryThing"].SaveJSON({
                                    			path: "SetTestBenchData\\"+dateValue.getTime()+me.name+".json" /* STRING */,
                                    			content: testBenchInfoTable.ToJSON() /* JSON */
                                    		});
                                    		
                                    		result = true;
                                    	}
                                    
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetCVSAdgTestBenchData">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    try {
                                    	
                                    	var dateValue = new Date();
                                    
                                    	if (me.BypassGenericTestBenchDataBuffer) {
                                    		// result: BOOLEAN
                                    		result = me.SetCVSAdgTestBenchDataWithoutBuffer({
                                    		    testBenchInfoTable: testBenchInfoTable /* INFOTABLE */
                                    		}); 		
                                    
                                    	} else {
                                    		
                                    		Things["KBProcessDataReceiverFileRepositoryThing"].SaveJSON({
                                    			path: "SetCVSAdgTestBenchData\\"+dateValue.getTime()+me.name+".json" /* STRING */,
                                    			content: testBenchInfoTable.ToJSON() /* JSON */
                                    		});
                                    		
                                    		result = true;
                                    	}
                                    
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetTestBenchDataForDevice">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = true;
                                    									
                                    try {
                                    	logger.debug("Start SetTestBenchDataForDevice Service");
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetCVSAdgTestBenchDataForDevice">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = true;
                                    									
                                    try {
                                    	logger.debug("Start SetCVSAdgTestBenchDataForDevice Service");
                                    } catch(err) {
                                    	logger.error("Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetTestBenchDataWithoutBuffer">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    logger.debug("SetTestBenchDataWithoutBuffer: Start SetTestBenchData Service");
                                    logger.debug("SetTestBenchDataWithoutBuffer: " + testBenchInfoTable.ToJSON());
                                    
                                    var tableLength = testBenchInfoTable.rows.length;
                                    var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();
                                    
                                    logger.debug("SetTestBenchDataWithoutBuffer: Number of rows in Data Table: " + tableLength);
                                    
                                    
                                    try {
                                           var params = {
                                               JSON: testBenchInfoTable /* STRING */,
                                               Machine: me.name  /* STRING */
                                           };
                                           Things[DB].AddTestBenchDataJsonToDataTable(params);
                                    
                                    		var params = {
                                    			testBenchInfoTable: testBenchInfoTable /* INFOTABLE */
                                    		};
                                    		
                                    		// result: BOOLEAN
                                    		result = me.SetTestBenchDataForDevice(params);
                                    		if (!result){
                                    			logger.warn("SetTestBenchDataWithoutBuffer: SetTestBenchDataDevice was not successful");
                                    		}
                                    
                                    } catch(err) {
                                    	logger.error("SetTestBenchDataWithoutBuffer Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="SetCVSAdgTestBenchDataWithoutBuffer">
					<ConfigurationTables>
						<ConfigurationTable description="Script"
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = false;
                                    									
                                    logger.debug("SetCVSAdgTestBenchDataWithoutBuffer: Start SetCVSAdgTestBenchData Service");
                                    logger.debug("SetCVSAdgTestBenchDataWithoutBuffer: " + testBenchInfoTable.ToJSON());
                                    
                                    var tableLength = testBenchInfoTable.rows.length;
                                    var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();
                                    
                                    logger.debug("SetCVSAdgTestBenchDataWithoutBuffer: Number of rows in Data Table: " + tableLength);
                                    
                                    
                                    try {
                                           var params = {
                                               JSON: testBenchInfoTable /* STRING */,
                                               Machine: me.name  /* STRING */
                                           };
                                           Things[DB].AddCVSAdgTestBenchDataJsonToDataTable(params);
                                    
                                    		var params = {
                                    			testBenchInfoTable: testBenchInfoTable /* INFOTABLE */
                                    		};
                                    		
                                    		// result: BOOLEAN
                                    		result = me.SetCVSAdgTestBenchDataForDevice(params);
                                    		if (!result){
                                    			logger.warn("SetCVSAdgTestBenchDataWithoutBuffer: SetCVSAdgTestBenchDataDevice was not successful");
                                    		}
                                    
                                    } catch(err) {
                                    	logger.error("SetCVSAdgTestBenchDataWithoutBuffer Error: " + err);
                                    	result = false;
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation description=""
					handlerName="Script" name="UploadTestBenchPDF">
					<ConfigurationTables>
						<ConfigurationTable description=""
							isMultiRow="false" name="Script" ordinal="0">
							<DataShape>
								<FieldDefinitions>
									<FieldDefinition baseType="STRING"
										description="code" name="code" ordinal="0"></FieldDefinition>
								</FieldDefinitions>
							</DataShape>
							<Rows>
								<Row>
									<code>
                                    <![CDATA[
                                    var result = "NOK";
                                    
                                    try {
                                        if (ResultValue != "FAIL" && ResultValue != "PASS") {
                                            result = "NOK: ResultValue not like FAIL/PASS";
                                    		logger.warn(me.name + " UploadTestBenchPDF: Non valid Meta data: "+result+" "+ResultValue);
                                        }
                                        else if (ProtocolType != "ET I" && ProtocolType != "ET II" && ProtocolType != "ET III" && ProtocolType != "ET IV" && ProtocolType != "ET V" && ProtocolType != "ET VI") {
                                            result = "NOK: ProtocolType not like ET I/ET II/ET III/ET IV/ET V/ET VI";
                                    		logger.warn(me.name + " UploadTestBenchPDF: Non valid Meta data: "+result+" "+ProtocolType);
                                        }
                                        else if (MaterialNumber === "") {
                                            result = "NOK: MaterialNumber is empty";
                                    		logger.warn(me.name + " UploadTestBenchPDF: Non valid Meta data: "+result);
                                        }
                                        else if (NumberOfParts === "") {
                                            result = "NOK: NumberOfParts is empty";
                                    		logger.warn(me.name + " UploadTestBenchPDF: Non valid Meta data: "+result);
                                        }
                                        else {
                                            // file extension can be anything, not just .zip
                                            var dateValue = new Date();
                                            var filepath = "";
                                    
                                    		try {
                                    			if (ProtocolType == "ET II" && ResultValue == "PASS") { 
                                    				filepath = filepath + "$K03";
                                    			} 
                                    			else if (ProtocolType == "ET II" && ResultValue == "FAIL") { 
                                    				filepath = filepath + "$K04";
                                    			} 
                                    			else if (ProtocolType == "ET V" && ResultValue == "PASS") { 
                                    				filepath = filepath + "$K05";
                                    			} 
                                    			else if (ProtocolType == "ET V" && ResultValue == "FAIL") { 
                                    				filepath = filepath + "$K06";
                                    			} 
                                    			else if (ProtocolType == "ET I" && ResultValue == "PASS") {
                                    				filepath = filepath + "$K07";
                                    			} 
                                    			else if (ProtocolType == "ET I" && ResultValue == "FAIL") {
                                    				filepath = filepath + "$K08";
                                    			} 
                                    			else if (ProtocolType == "ET III" && ResultValue == "PASS") { 
                                    				filepath = filepath + "$K09";
                                    			} 
                                    			else if (ProtocolType == "ET III" && ResultValue == "FAIL") { 
                                    				filepath = filepath + "$K10";
                                    			} 
                                    			else if (ProtocolType == "ET IV" && ResultValue == "PASS") { 
                                    				filepath = filepath + "$K11";
                                    			} 
                                    			else if (ProtocolType == "ET IV" && ResultValue == "FAIL") { 
                                    				filepath = filepath + "$K12";
                                    			} 
                                    			else if (ProtocolType == "ET VI") {
                                    				filepath = filepath + "$K13";
                                    			} 
                                    			
                                    			filepath = filepath + "$11"+MaterialNumber;
                                    			filepath = filepath + "$12"+SerialNumber;
                                    			filepath = filepath + "$13"+ProductionOrderNumber;
                                    			filepath = filepath + "$14"+ProductionDateTime.getFullYear();
                                    			var month = ProductionDateTime.getMonth() + 1; 
                                    			if (month < 10) {
                                    				filepath = filepath + "0" + month;
                                    			} else {
                                    				filepath = filepath + month;
                                    			}
                                    			if (ProductionDateTime.getDate() < 10) {
                                    				filepath = filepath + "0" + ProductionDateTime.getDate();
                                    			} else {
                                    				filepath = filepath + ProductionDateTime.getDate();
                                    			}
                                    			filepath = filepath + "$15"+SerialNumber;
                                    			filepath = filepath + "$91"+dateValue.getFullYear();
                                    			month = dateValue.getMonth() + 1; 
                                    			if (month < 10) {
                                    				filepath = filepath + "0" + month;
                                    			} else {
                                    				filepath = filepath + month;
                                    			}
                                    			if (dateValue.getDate() < 10) {
                                    				filepath = filepath + "0" + dateValue.getDate();
                                    			} else {
                                    				filepath = filepath + dateValue.getDate();
                                    			}
                                    			filepath = filepath + "$92";
                                    			if (dateValue.getHours() < 10) {
                                    				filepath = filepath + "0" + dateValue.getHours();
                                    			} else {
                                    				filepath = filepath + dateValue.getHours();
                                    			}
                                    			if (dateValue.getMinutes() < 10) {
                                    				filepath = filepath + "0" + dateValue.getMinutes();
                                    			} else {
                                    				filepath = filepath + dateValue.getMinutes();
                                    			}
                                    			if (dateValue.getSeconds() < 10) {
                                    				filepath = filepath + "0" + dateValue.getSeconds();
                                    			} else {
                                    				filepath = filepath + dateValue.getSeconds();
                                    			}
                                    
                                    			filepath = "/"+filepath.replace(/[*?,;":<>|\\\/]/g,"__p__");
                                    
                                    			logger.debug("UploadTestBenchPDF "+me.name + "  File name: "+filepath+".pdf");
                                    	        var params = {
                                    	              path: filepath+".pdf" /* STRING */,
                                    	              content: PDF /* BLOB */
                                    	        };
                                    	        // no return
                                    	        Things["KBTestBenchFileRepository"].SaveBinary(params);
                                    
                                    		} catch(err) {
                                    			logger.error("UploadTestBenchPDF " + me.name 
                                    				+ ", Filepath: " + filepath 
                                    				+ ", MaterialNumber: " + MaterialNumber 
                                    				+ ", NumberOfParts: " + NumberOfParts 
                                    				+ ", ProductionDateTime: " + ProductionDateTime 
                                    				+ ", ProductionOrderNumber: " + ProductionOrderNumber 
                                    				+ ", ProtocolType: " + ProtocolType 
                                    				+ ", ResultValue: " + ResultValue 
                                    				+ ", SerialNumber: " + SerialNumber 
                                    				+ ", Error: "+err);
                                    			
                                    			filepath = "/"+Resources["KBThingWorxServerSystem"].GetHostName()+dateValue.getTime()+"ErrorFileWriting";
                                    	        var params = {
                                    	              path: filepath+".pdf" /* STRING */,
                                    	              content: PDF /* BLOB */
                                    	        };
                                    	        // no return
                                    	        Things["KBTestBenchFileRepository"].SaveBinary(params);
                                    		}
                                    
                                    
                                            
                                            var XMLString = "<KBTestBenchFileRepository>"
                                                                    +"<MatNr>"+MaterialNumber.replace(/[&]/g,"&amp;").replace(/[<]/g,"&lt;").replace(/[>]/g,"&gt;").replace(/["]/g,"&quot;").replace(/[']/g,"&apos;")+"</MatNr>"
                                                                    +"<NumberOfParts>"+NumberOfParts.replace(/[&]/g,"&amp;").replace(/[<]/g,"&lt;").replace(/[>]/g,"&gt;").replace(/["]/g,"&quot;").replace(/[']/g,"&apos;")+"</NumberOfParts>"
                                                                    +"<SerialNr>"+SerialNumber.replace(/[&]/g,"&amp;").replace(/[<]/g,"&lt;").replace(/[>]/g,"&gt;").replace(/["]/g,"&quot;").replace(/[']/g,"&apos;")+"</SerialNr>"
                                                                    +"<ProductionDateTime>"+ProductionDateTime.getTime()+"</ProductionDateTime>"
                                                                    +"<OrderNr>"+ProductionOrderNumber.replace(/[&]/g,"&amp;").replace(/[<]/g,"&lt;").replace(/[>]/g,"&gt;").replace(/["]/g,"&quot;").replace(/[']/g,"&apos;")+"</OrderNr>"
                                                                    +"<ProtocolType>"+ProtocolType+"</ProtocolType>"
                                                                    +"<Result>"+ResultValue+"</Result>"
                                                              +"</KBTestBenchFileRepository>";
                                    
                                            var XML = new XML(XMLString);
                                    
                                             Things["KBTestBenchFileRepository"].SaveXML({
                                                path: filepath+".xml" /* STRING */,
                                                content: XML /* XML */
                                            });
                                    
                                    
                                    		var params = {
                                    		    infoTableName : "InfoTable",
                                    		    dataShapeName : "KBGenericTestBenchInputDataShape"
                                    		};
                                    		
                                    		// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBGenericTestBenchInputDataShape)
                                    		var testBenchInputData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                    		
                                    		
                                    		// KBGenericTestBenchInputDataShape entry object
                                    		var newEntry = new Object();
                                    		newEntry.ProductionDateTime = ProductionDateTime; // DATETIME [Primary Key]
                                    		newEntry.isProcessDataBlob = true; // BOOLEAN
                                    		newEntry.isProcessDataFloat = false; // BOOLEAN
                                    		newEntry.isProcessDataDateTime = false; // BOOLEAN
                                    		newEntry.PartNumber = MaterialNumber; // STRING
                                    		newEntry.SerialNumber = SerialNumber; // STRING
                                    		newEntry.OrderNumber = ProductionOrderNumber; // STRING
                                    		newEntry.ProcessDataType = "PDF"; // STRING [Primary Key]
                                    		newEntry.ProcessDataType2 = "TestBenchData"; // STRING
                                    		newEntry.Identifier = "NULL"; // STRING [Primary Key]
                                    		newEntry.TrackingNumber = "NULL"; // STRING [Primary Key]
                                    		newEntry.Description = "Base64 encoded PDF"; // STRING
                                    		newEntry.ProcessDataBlob = PDF; // STRING
                                    		
                                    		testBenchInputData.AddRow(newEntry);
                                    
                                    		var newEntry = new Object();
                                    		newEntry.ProductionDateTime = ProductionDateTime; // DATETIME [Primary Key]
                                    		newEntry.isProcessDataString = true; // BOOLEAN
                                    		newEntry.isProcessDataFloat = false; // BOOLEAN
                                    		newEntry.isProcessDataDateTime = false; // BOOLEAN
                                    		newEntry.PartNumber = MaterialNumber; // STRING
                                    		newEntry.SerialNumber = SerialNumber; // STRING
                                    		newEntry.OrderNumber = ProductionOrderNumber; // STRING
                                    		newEntry.ProcessDataType = "ProtocolType"; // STRING [Primary Key]
                                    		newEntry.ProcessDataType2 = "TestBenchData"; // STRING
                                    		newEntry.Identifier = "NULL"; // STRING [Primary Key]
                                    		newEntry.TrackingNumber = "NULL"; // STRING [Primary Key]
                                    		newEntry.ProcessDataString = ProtocolType; // STRING
                                    		
                                    		testBenchInputData.AddRow(newEntry);
                                    
                                    		var newEntry = new Object();
                                    		newEntry.ProductionDateTime = ProductionDateTime; // DATETIME [Primary Key]
                                    		newEntry.isProcessDataString = true; // BOOLEAN
                                    		newEntry.isProcessDataFloat = false; // BOOLEAN
                                    		newEntry.isProcessDataDateTime = false; // BOOLEAN
                                    		newEntry.PartNumber = MaterialNumber; // STRING
                                    		newEntry.SerialNumber = SerialNumber; // STRING
                                    		newEntry.OrderNumber = ProductionOrderNumber; // STRING
                                    		newEntry.ProcessDataType = "OveralltestResult"; // STRING [Primary Key]
                                    		newEntry.ProcessDataType2 = "OverallTestResult"; // STRING
                                    		newEntry.Identifier = "NULL"; // STRING [Primary Key]
                                    		newEntry.TrackingNumber = "NULL"; // STRING [Primary Key]
                                    		newEntry.ProcessDataString = ResultValue; // STRING
                                    		
                                    		testBenchInputData.AddRow(newEntry);
                                    		
                                    		var newEntry = new Object();
                                    		newEntry.ProductionDateTime = ProductionDateTime; // DATETIME [Primary Key]
                                    		newEntry.isProcessDataString = true; // BOOLEAN
                                    		newEntry.isProcessDataFloat = false; // BOOLEAN
                                    		newEntry.isProcessDataDateTime = false; // BOOLEAN
                                    		newEntry.PartNumber = MaterialNumber; // STRING
                                    		newEntry.SerialNumber = SerialNumber; // STRING
                                    		newEntry.OrderNumber = ProductionOrderNumber; // STRING
                                    		newEntry.ProcessDataType = "XML"; // STRING [Primary Key]
                                    		newEntry.ProcessDataType2 = "PDF Meta Data"; // STRING
                                    		newEntry.Identifier = "NULL"; // STRING [Primary Key]
                                    		newEntry.TrackingNumber = "NULL"; // STRING [Primary Key]
                                    		newEntry.ProcessDataString = XMLString; // STRING
                                    		
                                    		testBenchInputData.AddRow(newEntry);
                                    		
                                    		var newEntry = new Object();
                                    		newEntry.ProductionDateTime = ProductionDateTime; // DATETIME [Primary Key]
                                    		newEntry.isProcessDataString = false; // BOOLEAN
                                    		newEntry.isProcessDataFloat = true; // BOOLEAN
                                    		newEntry.isProcessDataDateTime = false; // BOOLEAN
                                    		newEntry.PartNumber = MaterialNumber; // STRING
                                    		newEntry.SerialNumber = SerialNumber; // STRING
                                    		newEntry.OrderNumber = ProductionOrderNumber; // STRING
                                    		newEntry.ProcessDataType = "NumberOfParts"; // STRING [Primary Key]
                                    		newEntry.ProcessDataType2 = "TestBenchData"; // STRING
                                    		newEntry.Identifier = "NULL"; // STRING [Primary Key]
                                    		newEntry.TrackingNumber = "NULL"; // STRING [Primary Key]
                                    		newEntry.Unit = "Parts"; // STRING
                                    		newEntry.ProcessDataFloat = NumberOfParts; // NUMBER
                                    		
                                    		testBenchInputData.AddRow(newEntry);
                                    
                                    		logger.debug(me.name + " UploadTestBenchPDF: " + testBenchInputData.ToJSON());
                                    		
                                    		
                                    		// result: BOOLEAN
                                    		if (!me.SetTestBenchData({
                                    			testBenchInfoTable: testBenchInputData /* INFOTABLE */
                                    		})) {
                                    			logger.error(me.name + " UploadTestBenchPDF: Unable to store uploaded PDF to DB");
                                    		}
                                    		
                                            Things["KBsapConfigConnectorThing"].MoveFileToSAP({fileName: filepath+".pdf"});
                                            result = "OK";
                                        }
                                    } catch(err) {
                                    	result = "NOK: "+err;
                                    	logger.error(me.name + " UploadTestBenchPDF: Error to store uploaded PDF: " +err);
                                    }
                                    ]]>
									</code>
								</Row>
							</Rows>
						</ConfigurationTable>
					</ConfigurationTables>
				</ServiceImplementation>
				<ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetIsBlockingInputMaskWithPMMT">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        me.isBlockingInputMaskWithPMMT=Input;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SetIsMTOnsite">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        me.IsMTOnsite=Input;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
			</ServiceImplementations>
			<Subscriptions></Subscriptions>
			<avatar></avatar>
			<DesignTimePermissions>
				<Create></Create>
				<Read>
				 <Principal
                     isPermitted="true"
                     name="KBMesKitHelperUser"
                     type="User"></Principal>
				</Read>
				<Update></Update>
				<Delete></Delete>
				<Metadata></Metadata>
			</DesignTimePermissions>
			<RunTimePermissions>
				<Permissions resourceName="*">
					<PropertyRead>
						<Principal isPermitted="true" name="KBMesKitHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true" name="KBOGSHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true"
							name="KBTestBenchFileRepositoryUser" type="User"></Principal>
						<Principal isPermitted="true" name="KBUserGroup"
							type="Group"></Principal>
					</PropertyRead>
					<PropertyWrite></PropertyWrite>
					<ServiceInvoke>
						<Principal isPermitted="true" name="KBMesKitHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true" name="KBOGSHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true"
							name="KBTestBenchFileRepositoryUser" type="User"></Principal>
						<Principal isPermitted="true" name="KBUserGroup"
							type="Group"></Principal>
					</ServiceInvoke>
					<EventInvoke></EventInvoke>
					<EventSubscribe></EventSubscribe>
				</Permissions>
			</RunTimePermissions>
			<VisibilityPermissions>
				<Visibility>
					<Principal isPermitted="true" name="KBBackGroundWorker"
						type="Organization"></Principal>
					<Principal isPermitted="true" name="KBOrganization"
						type="Organization"></Principal>
				</Visibility>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions></ConfigurationTableDefinitions>
			<ConfigurationTables></ConfigurationTables>
			<PropertyBindings></PropertyBindings>
			<RemotePropertyBindings></RemotePropertyBindings>
			<RemoteServiceBindings></RemoteServiceBindings>
			<RemoteEventBindings></RemoteEventBindings>
			<AlertConfigurations>
				<AlertDefinitions name="Line"></AlertDefinitions>
				<AlertDefinitions name="MachineData"></AlertDefinitions>
				<AlertDefinitions name="PartData"></AlertDefinitions>
				<AlertDefinitions name="Station"></AlertDefinitions>
			</AlertConfigurations>
			<InstanceRunTimePermissions>
				<Permissions resourceName="*">
					<PropertyRead>
						<Principal isPermitted="true" name="KBMesKitHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true" name="KBOGSHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true"
							name="KBTestBenchFileRepositoryUser" type="User"></Principal>
						<Principal isPermitted="true" name="KBUserGroup"
							type="Group"></Principal>
					</PropertyRead>
					<PropertyWrite></PropertyWrite>
					<ServiceInvoke>
						<Principal isPermitted="true" name="KBMesKitHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true" name="KBOGSHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true"
							name="KBTestBenchFileRepositoryUser" type="User"></Principal>
						<Principal isPermitted="true" name="KBUserGroup"
							type="Group"></Principal>
					</ServiceInvoke>
					<EventInvoke></EventInvoke>
					<EventSubscribe></EventSubscribe>
				</Permissions>
			</InstanceRunTimePermissions>
		</ThingShape>
	</ThingShapes>
</Entities>
