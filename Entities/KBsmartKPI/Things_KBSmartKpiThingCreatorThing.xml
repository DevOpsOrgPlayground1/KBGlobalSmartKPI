<?xml version="1.0" encoding="UTF-8"?>
<Entities build="b2319" majorVersion="8" minorVersion="4"
	modelPersistenceProviderPackage="MssqlPersistenceProviderPackage"
	revision="4" schemaVersion="1041" universal="password">
	<Things>
		<Thing description="" documentationContent=""
			effectiveThingPackage="ConfiguredThing" enabled="true" homeMashup=""
			identifier="" lastModifiedDate="2020-09-15T04:45:31.539+02:00"
			name="KBSmartKpiThingCreatorThing" projectName="KBsmartKPI"
			published="false"
			tags="KBThingWorxInstallationVocabulary:ExtensionSmartKPI"
			thingTemplate="GenericThing" valueStream="">
			<avatar></avatar>
			<DesignTimePermissions>
				<Create></Create>
				<Read>
					<Principal isPermitted="true" name="KBMesKitHelperUser"
						type="User"></Principal>
				</Read>
				<Update></Update>
				<Delete></Delete>
				<Metadata></Metadata>
			</DesignTimePermissions>
			<RunTimePermissions>
				<Permissions resourceName="*">
					<PropertyRead>
						<Principal isPermitted="true"
							name="KBLocalAdministrators" type="Group"></Principal>
						<Principal isPermitted="true" name="KBMesKitHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true" name="KBUserGroup"
							type="Group"></Principal>
					</PropertyRead>
					<PropertyWrite>
						<Principal isPermitted="true"
							name="KBLocalAdministrators" type="Group"></Principal>
						<Principal isPermitted="true" name="KBMesKitHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true" name="KBUserGroup"
							type="Group"></Principal>
					</PropertyWrite>
					<ServiceInvoke>
						<Principal isPermitted="true"
							name="KBLocalAdministrators" type="Group"></Principal>
						<Principal isPermitted="true" name="KBMesKitHelperUser"
							type="User"></Principal>
						<Principal isPermitted="true" name="KBUserGroup"
							type="Group"></Principal>
					</ServiceInvoke>
					<EventInvoke>
						<Principal isPermitted="true"
							name="KBLocalAdministrators" type="Group"></Principal>
						<Principal isPermitted="true" name="KBMesKitHelperUser"
							type="User"></Principal>
					</EventInvoke>
					<EventSubscribe>
						<Principal isPermitted="true"
							name="KBLocalAdministrators" type="Group"></Principal>
						<Principal isPermitted="true" name="KBMesKitHelperUser"
							type="User"></Principal>
					</EventSubscribe>
				</Permissions>
			</RunTimePermissions>
			<VisibilityPermissions>
				<Visibility>
					<Principal isPermitted="true" name="KBBackGroundWorker"
						type="Organization"></Principal>
					<Principal isPermitted="true" name="KBOrganization"
						type="Organization"></Principal>
				</Visibility>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions></ConfigurationTableDefinitions>
			<ConfigurationTables></ConfigurationTables>
			<ThingShape>
				<PropertyDefinitions></PropertyDefinitions>
				<ServiceDefinitions>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="addMachineToArea">
						<ResultType aspect.dataShape="KBAreaMachineDataShape"
							baseType="NOTHING" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="areaThingName" ordinal="3"></FieldDefinition>
							<FieldDefinition
								aspect.thingTemplate="KBLocalMachineThingTemplate"
								baseType="THINGNAME" description="" name="newMachine"
								ordinal="2"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="Autostart">
						<ResultType baseType="NOTHING" description=""
							name="result" ordinal="0"></ResultType>
						<ParameterDefinitions></ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="copyAreaMachines4Select">
						<ResultType aspect.dataShape="KBAreaMachineDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition
								aspect.dataShape="KBAreaMachineDataShape" baseType="INFOTABLE"
								description="" name="KBMachineThings" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalArea">
						<ResultType
							aspect.dataShape="KBThingCreatorResponseDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="AreaName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalCompany">
						<ResultType
							aspect.dataShape="KBThingCreatorResponseDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="CompanyName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalCountry">
						<ResultType
							aspect.dataShape="KBThingCreatorResponseDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="CountryName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalDivision">
						<ResultType
							aspect.dataShape="KBThingCreatorResponseDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="DivisionName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalExternalDB">
						<ResultType baseType="NOTHING" description=""
							name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="Description" ordinal="2"></FieldDefinition>
							<FieldDefinition aspect.isRequired="true"
								baseType="STRING" description="" name="ThingName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalMachineOrLine">
						<ResultType
							aspect.dataShape="KBThingCreatorResponseDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="true"
								baseType="STRING" description="" name="MachineOrLineName"
								ordinal="2"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalMesKitStation">
						<ResultType
							aspect.dataShape="KBThingCreatorResponseDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="true"
								baseType="STRING" description="" name="HostName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalPlant">
						<ResultType
							aspect.dataShape="KBThingCreatorResponseDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="PlantName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalRegion">
						<ResultType
							aspect.dataShape="KBThingCreatorResponseDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="RegionName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalStation">
						<ResultType
							aspect.dataShape="KBThingCreatorResponseDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="StationName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="CreateLocalStationWithLineAssignment">
						<ResultType
							aspect.dataShape="KBThingCreatorResponseDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="true"
								aspect.thingTemplate="KBLocalMachineThingTemplate"
								baseType="THINGNAME" description="" name="LineThingName"
								ordinal="2"></FieldDefinition>
							<FieldDefinition baseType="STRING" description=""
								name="StationName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="createNewOrgUnitThing">
						<ResultType baseType="NOTHING" description=""
							name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="midName" ordinal="4"></FieldDefinition>
							<FieldDefinition baseType="STRING" description=""
								name="thingType" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="getAreaEntitiesWithMachineNum">
						<ResultType
							aspect.dataShape="KBOrgAreaWithMacNoDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions></ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="getKBorg">
						<ResultType aspect.dataShape="KBOrgDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="thingName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="getKBorgTryCatch">
						<ResultType aspect.dataShape="KBOrgDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="thingName" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="getNewThingTypeList">
						<ResultType aspect.dataShape="KBOrgThingType"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions></ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="getTabDataFromTree">
						<ResultType aspect.dataShape="KBOrg9TabInfoDataShape"
							baseType="INFOTABLE" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition
								aspect.dataShape="KBOrgDataShape" baseType="INFOTABLE"
								description="" name="treeRow" ordinal="1"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category=""
						description="get thing sequence id by thing name from thing list"
						isAllowOverride="false" isLocalOnly="false" isOpen="false"
						isPrivate="false" name="getThingSeqIdByNameFromList">
						<ResultType baseType="INTEGER" description=""
							name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="INFOTABLE"
								description="" name="thingList" ordinal="1"></FieldDefinition>
							<FieldDefinition baseType="STRING" description=""
								name="thingName" ordinal="2"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="InstallsmartProductionConfigurationTileConsole">
						<ResultType baseType="NOTHING" description=""
							name="result" ordinal="0"></ResultType>
						<ParameterDefinitions></ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="1 = not fully combined"
						isAllowOverride="false" isLocalOnly="false" isOpen="false"
						isPrivate="false" name="isThingNotFullyCombined">
						<ResultType baseType="INTEGER" description=""
							name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING" description=""
								name="thingName" ordinal="1"></FieldDefinition>
							<FieldDefinition baseType="STRING" description=""
								name="thingType" ordinal="2"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
						category="" description="" isAllowOverride="false"
						isLocalOnly="false" isOpen="false" isPrivate="false"
						name="removeMachineFromArea">
						<ResultType aspect.dataShape="KBAreaMachineDataShape"
							baseType="NOTHING" description="" name="result" ordinal="0"></ResultType>
						<ParameterDefinitions>
							<FieldDefinition baseType="TEXT" description=""
								name="areaThingName" ordinal="1"></FieldDefinition>
							<FieldDefinition baseType="THINGNAME"
								description="" name="machine1" ordinal="2"></FieldDefinition>
						</ParameterDefinitions>
					</ServiceDefinition>
				</ServiceDefinitions>
				<EventDefinitions></EventDefinitions>
				<ServiceMappings></ServiceMappings>
				<ServiceImplementations>
					<ServiceImplementation description=""
						handlerName="Script" name="addMachineToArea">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBAreaMachineDataShape"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var tempList = Things[areaThingName].KBMachineThings;
                                        var cc = 0;
                                        cc = tempList.getRowCount();
                                        if(cc > 0) outputTable = tempList;
                                        
                                        logger.debug("addMachineToArea, currentMachineList="+tempList.ToJSON());
                                        logger.debug("addMachineToArea, outputTable="+outputTable.ToJSON());
                                        logger.debug("addMachineToArea, newMachine="+newMachine);
                                        
                                        //var params = {
                                        //	t1: currentMachineList /* INFOTABLE */
                                        //};
                                        //var outputTable = Resources["InfoTableFunctions"].Clone(params);
                                        
                                        outputTable.AddRow({KBMachineThing:newMachine});
                                        logger.debug("addMachineToArea, outputTable="+outputTable.ToJSON());
                                        Things[areaThingName].KBMachineThings = outputTable;
                                        //var result = outputTable;
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="Autostart">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        me.InstallsmartProductionConfigurationTileConsole();
                                        
                                        // result: STRING
                                        var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();
                                        
                                        
                                        //******************************************************************************************
                                        // All local systems
                                        //******************************************************************************************
                                        
                                        if (location != "MUC") {
                                            //Create Local DB Things
                                        
                                            var params = {
                                                ThingName: "KBKPILocalThingWorxDatabaseThing" /* STRING */,
                                                Description: "Auto-Created Local Database connectivity for external DB" /* STRING */
                                            };
                                        
                                            //me.CreateLocalExternalDB(params);
                                        
                                        }
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="copyAreaMachines4Select">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        /*
                                        var outputTable = KBMachineThings;
                                        var sort = new Object();
                                        sort.name = "KBMachineThing";
                                        sort.ascending = true;
                                        outputTable.Sort(sort);
                                        
                                        var result = outputTable;
                                        */
                                        
                                        var result = KBMachineThings;
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalArea">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var level = "Area";	
                                        var levelname = AreaName;									
                                        										
                                        										
                                        // result: STRING
                                        var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();
                                        
                                        var deviceThingName = "KB" + location + levelname +level+"Thing";
                                        var valueStreamThingName = "KB" + location + levelname+level+"ValueStream";
                                        
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBThingCreatorResponseDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBThingCreatorResponseDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var params = {
                                        	thingName: deviceThingName /* STRING */
                                        };
                                        
                                        // result: BOOLEAN
                                        if (!Resources["PTC.Factory.CommonUtilities"].DoesThingExists(params)) {
                                        
                                            // KBThingCreatorResponseDataShape entry object
                                            var newEntry = new Object();
                                        
                                            try {
                                        
                                        
                                                var params = {
                                                    name: valueStreamThingName /* STRING */,
                                                    description: "Value Stream for " + deviceThingName /* STRING */,
                                                    thingTemplateName: "ValueStream" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[valueStreamThingName].EnableThing();
                                                Things[valueStreamThingName].RestartThing();
                                        
                                        
                                                
                                                var params = {
                                                    name: deviceThingName /* STRING */,
                                                    description: "Auto-Created "+level /* STRING */,
                                                    thingTemplateName: "KBLocal"+level+"ThingTemplate" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[deviceThingName].EnableThing();
                                                Things[deviceThingName].RestartThing();
                                                
                                                Resources["EntityServices"].AddShapeToThing({
                                                	name: deviceThingName /* THINGNAME */,
                                                	thingShapeName: "KBLocal"+level+"SmartKPIShape" /* THINGSHAPENAME */
                                                });
                                                
                                                var params = {
                                                    name: valueStreamThingName /* THINGNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetValueStream(params);
                                                
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetProjectName(params);
                                        
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[valueStreamThingName].SetProjectName(params);
                                                
                                                
                                                
                                                var params = { principal: "KBDevelopment", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBOrganization", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBBackGroundWorker", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, type: "Read", principalType: "User" };
                                        		Things[deviceThingName].AddDesignTimePermission(params);
                                        		var params = { principal: "KBUserGroup", allow: true, resource: "*", type: "PropertyRead", principalType: "Group" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "PropertyRead", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                                
                                                newEntry.Text = deviceThingName; // STRING
                                                newEntry.Id = 0; // INTEGER
                                                Things[deviceThingName].RestartThing();
                                            } catch(err) {
                                                newEntry.Text = err; // STRING
                                                newEntry.Id = 9; // INTEGER
                                            }
                                            newEntry.Name = deviceThingName;
                                            result.AddRow(newEntry);
                                        
                                        
                                        } else {
                                        // KBThingCreatorResponseDataShape entry object
                                        var newEntry = new Object();
                                        newEntry.Text = "Device already exists: " + deviceThingName; // STRING
                                        newEntry.Id = 1; // INTEGER
                                        newEntry.Name = deviceThingName;
                                        result.AddRow(newEntry);
                                        }
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalCompany">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var level = "Company";	
                                        var levelname = CompanyName;									
                                        										
                                        										
                                        // result: STRING
                                        var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();
                                        
                                        var deviceThingName = "KB" + location + levelname +level+"Thing";
                                        var valueStreamThingName = "KB" + location + levelname+level+"ValueStream";
                                        
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBThingCreatorResponseDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBThingCreatorResponseDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var params = {
                                        	thingName: deviceThingName /* STRING */
                                        };
                                        
                                        // result: BOOLEAN
                                        if (!Resources["PTC.Factory.CommonUtilities"].DoesThingExists(params)) {
                                        
                                            // KBThingCreatorResponseDataShape entry object
                                            var newEntry = new Object();
                                        
                                            try {
                                        
                                        
                                                var params = {
                                                    name: valueStreamThingName /* STRING */,
                                                    description: "Value Stream for " + deviceThingName /* STRING */,
                                                    thingTemplateName: "ValueStream" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[valueStreamThingName].EnableThing();
                                                Things[valueStreamThingName].RestartThing();
                                        
                                        
                                                
                                                var params = {
                                                    name: deviceThingName /* STRING */,
                                                    description: "Auto-Created "+level /* STRING */,
                                                    thingTemplateName: "KBLocal"+level+"ThingTemplate" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[deviceThingName].EnableThing();
                                                Things[deviceThingName].RestartThing();
                                                
                                                Resources["EntityServices"].AddShapeToThing({
                                                	name: deviceThingName /* THINGNAME */,
                                                	thingShapeName: "KBLocal"+level+"SmartKPIShape" /* THINGSHAPENAME */
                                                });
                                                
                                                var params = {
                                                    name: valueStreamThingName /* THINGNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetValueStream(params);
                                                
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetProjectName(params);
                                        
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[valueStreamThingName].SetProjectName(params);
                                                
                                                
                                                
                                                var params = { principal: "KBDevelopment", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBOrganization", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBBackGroundWorker", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, type: "Read", principalType: "User" };
                                        		Things[deviceThingName].AddDesignTimePermission(params);
                                        		var params = { principal: "KBUserGroup", allow: true, resource: "*", type: "PropertyRead", principalType: "Group" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "PropertyRead", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                                
                                                newEntry.Text = deviceThingName; // STRING
                                                newEntry.Id = 0; // INTEGER
                                                Things[deviceThingName].RestartThing();
                                            } catch(err) {
                                                newEntry.Text = err; // STRING
                                                newEntry.Id = 9; // INTEGER
                                            }
                                            newEntry.Name = deviceThingName;
                                            result.AddRow(newEntry);
                                        
                                        
                                        } else {
                                        // KBThingCreatorResponseDataShape entry object
                                        var newEntry = new Object();
                                        newEntry.Text = "Device already exists: " + deviceThingName; // STRING
                                        newEntry.Id = 1; // INTEGER
                                        newEntry.Name = deviceThingName;
                                        result.AddRow(newEntry);
                                        }
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalCountry">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var level = "Country";	
                                        var levelname = CountryName;									
                                        										
                                        										
                                        // result: STRING
                                        var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();
                                        
                                        var deviceThingName = "KB" + location + levelname +level+"Thing";
                                        var valueStreamThingName = "KB" + location + levelname+level+"ValueStream";
                                        
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBThingCreatorResponseDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBThingCreatorResponseDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var params = {
                                        	thingName: deviceThingName /* STRING */
                                        };
                                        
                                        // result: BOOLEAN
                                        if (!Resources["PTC.Factory.CommonUtilities"].DoesThingExists(params)) {
                                        
                                            // KBThingCreatorResponseDataShape entry object
                                            var newEntry = new Object();
                                        
                                            try {
                                        
                                        
                                                var params = {
                                                    name: valueStreamThingName /* STRING */,
                                                    description: "Value Stream for " + deviceThingName /* STRING */,
                                                    thingTemplateName: "ValueStream" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[valueStreamThingName].EnableThing();
                                                Things[valueStreamThingName].RestartThing();
                                        
                                        
                                                
                                                var params = {
                                                    name: deviceThingName /* STRING */,
                                                    description: "Auto-Created "+level /* STRING */,
                                                    thingTemplateName: "KBLocal"+level+"ThingTemplate" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[deviceThingName].EnableThing();
                                                Things[deviceThingName].RestartThing();
                                                
                                                Resources["EntityServices"].AddShapeToThing({
                                                	name: deviceThingName /* THINGNAME */,
                                                	thingShapeName: "KBLocal"+level+"SmartKPIShape" /* THINGSHAPENAME */
                                                });
                                                
                                                var params = {
                                                    name: valueStreamThingName /* THINGNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetValueStream(params);
                                                
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetProjectName(params);
                                        
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[valueStreamThingName].SetProjectName(params);
                                                
                                                
                                                
                                                var params = { principal: "KBDevelopment", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBOrganization", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBBackGroundWorker", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, type: "Read", principalType: "User" };
                                        		Things[deviceThingName].AddDesignTimePermission(params);
                                        		var params = { principal: "KBUserGroup", allow: true, resource: "*", type: "PropertyRead", principalType: "Group" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "PropertyRead", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                                
                                                newEntry.Text = deviceThingName; // STRING
                                                newEntry.Id = 0; // INTEGER
                                                Things[deviceThingName].RestartThing();
                                            } catch(err) {
                                                newEntry.Text = err; // STRING
                                                newEntry.Id = 9; // INTEGER
                                            }
                                            newEntry.Name = deviceThingName;
                                            result.AddRow(newEntry);
                                        
                                        
                                        } else {
                                        // KBThingCreatorResponseDataShape entry object
                                        var newEntry = new Object();
                                        newEntry.Text = "Device already exists: " + deviceThingName; // STRING
                                        newEntry.Id = 1; // INTEGER
                                        newEntry.Name = deviceThingName;
                                        result.AddRow(newEntry);
                                        }
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalDivision">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var level = "Division";	
                                        var levelname = DivisionName;									
                                        										
                                        										
                                        // result: STRING
                                        var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();
                                        
                                        var deviceThingName = "KB" + location + levelname +level+"Thing";
                                        var valueStreamThingName = "KB" + location + levelname+level+"ValueStream";
                                        
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBThingCreatorResponseDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBThingCreatorResponseDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var params = {
                                        	thingName: deviceThingName /* STRING */
                                        };
                                        
                                        // result: BOOLEAN
                                        if (!Resources["PTC.Factory.CommonUtilities"].DoesThingExists(params)) {
                                        
                                            // KBThingCreatorResponseDataShape entry object
                                            var newEntry = new Object();
                                        
                                            try {
                                        
                                        
                                                var params = {
                                                    name: valueStreamThingName /* STRING */,
                                                    description: "Value Stream for " + deviceThingName /* STRING */,
                                                    thingTemplateName: "ValueStream" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[valueStreamThingName].EnableThing();
                                                Things[valueStreamThingName].RestartThing();
                                        
                                        
                                                
                                                var params = {
                                                    name: deviceThingName /* STRING */,
                                                    description: "Auto-Created "+level /* STRING */,
                                                    thingTemplateName: "KBLocal"+level+"ThingTemplate" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[deviceThingName].EnableThing();
                                                Things[deviceThingName].RestartThing();
                                                
                                                Resources["EntityServices"].AddShapeToThing({
                                                	name: deviceThingName /* THINGNAME */,
                                                	thingShapeName: "KBLocal"+level+"SmartKPIShape" /* THINGSHAPENAME */
                                                });
                                                
                                                var params = {
                                                    name: valueStreamThingName /* THINGNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetValueStream(params);
                                                
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetProjectName(params);
                                        
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[valueStreamThingName].SetProjectName(params);
                                                
                                                
                                                
                                                var params = { principal: "KBDevelopment", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBOrganization", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBBackGroundWorker", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, type: "Read", principalType: "User" };
                                        		Things[deviceThingName].AddDesignTimePermission(params);
                                        		var params = { principal: "KBUserGroup", allow: true, resource: "*", type: "PropertyRead", principalType: "Group" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "PropertyRead", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                                
                                                newEntry.Text = deviceThingName; // STRING
                                                newEntry.Id = 0; // INTEGER
                                                Things[deviceThingName].RestartThing();
                                            } catch(err) {
                                                newEntry.Text = err; // STRING
                                                newEntry.Id = 9; // INTEGER
                                            }
                                            newEntry.Name = deviceThingName;
                                            result.AddRow(newEntry);
                                        
                                        
                                        } else {
                                        // KBThingCreatorResponseDataShape entry object
                                        var newEntry = new Object();
                                        newEntry.Text = "Device already exists: " + deviceThingName; // STRING
                                        newEntry.Id = 1; // INTEGER
                                        newEntry.Name = deviceThingName;
                                        result.AddRow(newEntry);
                                        }
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalExternalDB">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var params = {
                                        	thingName: ThingName /* STRING */
                                        };
                                        
                                        if (!Resources["PTC.Factory.CommonUtilities"].DoesThingExists(params)) {
                                            var params = {
                                                name: ThingName /* STRING */,
                                                description: Description /* STRING */,
                                                thingTemplateName: "KBKPILocalThingWorxDatabaseTemplate" /* THINGTEMPLATENAME */,
                                                tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                            };
                                        
                                            Resources["EntityServices"].CreateThing(params);
                                            Things[ThingName].EnableThing();
                                            Things[ThingName].RestartThing();
                                        
                                            var params = {
                                                projectName: "KBsmartKPI" /* PROJECTNAME */
                                            };
                                        
                                            // no return
                                            Things[ThingName].SetProjectName(params);
                                        
                                            var params = { principal: "KBUserGroup", allow: true, resource: "*", type: "PropertyRead", principalType: "Group" };
                                            Things[ThingName].AddRunTimePermission(params);
                                            var params = { principal: "KBUserGroup", allow: true, resource: "*", type: "ServiceInvoke", principalType: "Group" };
                                            Things[ThingName].AddRunTimePermission(params);
                                            var params = { principal: "KBOrganization", principalType: "Organization" };
                                            Things[ThingName].AddVisibilityPermission(params);
                                        }
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalMachineOrLine">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        // result: STRING
                                        var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();
                                        
                                        var deviceThingName = "KB" + location + MachineOrLineName + "MachineThing";
                                        var valueStreamThingName = "KB" + location + MachineOrLineName + "MachineValueStream";
                                        
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBThingCreatorResponseDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBThingCreatorResponseDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var params = {
                                        	thingName: deviceThingName /* STRING */
                                        };
                                        
                                        // result: BOOLEAN
                                        if (!Resources["PTC.Factory.CommonUtilities"].DoesThingExists(params)) {
                                        
                                            // KBThingCreatorResponseDataShape entry object
                                            var newEntry = new Object();
                                        
                                            try {
                                        
                                        
                                                var params = {
                                                    name: valueStreamThingName /* STRING */,
                                                    description: "Value Stream for " + deviceThingName /* STRING */,
                                                    thingTemplateName: "ValueStream" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[valueStreamThingName].EnableThing();
                                                Things[valueStreamThingName].RestartThing();
                                        
                                        
                                                
                                                var params = {
                                                    name: deviceThingName /* STRING */,
                                                    description: "Auto-Created Machine or Line Device " /* STRING */,
                                                    thingTemplateName: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[deviceThingName].EnableThing();
                                                Things[deviceThingName].RestartThing();
                                                
                                                
                                                var params = {
                                                    name: valueStreamThingName /* THINGNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetValueStream(params);
                                                
                                                
                                                var params = {
                                                    name: deviceThingName /* THINGNAME */,
                                                    thingShapeName: "KBLocalSmartKPIShape" /* THINGSHAPENAME */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].AddShapeToThing(params);
                                        
                                                    var params = {
                                                    name: deviceThingName /* THINGNAME */,
                                                    thingShapeName: "KBLocalMachineSmartKPIShape" /* THINGSHAPENAME */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].AddShapeToThing(params);
                                        
                                                    var params = {
                                                    name: deviceThingName /* THINGNAME */,
                                                    thingShapeName: "KBLocalThingExtensionShape" /* THINGSHAPENAME */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].AddShapeToThing(params);
                                        		
                                        		if(ThingShapes["KBAndonMechatronicsAddOnFunctionsThingShape"]){
													var params = {
												    name: deviceThingName /* THINGNAME */,
												    thingShapeName: "KBAndonMechatronicsAddOnFunctionsThingShape" /* THINGSHAPENAME */
												    };
												                                        
												    // no return
												    Resources["EntityServices"].AddShapeToThing(params);
												
												}
                                        
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetProjectName(params);
                                        
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[valueStreamThingName].SetProjectName(params);
                                                
                                        
                                                var params = {
                                                    identifier: deviceThingName + "@smartproduction" /* STRING */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetIdentifier(params);
                                        
                                        		Things[deviceThingName].IsSmartKpiMachineLevel = true;
                                        
                                                
                                                var params = { principal: "KBDevelopment", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBOrganization", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBBackGroundWorker", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                        
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, type: "Read", principalType: "User" };
                                        		Things[deviceThingName].AddDesignTimePermission(params);
                                        
                                        		var params = { principal: "KBUserGroup", allow: true, resource: "*", type: "PropertyRead", principalType: "Group" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "PropertyRead", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "PropertyWrite", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "ServiceInvoke", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "FederationSubsystemUser", allow: true, resource: "*", type: "PropertyRead", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "FederationSubsystemUser", allow: true, resource: "*", type: "PropertyWrite", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "FederationSubsystemUser", allow: true, resource: "*", type: "ServiceInvoke", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "FederationSubsystemUser", allow: true, resource: "*", type: "EventInvoke", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        
                                                Things[deviceThingName].RestartThing();
                                        
                                                
                                                newEntry.Text = deviceThingName; // STRING
                                                newEntry.Id = 0; // INTEGER
                                            } catch(err) {
                                                newEntry.Text = err; // STRING
                                                newEntry.Id = 9; // INTEGER
                                            }
                                            newEntry.Name = deviceThingName;
                                            result.AddRow(newEntry);
                                        
                                        
                                        } else {
                                        // KBThingCreatorResponseDataShape entry object
                                        var newEntry = new Object();
                                        newEntry.Text = "Device already exists: " + deviceThingName; // STRING
                                        newEntry.Id = 1; // INTEGER
                                        newEntry.Name = deviceThingName;
                                        result.AddRow(newEntry);
                                        }
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalMesKitStation">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var hostName = HostName.toUpperCase();
                                        var deviceThingName = "MesKit_" + hostName;
                                        
                                        
                                        var params = {
                                        	StationName: deviceThingName /* STRING */
                                        };
                                        var result = me.CreateLocalStation(params);
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalPlant">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var level = "Plant";	
                                        var levelname = PlantName;									
                                        										
                                        										
                                        // result: STRING
                                        var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();
                                        
                                        var deviceThingName = "KB" + location + levelname +level+"Thing";
                                        var valueStreamThingName = "KB" + location + levelname+level+"ValueStream";
                                        
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBThingCreatorResponseDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBThingCreatorResponseDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var params = {
                                        	thingName: deviceThingName /* STRING */
                                        };
                                        
                                        // result: BOOLEAN
                                        if (!Resources["PTC.Factory.CommonUtilities"].DoesThingExists(params)) {
                                        
                                            // KBThingCreatorResponseDataShape entry object
                                            var newEntry = new Object();
                                        
                                            try {
                                        
                                        
                                                var params = {
                                                    name: valueStreamThingName /* STRING */,
                                                    description: "Value Stream for " + deviceThingName /* STRING */,
                                                    thingTemplateName: "ValueStream" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[valueStreamThingName].EnableThing();
                                                Things[valueStreamThingName].RestartThing();
                                        
                                        
                                                
                                                var params = {
                                                    name: deviceThingName /* STRING */,
                                                    description: "Auto-Created "+level /* STRING */,
                                                    thingTemplateName: "KBLocal"+level+"ThingTemplate" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[deviceThingName].EnableThing();
                                                Things[deviceThingName].RestartThing();
                                                
                                                Resources["EntityServices"].AddShapeToThing({
                                                	name: deviceThingName /* THINGNAME */,
                                                	thingShapeName: "KBLocal"+level+"SmartKPIShape" /* THINGSHAPENAME */
                                                });
                                                
                                                var params = {
                                                    name: valueStreamThingName /* THINGNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetValueStream(params);
                                                
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetProjectName(params);
                                        
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[valueStreamThingName].SetProjectName(params);
                                                
                                                
                                                
                                                var params = { principal: "KBDevelopment", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBOrganization", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBBackGroundWorker", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, type: "Read", principalType: "User" };
                                        		Things[deviceThingName].AddDesignTimePermission(params);
                                        		var params = { principal: "KBUserGroup", allow: true, resource: "*", type: "PropertyRead", principalType: "Group" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "PropertyRead", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                                
                                                newEntry.Text = deviceThingName; // STRING
                                                newEntry.Id = 0; // INTEGER
                                                Things[deviceThingName].RestartThing();
                                            } catch(err) {
                                                newEntry.Text = err; // STRING
                                                newEntry.Id = 9; // INTEGER
                                            }
                                            newEntry.Name = deviceThingName;
                                            result.AddRow(newEntry);
                                        
                                        
                                        } else {
                                        // KBThingCreatorResponseDataShape entry object
                                        var newEntry = new Object();
                                        newEntry.Text = "Device already exists: " + deviceThingName; // STRING
                                        newEntry.Id = 1; // INTEGER
                                        newEntry.Name = deviceThingName;
                                        result.AddRow(newEntry);
                                        }
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalRegion">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var level = "Region";	
                                        var levelname = RegionName;									
                                        										
                                        										
                                        // result: STRING
                                        var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();
                                        
                                        var deviceThingName = "KB" + location + levelname +level+"Thing";
                                        var valueStreamThingName = "KB" + location + levelname+level+"ValueStream";
                                        
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBThingCreatorResponseDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBThingCreatorResponseDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var params = {
                                        	thingName: deviceThingName /* STRING */
                                        };
                                        
                                        // result: BOOLEAN
                                        if (!Resources["PTC.Factory.CommonUtilities"].DoesThingExists(params)) {
                                        
                                            // KBThingCreatorResponseDataShape entry object
                                            var newEntry = new Object();
                                        
                                            try {
                                        
                                        
                                                var params = {
                                                    name: valueStreamThingName /* STRING */,
                                                    description: "Value Stream for " + deviceThingName /* STRING */,
                                                    thingTemplateName: "ValueStream" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[valueStreamThingName].EnableThing();
                                                Things[valueStreamThingName].RestartThing();
                                        
                                        
                                                
                                                var params = {
                                                    name: deviceThingName /* STRING */,
                                                    description: "Auto-Created "+level /* STRING */,
                                                    thingTemplateName: "KBLocal"+level+"ThingTemplate" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[deviceThingName].EnableThing();
                                                Things[deviceThingName].RestartThing();
                                                
                                                Resources["EntityServices"].AddShapeToThing({
                                                	name: deviceThingName /* THINGNAME */,
                                                	thingShapeName: "KBLocal"+level+"SmartKPIShape" /* THINGSHAPENAME */
                                                });
                                                
                                                var params = {
                                                    name: valueStreamThingName /* THINGNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetValueStream(params);
                                                
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetProjectName(params);
                                        
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[valueStreamThingName].SetProjectName(params);
                                                
                                                
                                                
                                                var params = { principal: "KBDevelopment", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBOrganization", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBBackGroundWorker", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, type: "Read", principalType: "User" };
                                        		Things[deviceThingName].AddDesignTimePermission(params);
                                        		var params = { principal: "KBUserGroup", allow: true, resource: "*", type: "PropertyRead", principalType: "Group" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "PropertyRead", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                                
                                                newEntry.Text = deviceThingName; // STRING
                                                newEntry.Id = 0; // INTEGER
                                                Things[deviceThingName].RestartThing();
                                            } catch(err) {
                                                newEntry.Text = err; // STRING
                                                newEntry.Id = 9; // INTEGER
                                            }
                                            newEntry.Name = deviceThingName;
                                            result.AddRow(newEntry);
                                        
                                        
                                        } else {
                                        // KBThingCreatorResponseDataShape entry object
                                        var newEntry = new Object();
                                        newEntry.Text = "Device already exists: " + deviceThingName; // STRING
                                        newEntry.Id = 1; // INTEGER
                                        newEntry.Name = deviceThingName;
                                        result.AddRow(newEntry);
                                        }
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalStation">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        // result: STRING
                                        var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();
                                        
                                        var deviceThingName = "KB" + location + StationName + "StationThing";
                                        var valueStreamThingName = "KB" + location + StationName + "StationValueStream";
                                        
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBThingCreatorResponseDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBThingCreatorResponseDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var params = {
                                        	thingName: deviceThingName /* STRING */
                                        };
                                        
                                        // result: BOOLEAN
                                        if (!Resources["PTC.Factory.CommonUtilities"].DoesThingExists(params)) {
                                        
                                            // KBThingCreatorResponseDataShape entry object
                                            var newEntry = new Object();
                                        
                                            try {
                                        
                                        
                                                var params = {
                                                    name: valueStreamThingName /* STRING */,
                                                    description: "Value Stream for " + deviceThingName /* STRING */,
                                                    thingTemplateName: "ValueStream" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                // no return
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[valueStreamThingName].EnableThing();
                                                Things[valueStreamThingName].RestartThing();
                                        
                                        
                                                
                                                var params = {
                                                    name: deviceThingName /* STRING */,
                                                    description: "Auto-Created Station Device " /* STRING */,
                                                    thingTemplateName: "KBLocalStationThingTemplate" /* THINGTEMPLATENAME */,
                                                    tags: "KBThingWorxAdministrationVocabulary:Administrated" /* TAGS */
                                                };
                                        
                                                Resources["EntityServices"].CreateThing(params);
                                                Things[deviceThingName].EnableThing();
                                                Things[deviceThingName].RestartThing();
                                                
                                                
                                                var params = {
                                                    name: valueStreamThingName /* THINGNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetValueStream(params);
                                                
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[deviceThingName].SetProjectName(params);
                                        
                                                var params = {
                                                    projectName: "KBsmartKPI" /* PROJECTNAME */
                                                };
                                        
                                                // no return
                                                Things[valueStreamThingName].SetProjectName(params);
                                                
                                                
                                                
                                                var params = { principal: "KBDevelopment", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBOrganization", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                                var params = { principal: "KBBackGroundWorker", principalType: "Organization" };
                                                Things[deviceThingName].AddVisibilityPermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, type: "Read", principalType: "User" };
                                        		Things[deviceThingName].AddDesignTimePermission(params);
                                        		var params = { principal: "KBUserGroup", allow: true, resource: "*", type: "PropertyRead", principalType: "Group" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "PropertyRead", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBTestBenchFileRepositoryUser", allow: true, resource: "*", type: "PropertyRead", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "PropertyWrite", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBTestBenchFileRepositoryUser", allow: true, resource: "*", type: "PropertyWrite", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBMesKitHelperUser", allow: true, resource: "*", type: "ServiceInvoke", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                        		var params = { principal: "KBTestBenchFileRepositoryUser", allow: true, resource: "*", type: "ServiceInvoke", principalType: "User" };
                                        		Things[deviceThingName].AddRunTimePermission(params);
                                                
                                                newEntry.Text = deviceThingName; // STRING
                                                newEntry.Id = 0; // INTEGER
                                                Things[deviceThingName].RestartThing();
                                            } catch(err) {
                                                newEntry.Text = err; // STRING
                                                newEntry.Id = 9; // INTEGER
                                            }
                                            newEntry.Name = deviceThingName;
                                            result.AddRow(newEntry);
                                        
                                        
                                        } else {
                                        // KBThingCreatorResponseDataShape entry object
                                        var newEntry = new Object();
                                        newEntry.Text = "Device already exists: " + deviceThingName; // STRING
                                        newEntry.Id = 1; // INTEGER
                                        newEntry.Name = deviceThingName;
                                        result.AddRow(newEntry);
                                        }
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="CreateLocalStationWithLineAssignment">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();
                                        
                                        var deviceThingName = "KB" + location + StationName + "StationThing";
                                        var valueStreamThingName = "KB" + location + StationName + "StationValueStream";
                                        
                                        var params = {
                                        	StationName: StationName /* STRING */
                                        };
                                        var result = me.CreateLocalStation(params);
                                        
                                               
                                        Things[deviceThingName].KBLocalLineThing = LineThingName;
                                        // KBMachineStationDataShape entry object
                                        var newEntry = new Object();
                                        newEntry.KBLocalStationThing = deviceThingName; // THINGNAME - isPrimaryKey = true
                                        
										// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBMachineStationDataShape)
										var KBLocalStationThings = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
										    infoTableName : "InfoTable",
										    dataShapeName : "KBMachineStationDataShape"
										});
										
										
										// result: INFOTABLE dataShape: "SpotlightSearchWithPersistent"
										var stations = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent({
											maxItems: 9999999 /* NUMBER */,
											nameMask: undefined /* STRING */,
											thingTemplate: "KBLocalStationThingTemplate" /* THINGTEMPLATENAME */
										});
										var tableLength = stations.rows.length;
										for (var x=0; x < tableLength; x++) {
										    var station = stations.rows[x];
										    //Your code here
										    if (Things[station.name].KBLocalLineThing == LineThingName){
										        // KBMachineStationDataShape entry object
										        var newEntry = new Object();
										        newEntry.KBLocalStationThing = station.name; // THINGNAME [Primary Key]
										        newEntry.Order = x; // NUMBER
										        KBLocalStationThings.AddRow(newEntry);
										    }
										}
										Things[LineThingName].KBLocalStationThings = KBLocalStationThings;
                                        
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="createNewOrgUnitThing">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        //logger.debug("createNewOrgUnitThing, begin");
                                        //var thingName = prefix + midName + suffix;
                                        //logger.debug("createNewOrgUnitThing, thingType = " + thingType);
                                        //logger.debug("createNewOrgUnitThing, thingName = " + midName);
                                        
                                        if(thingType === "Area") {
                                            Things["KBSmartKpiThingCreatorThing"].CreateLocalArea({
                                                AreaName: midName /* STRING */
                                            });    
                                        }
                                        
                                        else if(thingType === "Company") {
                                            Things["KBSmartKpiThingCreatorThing"].CreateLocalCompany({
                                                CompanyName: midName /* STRING */
                                            });    
                                        }
                                        
                                        else if(thingType === "Country") {
                                            Things["KBSmartKpiThingCreatorThing"].CreateLocalCountry({
                                                CountryName: midName /* STRING */
                                            });    
                                        }
                                        
                                        else if(thingType === "Division") {
                                            Things["KBSmartKpiThingCreatorThing"].CreateLocalDivision({
                                                DivisionName: midName /* STRING */
                                            });    
                                        }
                                        
                                        else if(thingType === "Machine") {
                                            Things["KBSmartKpiThingCreatorThing"].CreateLocalMachineOrLine({
                                                MachineOrLineName: midName /* STRING */
                                            });    
                                        }
                                        
                                        else if(thingType === "MeskitStation") {
                                            Things["KBSmartKpiThingCreatorThing"].CreateLocalMesKitStation({
                                                HostName: midName /* STRING */
                                            });
                                        }
                                        
                                        else if(thingType === "Plant") {
                                            Things["KBSmartKpiThingCreatorThing"].CreateLocalPlant({
                                                PlantName: midName /* STRING */
                                            });    
                                        }
                                        
                                        else if(thingType === "Region") {
                                            Things["KBSmartKpiThingCreatorThing"].CreateLocalRegion({
                                                RegionName: midName /* STRING */
                                            });    
                                        }
                                        
                                        else if(thingType === "Station") {
                                        	//logger.debug("createNewOrgUnitThing, creating " + midName);
                                            Things["KBSmartKpiThingCreatorThing"].CreateLocalStation({
                                        		StationName: midName /* STRING */
                                        	});   
                                        }
                                        
                                        //logger.debug("createNewOrgUnitThing, end");
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="getAreaEntitiesWithMachineNum">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBOrgAreaWithMacNoDataShape"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var KBAreaThing = "";
                                        var DisplayName = "";
                                        var FullName = "";
                                        var isActive = false;
                                        var KBPlantThing = "";
                                        var MachineQty = 0;
                                        
                                        // result: INFOTABLE dataShape: "RootEntityList"
                                        var areaList =  ThingShapes["KBLocalAreaSmartKPIShape"].GetImplementingThingsWithData();
                                        var tableLength = areaList.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = areaList.rows[x];
                                            KBAreaThing = row.name;
                                            DisplayName = row.DisplayName;
                                            FullName = row.FullName;
                                            isActive = row.isActive;
                                            KBPlantThing = row.KBPlantThing;
                                            MachineQty = row.KBMachineThings.rows.length;
                                            outputTable.AddRow({
                                            	KBAreaThing: KBAreaThing,
                                                DisplayName: DisplayName,
                                                FullName: FullName,
                                                isActive: isActive,
                                                MachineQty: MachineQty,
                                                KBPlantThing: KBPlantThing
                                            });
                                        }
                                        
                                        var result = outputTable;
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="getKBorg">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        // getKBorg, Output = InfoTable(KBOrgDataShape)
                                        // #0. create outputTable
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBOrgDataShape"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        //var outputTable90 = outputTable; // to check standalone or not
                                        
                                        // #10. get region list 
                                        logger.debug("getKBorg, #10 start");
                                        var regionList =  ThingTemplates["KBLocalRegionThingTemplate"].GetImplementingThings();
                                        var regionNum = regionList.rows.length;
                                        var regionName = "";
                                        for (var x10=0; x10 < regionNum; x10++) {
                                            var row10 = regionList.rows[x10];
                                            regionName = row10.name;
                                            outputTable.AddRow({
                                            	from:"",
                                                to:regionName,
                                                name:regionName,
                                                type:"Region",
                                                displayName:regionName,
                                        		sort:regionName,
                                        		tabValue:"RegionTab",
                                        		standAlone:0,
                                        		thingIndex:0
                                            });    
                                        }
                                        //var result = outputTable;
                                        
                                        // #20. get country list
                                        logger.debug("getKBorg, #20 start");
                                        var countryList =  ThingTemplates["KBLocalCountryThingTemplate"].GetImplementingThings();
                                        var countryNum = countryList.rows.length;
                                        var countryName = "";
                                        //var result = countryList;
                                        
                                        // #30. bind region with country
                                        logger.debug("getKBorg, #30 start");
                                        for (var x30=0; x30 < countryNum; x30++) {
                                            var row30 = countryList.rows[x30];
                                            countryName = row30.name;
                                        	logger.debug("getKBorg, #30 countryName = " + countryName);
                                        	var RegionOfCountry = Things[countryName].KBRegionThing;
                                        	logger.debug("getKBorg, #30 RegionOfCountry = " + RegionOfCountry);
                                            if((RegionOfCountry=="")||(!Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:RegionOfCountry}))) {
                                                outputTable.AddRow({
                                                    from:"",
                                                    to:countryName,
                                                    name:countryName,
                                                    type:"Country",
                                                    displayName:countryName,
                                        			sort:countryName,
                                        			tabValue:"CountryTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                                });           
                                            } 
                                            // check RegionOfCountry exists
                                        	if((RegionOfCountry!="")&&(Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:RegionOfCountry}))) {
                                        		outputTable.AddRow({
                                        			from:RegionOfCountry,
                                        			to:countryName,
                                        			name:RegionOfCountry + "/" + countryName,
                                        			type:"Country",
                                        			displayName:countryName,
                                        			sort:RegionOfCountry + "/" + countryName,
                                        			tabValue:"CountryTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                        		});   		
                                        	}                
                                        }
                                        //var result = outputTable;
                                        
                                        // #40. get plant list
                                        logger.debug("getKBorg, #40 start");
                                        var plantList =  ThingTemplates["KBLocalPlantThingTemplate"].GetImplementingThings();
                                        var plantNum = plantList.rows.length;
                                        var plantName = "";
                                        //var result = plantList;
                                        
                                        // #50. bind country with plant
                                        logger.debug("getKBorg, #50 start");
                                        for (var x50=0; x50 < plantNum; x50++) {
                                            var row50 = plantList.rows[x50];
                                            plantName = row50.name;
                                        	logger.debug("getKBorg, #50 plantName = " + plantName);
                                        	var CountryOfPlant = Things[plantName].KBCountryThing;
                                        	logger.debug("getKBorg, #50 CountryOfPlant = " + CountryOfPlant);
                                            if((CountryOfPlant=="")||(!Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:CountryOfPlant}))) {
                                                outputTable.AddRow({
                                                    from:"",
                                                    to:plantName,
                                                    name:plantName,
                                                    type:"Plant",
                                                    displayName:plantName,
                                        			sort:plantName,
                                        			tabValue:"PlantTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                                });           
                                            }
                                        	if((CountryOfPlant!="")&&(Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:CountryOfPlant}))) {
                                        		// get sort of Country of Plant
                                        		var params50 = {
                                        		fieldName: "to" , // STRING ,
                                        		isCaseSensitive: false , // BOOLEAN,
                                        		t: outputTable , // INFOTABLE
                                        		value: CountryOfPlant , // STRING 
                                        		};
                                        		var countrySort = Resources["InfoTableFunctions"].EQFilter(params50).rows[0].sort;	
                                        		logger.debug("getKBorg, #50 countrySort = " + countrySort);
                                        		outputTable.AddRow({
                                                    from:CountryOfPlant,
                                                    to:plantName,
                                                    name:countrySort + "/" + plantName,
                                                    type:"Plant",
                                                    displayName:plantName,
                                        			sort:countrySort + "/" + plantName,
                                        			tabValue:"PlantTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                                }); 	
                                            } 		
                                        }
                                        //var result = outputTable;
                                        
                                        // #60. bind plant with company
                                        logger.debug("getKBorg, #60 start");
                                        for (var x60=0; x60 < plantNum; x60++) {
                                            var row60 = plantList.rows[x60];
                                            plantName = row60.name;
                                            logger.debug("getKBorg, #60, plantName=" + plantName);
                                        	var params60 = {
                                        	fieldName: "to" , // STRING ,
                                        	isCaseSensitive: false , // BOOLEAN,
                                        	t: outputTable , // INFOTABLE
                                        	value: plantName , // STRING 
                                        	};
                                        	var plantSort60 = Resources["InfoTableFunctions"].EQFilter(params60).rows[0].sort;	
                                            logger.debug("getKBorg, #60, plantSort60=" + plantSort60);
                                            var companyOfPlant = Things[plantName].KBCompanyThing;	
                                            logger.debug("getKBorg, #60, companyOfPlant=" + companyOfPlant);
                                            if((companyOfPlant != "")&&(Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:companyOfPlant}))) {
                                                outputTable.AddRow({
                                                    from:plantName,
                                                    to:companyOfPlant,
                                                    name:plantSort60 + "/" + companyOfPlant,
                                                    type:"Company",
                                                    displayName:companyOfPlant,
                                        			sort:plantSort60 + "/" + companyOfPlant,
                                        			tabValue:"CompanyTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                                });           
                                            } 		
                                        }
                                        //var result = outputTable;
                                        
                                        // #65. list company not binded to any plant
                                        logger.debug("getKBorg, #65 start");
                                        var companyList =  ThingTemplates["KBLocalCompanyThingTemplate"].GetImplementingThings();
                                        var companyNum = companyList.rows.length;
                                        var companyName = "";
                                        for (var x65=0; x65 < companyNum; x65++) {
                                            var row65 = companyList.rows[x65];
                                            companyName = row65.name;	
                                        	logger.debug("getKBorg, #65 companyName = " + companyName);
                                        	var params65 = {
                                        	fieldName: "to" , // STRING ,
                                        	isCaseSensitive: false , // BOOLEAN,
                                        	t: outputTable , // INFOTABLE
                                        	value: companyName , // STRING 
                                        	};
                                        	var companyNameFound = Resources["InfoTableFunctions"].EQFilter(params65).rows.length;	
                                        	logger.debug("getKBorg, #65 companyNameFound = " + companyNameFound);
                                            if (companyNameFound === 0) {
                                                outputTable.AddRow({
                                                    from:"",
                                                    to:companyName,
                                                    name:companyName,
                                                    type:"Company",
                                                    displayName:companyName,
                                        			sort:companyName,
                                        			tabValue:"CompanyTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                            	});     
                                            }		
                                        }	
                                        //var result = outputTable;
                                        
                                        // #70. bind plant with division
                                        logger.debug("getKBorg, #70 start");
                                        for (var x70=0; x70 < plantNum; x70++) {
                                            var row70 = plantList.rows[x70];
                                            plantName = row70.name;
                                        	logger.debug("getKBorg, #70 plantName = " + plantName);
                                        	var params70 = {
                                        	fieldName: "to" , // STRING ,
                                        	isCaseSensitive: false , // BOOLEAN,
                                        	t: outputTable , // INFOTABLE
                                        	value: plantName , // STRING 
                                        	};
                                        	var plantSort70 = Resources["InfoTableFunctions"].EQFilter(params70).rows[0].sort;	
                                        	logger.debug("getKBorg, #70 plantSort70 = " + plantSort70);
                                            var divisionOfPlant = Things[plantName].KBDivisionThing;	
                                        	logger.debug("getKBorg, #70 divisionOfPlant = " + divisionOfPlant);
                                            if((divisionOfPlant != "")&&(Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:divisionOfPlant}))) {
                                                outputTable.AddRow({
                                                    from:plantName,
                                                    to:divisionOfPlant,
                                                    name:plantSort70 + "/" + divisionOfPlant,
                                                    type:"Division",
                                                    displayName:divisionOfPlant,
                                        			sort:plantSort70 + "/" + divisionOfPlant,
                                        			tabValue:"DivisionTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                                });           
                                            } 		
                                        }
                                        //var result = outputTable;
                                        
                                        // #75. list division not binded to any plant
                                        logger.debug("getKBorg, #75 start");
                                        var divisionList =  ThingTemplates["KBLocalDivisionThingTemplate"].GetImplementingThings();
                                        var divisionNum = divisionList.rows.length;
                                        var divisionName = "";
                                        for (var x75=0; x75 < divisionNum; x75++) {
                                            var row75 = divisionList.rows[x75];
                                            divisionName = row75.name;	
                                        	logger.debug("getKBorg, #75 divisionName = " + divisionName);
                                        	var params75 = {
                                        	fieldName: "to" , // STRING ,
                                        	isCaseSensitive: false , // BOOLEAN,
                                        	t: outputTable , // INFOTABLE
                                        	value: divisionName , // STRING 
                                        	};
                                        	var divisionNameFound = Resources["InfoTableFunctions"].EQFilter(params75).rows.length;	
                                        	logger.debug("getKBorg, #75 divisionNameFound = " + divisionNameFound);	
                                            if (divisionNameFound === 0) {
                                                outputTable.AddRow({
                                                    from:"",
                                                    to:divisionName,
                                                    name:divisionName,
                                                    type:"Division",
                                                    displayName:divisionName,
                                        			sort:divisionName,
                                        			tabValue:"DivisionTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                            	});     
                                            }		
                                        }	
                                        //var result = outputTable;
                                        
                                        // #80. get area list
                                        logger.debug("getKBorg, #80 start");
                                        var areaList = ThingTemplates["KBLocalAreaThingTemplate"].GetImplementingThings();
                                        var areaNum = areaList.rows.length;
                                        var areaName = "";
                                        //var result = areaList;
                                        
                                        // #90. bind plant with area
                                        logger.debug("getKBorg, #90 start");
                                        for (var x90=0; x90 < areaNum; x90++) {
                                            var row90 = areaList.rows[x90];
                                            areaName = row90.name;
                                        	logger.debug("getKBorg, #90 areaName = " + areaName);
                                            //var result = areaName;
                                            // result: INFOTABLE dataShape: "PropertyDefinition"
                                        	var plantOfArea = Things[areaName].KBPlantThing;
                                        	logger.debug("getKBorg, #90 plantOfArea = " + plantOfArea);
                                            //var result = plantOfArea;
                                            //var result = plantOfArea + "/" + areaName;   
                                            if((plantOfArea=="")||(!Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:plantOfArea}))) {
                                        		//plant/area relation not found
                                                outputTable.AddRow({
                                                    from:"",
                                                    to:areaName,
                                                    name:areaName,
                                                    type:"Area",
                                                    displayName:areaName,
                                        			sort:areaName,
                                        			tabValue:"AreaTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                                });           
                                            } //else {
                                        	if((plantOfArea!="")&&(Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:plantOfArea}))) {
                                        		//plant/area relation found
                                        		var params90 = {
                                        		fieldName: "to" , // STRING ,
                                        		isCaseSensitive: false , // BOOLEAN,
                                        		t: outputTable , // INFOTABLE
                                        		value: plantOfArea , // STRING 
                                        		};
                                        		var plantSort90 = Resources["InfoTableFunctions"].EQFilter(params90).rows[0].sort;	
                                        		logger.debug("getKBorg, #90 plantSort90 = " + plantSort90);
                                                outputTable.AddRow({
                                                    from:plantOfArea,
                                                    to:areaName,
                                                    name:plantSort90 + "/" + areaName,
                                                    type:"Area",
                                                    displayName:areaName,
                                        			sort:plantSort90 + "/" + areaName,
                                        			tabValue:"AreaTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                                });           
                                            }  
                                        }	
                                        //var result = outputTable;
                                        
                                        // #100. bind area with machine/line
                                        logger.debug("getKBorg, #100 start");
                                        for (var x100=0; x100 < areaNum; x100++) {
                                            var row100 = areaList.rows[x100];
                                            areaName = row100.name;
                                        	logger.debug("getKBorg, #100 areaName = " + areaName);
                                        	var params100 = {
                                        	fieldName: "to" , // STRING ,
                                        	isCaseSensitive: false , // BOOLEAN,
                                        	t: outputTable , // INFOTABLE
                                        	value: areaName , // STRING 
                                        	};
                                        	var areaSort100 = Resources["InfoTableFunctions"].EQFilter(params100).rows[0].sort;	
                                        	logger.debug("getKBorg, #100 areaSort100 = " + areaSort100);	
                                            // add area/line relations
                                            var lineList1 = Things[areaName].KBMachineThings;   
                                            var lineNum1 = lineList1.rows.length;
                                            var line1 = "";
                                            for (var x1002=0; x1002 < lineNum1; x1002++) {
                                                var row1002 = lineList1.rows[x1002];
                                                //var lineName1 = row42.name;
                                                line1 = row1002.KBMachineThing;
                                        		logger.debug("getKBorg, #100 line1 = " + line1);	
                                                if((line1 != "")&&(Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:line1}))) {
                                                    outputTable.AddRow({
                                                        from:areaName,
                                                        to:line1,
                                                        name:areaSort100 + "/" + line1,
                                                        type:"Machine",
                                                        displayName:line1,
                                                        sort:areaSort100 + "/" + line1,
                                        				tabValue:"MachineTab",
                                        				standAlone:0,
                                        				thingIndex:0
                                                    });              
                                                }
                                             }   		
                                        }
                                        //var result = outputTable;
                                        
                                        // #110. get machine/line list
                                        logger.debug("getKBorg, #110 start");
                                        var lineList =  ThingTemplates["KBLocalMachineThingTemplate"].GetImplementingThings();
                                        var lineNum = lineList.rows.length;
                                        var lineName = "";
                                        //var result = lineList;
                                        for (var x110=0; x110 < lineList.rows.length; x110++) {
                                            var row110 = lineList.rows[x110];
                                            lineName = row110.name;
                                        	logger.debug("getKBorg, #110 lineName = " + lineName);
                                        	var params110 = {
                                        	fieldName: "to" , // STRING ,
                                        	isCaseSensitive: false , // BOOLEAN,
                                        	t: outputTable , // INFOTABLE
                                        	value: lineName , // STRING 
                                        	};
                                        	var linenameFound = Resources["InfoTableFunctions"].EQFilter(params110).rows.length;	
                                        	logger.debug("getKBorg, #110 linenameFound = " + linenameFound);	
                                            if (linenameFound === 0) {
                                                outputTable.AddRow({
                                                    from:"",
                                                    to:lineName,
                                                    name:lineName,
                                                    type:"Machine",
                                                    displayName:lineName,
                                        			sort:lineName,
                                        			tabValue:"MachineTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                            	});     
                                            }
                                        }
                                        //var result = outputTable;
                                        
                                        // #120. get station list
                                        logger.debug("getKBorg, #120 start");
                                        var stationList =  ThingTemplates["KBLocalStationThingTemplate"].GetImplementingThings();
                                        var stationNum = stationList.rows.length;
                                        var stationName = "";
                                        //var result = stationList;
                                        
                                        // #130. bind machine with station
                                        logger.debug("getKBorg, #130 start");
                                        for (var x130=0; x130 < stationNum; x130++) {
                                            var row130 = stationList.rows[x130];
                                            stationName = row130.name;
                                        	logger.debug("getKBorg, #130 stationName = " + stationName);
                                            var lineOfStation = Things[stationName].KBLocalLineThing;
                                        	logger.debug("getKBorg, #130 lineOfStation = " + lineOfStation);
                                        	//var result = lineOfStation;	
                                        	if((lineOfStation == "")||(!Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:lineOfStation}))) {
                                        		//station not binded to line
                                                outputTable.AddRow({
                                                    from:"",
                                                    to:stationName,
                                                    name:stationName,
                                                    type:"Station",
                                                    displayName:stationName,
                                                    sort:stationName,
                                        			tabValue:"StationTab",
                                        			standAlone:0,
                                        			thingIndex:0
                                                });                  
                                            }// else {
                                        	if((lineOfStation != "")&&(Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName:lineOfStation}))) {
                                        		//station binded to line
                                        		var params130 = {
                                        		fieldName: "to",
                                        		isCaseSensitive: false,
                                        		t: outputTable,
                                        		value: lineOfStation
                                        		};
                                        		var lineSortList = Resources["InfoTableFunctions"].EQFilter(params130);
                                        		var lineSortNum = lineSortList.rows.length;
                                        		logger.debug("getKBorg, #130 lineSortNum = " + lineSortNum);
                                        		for (var x132=0; x132 < lineSortNum; x132++) {
                                        			var row132 = lineSortList.rows[x132];
                                        			var lineSort130 = row132.sort;	 
                                        			logger.debug("getKBorg, #130 lineSort130 = " + lineSort130);
                                        			//var result = lineSort100;		
                                        			outputTable.AddRow({
                                        				from:lineOfStation,
                                        				to:stationName,
                                        				name:lineSort130 + "/" + stationName,
                                        				type:"Station",
                                        				displayName:stationName,
                                        				sort:lineSort130 + "/" + stationName,
                                        				tabValue:"StationTab",
                                        				standAlone:0,
                                        				thingIndex:0
                                        			});  	
                                        		}				
                                        	}
                                        }
                                        //var result = outputTable;
                                        
                                        // #135. For name, replace "/" with "_"
                                        logger.debug("getKBorg, #135 start");
                                        var params135 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBOrgDataShape"
                                        };
                                        var outputTable135 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params135);
                                        var tableLength135 = outputTable.rows.length;
                                        for (var x135=0; x135 < tableLength135; x135++) {
                                            var row135 = outputTable.rows[x135];
                                        	var name1 = row135.name;
                                        	logger.debug("getKBorg, name1=" + name1);
                                        	for (var nc=0; nc<10; nc++) {
                                        		name1 = name1.replace("/","_");
                                        	}
                                        	logger.debug("getKBorg, name2=" + name1);
                                        	outputTable135.AddRow({
                                                from:row135.from,
                                                to:row135.to,
                                                name:name1,
                                                type:row135.type,
                                                displayName:row135.displayName,
                                                sort:row135.sort,
                                                tabValue:row135.tabValue,
                                                standAlone:0,
                                        		thingIndex:0
                                            });  
                                        }	
                                        //var result = outputTable135;
                                        
                                        // #138. create parentID & childID
                                        logger.debug("getKBorg, #138 start");
                                        var params138 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBOrgDataShape"
                                        };
                                        var outputTable138 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params138);
                                        var tableLength138 = outputTable135.rows.length;
                                        for (var x138=0; x138 < tableLength138; x138++) {
                                            var row138 = outputTable135.rows[x138];
                                        	var name138 = row138.name;
                                        	var len = name138.length;
                                        	var nm0 = row138.to;
                                        	var len0 = nm0.length;
                                        	var childID = name138;
                                        	var parentID = name138.substring(0, len-len0-1);
                                        	outputTable138.AddRow({
                                                from:row138.from,
                                                to:row138.to,
                                                name:row138.name,
                                                type:row138.type,
                                                displayName:row138.displayName,
                                                sort:row138.sort,
                                                tabValue:row138.tabValue,
                                                standAlone:0,
                                        		thingIndex:0,
                                        		parentID:parentID,
                                        		childID:childID
                                            }); 	
                                        }
                                        //var result = outputTable138;
                                        
                                        // #140. check isThingStandalone || isThingNotFullyCombined
                                        logger.debug("getKBorg, #140 start");
                                        var params140 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBOrgDataShape"
                                        };
                                        var outputTable140 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params140);
                                        //var outputTable90 = outputTable; // to check standalone or not
                                        var tableLength140 = outputTable138.rows.length;
                                        for (var x140=0; x140 < tableLength140; x140++) {
                                            var row140 = outputTable138.rows[x140];
                                            //var sort90 = row90.sort;
                                            var standAlone = 0; 
                                            
                                            // result: INTEGER
                                            standAlone =  me.isThingNotFullyCombined({
                                                thingName: row140.displayName,
                                                thingType: row140.type
                                            });
                                            
                                            //var chk1 = false;
                                            //var chk2 = false;
                                            //if((row140.type!="Region")&&(row140.name===row140.sort)) {chk2=true;}
                                        	//if((row140.type != "Station")&&(all_sort_stri.indexOf(row140.name + "/")) != -1) {chk1 = true;} // no children
                                            //if((row140.type != "Region")&&(all_sort_stri.indexOf('/'+row140.name)!=-1)) {chk2 = true;} // no parent
                                            //if(chk1||(isThingNotFullyCombined===1)) {standAlone = 1;}   
                                        	//if(chk2) {standAlone = 1;}
                                            outputTable140.AddRow({
                                                from:row140.from,
                                                to:row140.to,
                                                name:row140.name,
                                                type:row140.type,
                                                displayName:row140.displayName,
                                                sort:row140.sort,
                                                tabValue:row140.tabValue,
                                                standAlone:standAlone,
                                        		thingIndex:0,
                                        		parentID:row140.parentID,
                                        		childID:row140.childID
                                            });    
                                        }
                                        
                                        // #145. highlight new created thingName
                                        logger.debug("getKBorg, #145 start");
                                        var params145 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBOrgDataShape"
                                        };
                                        var outputTable145 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params145);
                                        //var outputTable90 = outputTable; // to check standalone or not
                                        var tableLength145 = outputTable140.rows.length;
                                        for (var x145=0; x145 < tableLength145; x145++) {
                                            var row145 = outputTable140.rows[x145];
                                        	var standAlone145 = row145.standAlone;
                                        	var name = row145.name;
                                        	if (name === thingName) {
                                        		standAlone145 = 2;
                                        	}	
                                            outputTable145.AddRow({
                                                from:row145.from,
                                                to:row145.to,
                                                name:row145.name,
                                                type:row145.type,
                                                displayName:row145.displayName,
                                                sort:row145.sort,
                                                tabValue:row145.tabValue,
                                                standAlone:standAlone145,
                                        		thingIndex:0,
                                        		parentID:row145.parentID,
                                        		childID:row145.childID
                                            });    
                                        }
                                        
                                        // #150. resort
                                        logger.debug("getKBorg, #150 start");
                                        var sort = new Object();
                                        sort.name = "sort";
                                        sort.ascending = true;
                                        outputTable145.Sort(sort);
                                        
                                        // #155. add thingIndex
                                        logger.debug("getKBorg, #155 start");
                                        var thingIndex = 0;
                                        //var outputTable155 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params155);
                                        var tableLength155 = outputTable145.rows.length;
                                        for (var x155=0; x155 < tableLength155; x155++) {
                                            var row155 = outputTable145.rows[x155];
                                            if (row155.displayName === thingName) {
                                            	thingIndex = x155+1;
                                            }
                                        }
                                        
                                        var params156 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBOrgDataShape"
                                        };
                                        var outputTable156 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params156);
                                        var tableLength156 = outputTable145.rows.length;
                                        for (var x156=0; x156 < tableLength156; x156++) {
                                            var row156 = outputTable145.rows[x156];
                                            outputTable156.AddRow({
                                                from:row156.from,
                                                to:row156.to,
                                                name:row156.name,
                                                type:row156.type,
                                                displayName:row156.displayName,
                                                sort:row156.sort,
                                                tabValue:row156.tabValue,
                                                standAlone:row156.standAlone,
                                        		thingIndex:thingIndex,
                                        		parentID:row156.parentID,
                                        		childID:row156.childID
                                            });   	
                                        }
                                        
                                        // #160. output
                                        logger.debug("getKBorg, #160 start");
                                        var result = outputTable156;
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="getKBorgTryCatch">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBOrgDataShape"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var errorTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        errorTable.AddRow({
                                            from:"",
                                            to:"",
                                            name:"",
                                            type:"New",
                                            displayName:"Failed to get data, pls submit Service Ticket for help!",
                                            sort:"",
                                            tabValue:"",
                                            standAlone:0,
                                            thingIndex:0
                                        });  
                                        
                                        try {
                                        	outputTable = me.getKBorg({
                                        		thingName: thingName
                                        });
                                        } catch(err) {
                                        	outputTable = errorTable;
                                        }
                                        
                                        var result = outputTable;
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="getNewThingTypeList">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBOrgThingType"
                                        };
                                        var tempTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        tempTable.AddRow({
                                        	displayName: "Area",
                                            thingType: "Area"
                                        });
                                        
                                        tempTable.AddRow({
                                        	displayName: "Company",
                                            thingType: "Company"
                                        });
                                        
                                        tempTable.AddRow({
                                        	displayName: "Country",
                                            thingType: "Country"
                                        });
                                        
                                        tempTable.AddRow({
                                        	displayName: "Division",
                                            thingType: "Division"
                                        });
                                        
                                        tempTable.AddRow({
                                        	displayName: "Machine/Line",
                                            thingType: "Machine"
                                        });
                                        
                                        tempTable.AddRow({
                                        	displayName: "Meskit Station",
                                            thingType: "MeskitStation"
                                        });
                                        
                                        tempTable.AddRow({
                                        	displayName: "Plant",
                                            thingType: "Plant"
                                        });
                                        
                                        tempTable.AddRow({
                                        	displayName: "Region",
                                            thingType: "Region"
                                        });
                                        
                                        tempTable.AddRow({
                                        	displayName: "Station",
                                            thingType: "Station"
                                        });
                                        
                                        var result = tempTable;
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="getTabDataFromTree">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        //getTabDataFromTree
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBOrgTabInfoDataShape"
                                        };
                                        var tempTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var tabValue = treeRow.rows[0].tabValue;
                                        var thingName = treeRow.rows[0].displayName;
                                        var thingType = treeRow.rows[0].type;
                                        
                                        var stationName = "Select Station in left side Tree View!!!";
                                        var machineName = "Select Machine in left side Tree View!!!";
                                        var areaName = "Select Area in left side Tree View!!!";
                                        var plantName = "Select Plant in left side Tree View!!!";
                                        var countryName = "Select Country in left side Tree View!!!";
                                        var companyName = "Select Company in left side Tree View!!!";
                                        var divisionName = "Select Division in left side Tree View!!!";
                                        var regionName = "Select Region in left side Tree View!!!";
                                        
                                        var stationTabVisible = false;
                                        var machineTabVisible = false;
                                        var areaTabVisible = false;
                                        var plantTabVisible = false;
                                        var countryTabVisible = false;
                                        var companyTabVisible = false;
                                        var divisionTabVisible = false;
                                        var regionTabVisible = false;
                                        
                                        if(thingType==="Station") {
                                            stationName = thingName;
                                            stationTabVisible = true;
                                        }
                                        if(thingType==="Machine") {
                                            machineName = thingName;
                                            machineTabVisible = true;
                                        }
                                        if(thingType==="Area") {
                                            areaName = thingName;
                                            areaTabVisible = true;
                                        }
                                        if(thingType==="Plant") {
                                            plantName = thingName;
                                            plantTabVisible = true;
                                        }
                                        if(thingType==="Country") {
                                            countryName = thingName;
                                            countryTabVisible = true;
                                        }
                                        if(thingType==="Company") {
                                            companyName = thingName;
                                            companyTabVisible = true;
                                        }
                                        if(thingType==="Division") {
                                            divisionName = thingName;
                                            divisionTabVisible = true;
                                        }
                                        if(thingType==="Region") {
                                            regionName = thingName;
                                            regionTabVisible = true;
                                        }
                                        //logger.debug("getTabDataFromTree, thingType=" + thingType);
                                        //logger.debug("getTabDataFromTree, CountryName=" + CountryName);
                                        
                                        tempTable.AddRow({
                                        	tabValue: tabValue,
                                            thingName: thingName,
                                            stationName: stationName,
                                            machineName: machineName,
                                            areaName: areaName,
                                            plantName: plantName,
                                            countryName: countryName,
                                        	companyName: companyName,
                                        	divisionName: divisionName,
                                        	regionName: regionName,
                                        	stationTabVisible: stationTabVisible,
                                        	machineTabVisible: machineTabVisible,
                                        	areaTabVisible: areaTabVisible,
                                        	plantTabVisible: plantTabVisible,
                                        	countryTabVisible: countryTabVisible,
                                        	companyTabVisible: companyTabVisible,
                                        	divisionTabVisible: divisionTabVisible,
                                        	regionTabVisible: regionTabVisible	
                                        });
                                        
                                        var result = tempTable;
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="getThingSeqIdByNameFromList">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var i = 1; // for output
                                        var f = true; // flag
                                        
                                        if(thingName === undefined) {f = false;}
                                        if(thingName === "") {f = false;}
                                        
                                        if(f===true) {
                                            var tableLength = thingList.rows.length;
                                            for (var x=0; x < tableLength; x++) {
                                                var row = thingList.rows[x];
                                                var name = row.name;
                                                var macname = row.MachineThingName;
                                                var areaname = row.KBAreaThing;
                                                if((name === thingName)||(macname === thingName)||(areaname === thingName)) {i = x+1;}
                                                //if(macname === thingName) {i = x+1;}
                                                //Your code here
                                            }
                                        }
                                        
                                        var result = i;
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script"
						name="InstallsmartProductionConfigurationTileConsole">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var values = Things["KB.Administration.TileConsole.DataTable"].CreateValues();
                                        
                                        values.Context = "PTC:factory-mv;PTC:FactoryAdministration"; //TAGS
                                        values.TileBackground = "PTC.DarkBlue"; //STRING
                                        values.InAppSwitcher = false; //BOOLEAN
                                        values.TileIcon = "KB.AdministrationLevel2.Icon"; //STRING
                                        values.LocalizedLabel = "smartProduction Configuration"; //TEXT
                                        values.InConvergeConsole = false; //BOOLEAN
                                        values.TileMashupOrURL = "KBThingAdminMashup"; //STRING
                                        values.TileTooltip = ""; //
                                        values.TileLabel = "smartProduction Configuration"
                                        values.TileOrder = 301; //INTEGER [Primary Key]
                                        values.IsMashup = true; //BOOLEAN
                                        values.OpenInNewWindow = false;
                                        values.key = 301; //STRING
                                        
                                        var params = {
                                        	sourceType: undefined /* STRING */,
                                        	values: values /* INFOTABLE*/,
                                        	location: undefined /* LOCATION */,
                                        	source: undefined /* STRING */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: STRING
                                        var id = Things["KB.LocalAdministration.TileConsole.DataTable"].AddOrUpdateDataTableEntry(params);
                                        var id = Things["KB.Administration.TileConsole.DataTable"].AddOrUpdateDataTableEntry(params);
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="isThingNotFullyCombined">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        // isThingNotFullyCombined, 1 = not fully combined
                                        var result = 0;
                                        var isStationNotFullyCombined = false;
                                        var isMachineNotFullyCombined = false;
                                        var isAreaNotFullyCombined = false;
                                        var isPlantNotFullyCombined = false;
                                        var isCompanyNotFullyCombined = false;
                                        var isDivisionNotFullyCombined = false;
                                        var isCountryNotFullyCombined = false;
                                        
                                        var stationThingName = "";
                                        var machineThingName = "";
                                        var areaThingName = "";
                                        var plantThingName = "";
                                        var countryThingName = "";
                                        var plant = "";
                                        var country = "";
                                        var company = "";
                                        var devision = "";
                                        var region = "";
                                        
                                        // #10. Check Station
                                        if(thingType==="Station") {
                                        	stationThingName = thingName;
                                        	machineThingName = "=" + Things[stationThingName].KBLocalLineThing;
                                        	if(machineThingName === "=") {isStationNotFullyCombined = true;}
                                        }
                                        
                                        // #20. Check Machine
                                        // check if found machine under any area
                                        if(thingType==="Machine") {
                                        	machineThingName = thingName;
                                            //logger.debug("isThingNotFullyCombined, machineThingName = " + machineThingName);
                                        	//var mainStation = "";
                                        	//mainStation = "=" + Things[machineThingName].MainStationForLineStatus;
                                        	//if(mainStation === "=") {isMachineNotFullyCombined = true;}
                                        	var areaList = ThingTemplates["KBLocalAreaThingTemplate"].GetImplementingThings();
                                        	var areaNum = areaList.rows.length;
                                        	var areaName = "";	
                                        	isMachineNotFullyCombined = true;
                                        	for (var x20=0; x20 < areaNum; x20++) {
                                        		var row20 = areaList.rows[x20];
                                        		areaName = row20.name;
                                        		var machineList = Things[areaName].KBMachineThings;	
                                        		var params20 = {
                                        		fieldName: "KBMachineThing" , // STRING ,
                                        		isCaseSensitive: false , // BOOLEAN,
                                        		t: machineList , // INFOTABLE
                                        		value: machineThingName , // STRING 
                                        		};
                                        		var linenameFound = Resources["InfoTableFunctions"].EQFilter(params20).rows.length;		
                                        		if (linenameFound > 0) {isMachineNotFullyCombined = false;}	
                                        	}	
                                        }
                                        
                                        // #30. Check Area
                                        if(thingType==="Area") {
                                        	areaThingName = thingName;
                                        	// check plant combinding
                                        	plant = "=" + Things[areaThingName].KBPlantThing;
                                        	var plantCombined = false;
                                        	if(plant === "=") {plantCombined = true;}
                                        	// check machines combinding
                                        	var machinesCount = Things[areaThingName].KBMachineThings.getRowCount();
                                        	var machinesCombined = false;
                                        	if(machinesCount===0) {machinesCombined = true;}
                                        	if(plantCombined||machinesCombined) {isAreaNotFullyCombined = true;}		
                                        }
                                        
                                        // #40. Check Plant
                                        if(thingType==="Plant") {
                                        	plantThingName = thingName;
                                        	// check country combinding
                                        	country = "=" + Things[plantThingName].KBCountryThing;
                                        	var countryCombined = false;
                                        	if(country === "=") {countryCombined = true;}
                                        	// check company combinding
                                        	company = "=" + Things[plantThingName].KBCompanyThing;
                                        	var companyCombined = false;
                                        	if(company === "=") {companyCombined = true;}
                                        	// check devision combinding
                                        	devision = "=" + Things[plantThingName].KBDevisionThing;
                                        	var devisionCombined = false;
                                        	if(devision === "=") {devisionCombined = true;}
                                        	if(countryCombined||companyCombined||devisionCombined) {isPlantNotFullyCombined = true;}		
                                        }
                                        
                                        // #50. Check Company
                                        // list out all company and check if they are under any plant
                                        if(thingType==="Company") {
                                        	companyThingName = thingName;	
                                            //logger.debug("isThingNotFullyCombined, companyThingName = " + companyThingName);
                                        	var plantList = ThingTemplates["KBLocalPlantThingTemplate"].GetImplementingThings();
                                        	var plantNum = plantList.rows.length;
                                        	var plantName = "";	
                                        	isCompanyNotFullyCombined = true;
                                        	for (var x50=0; x50 < plantNum; x50++) {
                                        		var row50 = plantList.rows[x50];
                                        		plantName = row50.name;
                                        		//logger.debug("isThingNotFullyCombined, plantName = " + plantName);
                                        		var companyName = Things[plantName].KBCompanyThing;		
                                        		//logger.debug("isThingNotFullyCombined, companyName = " + companyName);
                                        		if (companyName == companyThingName) {isCompanyNotFullyCombined = false;}	
                                        	}	
                                        }
                                        
                                        // #60. Check Devision
                                        // list out all division and check if they are under any plant
                                        if(thingType==="Division") {
                                        	divisionThingName = thingName;	
                                            //logger.debug("isThingNotFullyCombined, divisionThingName = " + divisionThingName);
                                        	var plantList = ThingTemplates["KBLocalPlantThingTemplate"].GetImplementingThings();
                                        	var plantNum = plantList.rows.length;
                                        	var plantName = "";	
                                        	isDivisionNotFullyCombined = true;
                                        	for (var x60=0; x60 < plantNum; x60++) {
                                        		var row60 = plantList.rows[x60];
                                        		plantName = row60.name;
                                        		//logger.debug("isThingNotFullyCombined, plantName = " + plantName);
                                        		var divisionName = Things[plantName].KBDivisionThing;		
                                        		//logger.debug("isThingNotFullyCombined, divisionName = " + divisionName);
                                        		if (divisionName == divisionThingName) {isDivisionNotFullyCombined = false;}	
                                        	}	
                                        }
                                        
                                        // #70. Check Country
                                        if(thingType==="Country") {
                                        	//logger.debug("isThingNotFullyCombined, thingType=Country");
                                        	countryThingName = thingName;
                                        	//logger.debug("isThingNotFullyCombined, countryThingName=" + countryThingName);
                                        	// check region combinding
                                        	region = "=" + Things[countryThingName].KBRegionThing;
                                        	if(region === "=") {isCountryNotFullyCombined = true;}	
                                        }
                                        
                                        // #80. Check Region, not required
                                        
                                        if(isStationNotFullyCombined||isMachineNotFullyCombined||isAreaNotFullyCombined||isPlantNotFullyCombined||isCompanyNotFullyCombined||isDivisionNotFullyCombined||isCountryNotFullyCombined) {result = 1;}
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
						handlerName="Script" name="removeMachineFromArea">
						<ConfigurationTables>
							<ConfigurationTable description=""
								isMultiRow="false" name="Script" ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
											description="code" name="code" ordinal="0"></FieldDefinition>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBAreaMachineDataShape"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var tempList = Things[areaThingName].KBMachineThings;
                                        //outputTable = tempList;
                                        //var machine1 = "";
                                        //machine1 = machine2remove.KBMachineThing;
                                        
                                        logger.debug("removeMachineFromArea, OriginMachineList="+tempList.ToJSON());
                                        //logger.debug("removeMachineFromArea, outputTable="+outputTable.ToJSON());
                                        logger.debug("removeMachineFromArea, machine1="+machine1);
                                        
                                        //var params = {
                                        //	t1: currentMachineList /* INFOTABLE */
                                        //};
                                        //var outputTable = Resources["InfoTableFunctions"].Clone(params);
                                        
                                        var tableLength = tempList.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = tempList.rows[x];
                                            //var machine0 = "";
                                        	var machine0 = row.KBMachineThing;
                                        	logger.debug("removeMachineFromArea, machine0="+machine0);
                                            if(machine0 !== machine1) {
                                                outputTable.AddRow({
                                                  KBMachineThing:machine0
                                                });
                                             }
                                        }
                                        
                                        logger.debug("removeMachineFromArea, outputTable="+outputTable.ToJSON());
                                        //var result = outputTable;
                                        Things[areaThingName].KBMachineThings = outputTable;
                                        ]]>
										</code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
				</ServiceImplementations>
				<Subscriptions>
					<Subscription description="" enabled="true"
						eventName="ThingStart" name="Event.ThingStart" source=""
						sourceProperty="" sourceType="Thing">
						<ServiceImplementation description=""
							handlerName="Script" name="Event.ThingStart">
							<ConfigurationTables>
								<ConfigurationTable description=""
									isMultiRow="false" name="Script" ordinal="0">
									<DataShape>
										<FieldDefinitions>
											<FieldDefinition baseType="STRING"
												description="code" name="code" ordinal="0"></FieldDefinition>
										</FieldDefinitions>
									</DataShape>
									<Rows>
										<Row>
											<code>
                                            <![CDATA[
                                            me.Autostart();
                                            ]]>
											</code>
										</Row>
									</Rows>
								</ConfigurationTable>
							</ConfigurationTables>
						</ServiceImplementation>
					</Subscription>
				</Subscriptions>
			</ThingShape>
			<PropertyBindings></PropertyBindings>
			<RemotePropertyBindings></RemotePropertyBindings>
			<RemoteServiceBindings></RemoteServiceBindings>
			<RemoteEventBindings></RemoteEventBindings>
			<AlertConfigurations></AlertConfigurations>
			<ImplementedShapes></ImplementedShapes>
			<ThingProperties></ThingProperties>
		</Thing>
	</Things>
</Entities>
