<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Entities build="b706"
          majorVersion="9"
          minorVersion="0"
          modelPersistenceProviderPackage="MssqlPersistenceProviderPackage"
          revision="12"
          schemaVersion="1109"
          universal="">
	<Things>
		<Thing description=""
		       documentationContent=""
		       effectiveThingPackage="ConfiguredThing"
		       enabled="true"
		       homeMashup=""
		       identifier=""
		       inheritedValueStream=""
		       lastModifiedDate="2022-09-20T03:52:20.146Z"
		       name="KBSmartKPIHelperThing"
		       projectName="KBsmartKPI"
		       published="false"
		       tags="KBThingWorxInstallationVocabulary:ExtensionSmartKPI"
		       thingTemplate="KBGenericThingTemplate"
		       valueStream="">
			<Owner name="adm-srivastn"
			       type="User"/>
			<avatar/>
			<DesignTimePermissions>
				<Create/>
				<Read>
					<Principal isPermitted="true"
					           name="KBMesKitHelperUser"
					           type="User"/>
				</Read>
				<Update/>
				<Delete/>
				<Metadata/>
			</DesignTimePermissions>
			<RunTimePermissions>
				<Permissions resourceName="GetCVSTimeBasePeriodDates">
					<PropertyRead/>
					<PropertyWrite/>
					<ServiceInvoke>
						<Principal isPermitted="true"
						           name="KBMesKitHelperUser"
						           type="User"/>
					</ServiceInvoke>
					<EventInvoke/>
					<EventSubscribe/>
				</Permissions>
				<Permissions resourceName="PartsAtLineForVisualisation">
					<PropertyRead/>
					<PropertyWrite/>
					<ServiceInvoke>
						<Principal isPermitted="true"
						           name="KBMesKitHelperUser"
						           type="User"/>
					</ServiceInvoke>
					<EventInvoke/>
					<EventSubscribe/>
				</Permissions>
				<Permissions resourceName="GetKPITruckFromInfoTable">
					<PropertyRead/>
					<PropertyWrite/>
					<ServiceInvoke>
						<Principal isPermitted="true"
						           name="KBMesKitHelperUser"
						           type="User"/>
					</ServiceInvoke>
					<EventInvoke/>
					<EventSubscribe/>
				</Permissions>
				<Permissions resourceName="*">
					<PropertyRead>
						<Principal isPermitted="true"
						           
						           name="KBMachineOperatorUserGroup"
						           type="Group"/>
						<Principal isPermitted="true"
						           name="KBUserGroup"
						           type="Group"/>
					</PropertyRead>
					<PropertyWrite>
						
					</PropertyWrite>
					<ServiceInvoke>
						
						<Principal isPermitted="true"
						           name="KBMachineOperatorUserGroup"
						           type="Group"/>
						<Principal isPermitted="true"
						           name="KBUserGroup"
						           type="Group"/>
					</ServiceInvoke>
					<EventInvoke>
						
					</EventInvoke>
					<EventSubscribe/>
				</Permissions>
				<Permissions resourceName="ActualStatusColor">
					<PropertyRead/>
					<PropertyWrite/>
					<ServiceInvoke>
						<Principal isPermitted="true"
						           name="KBMesKitHelperUser"
						           type="User"/>
					</ServiceInvoke>
					<EventInvoke/>
					<EventSubscribe/>
				</Permissions>
			</RunTimePermissions>
			<VisibilityPermissions>
				<Visibility>
					<Principal isPermitted="true"
					           name="KBBackGroundWorker"
					           type="Organization"/>
					<Principal isPermitted="true"
					           name="KBOrganization"
					           type="Organization"/>
				</Visibility>
			</VisibilityPermissions>
			<ConfigurationTableDefinitions/>
			<ConfigurationTables/>
			<ThingShape>
				<PropertyDefinitions/>
				<ServiceDefinitions>

                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetStationCounterForOutput">
                        <ResultType
                         aspect.dataShape="KBKPIStationCounterOutputDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="StationList"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="StationPartsData"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
				
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMachineListWithTime">
                        <ResultType
                         aspect.dataShape="KPKPIMachineInfoWithTimeDS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Area"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="KPICalculationBase"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="NUMBER"
                             description=""
                             name="Offset"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Plant"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="SelectedMachineThing"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>						
				
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetGlobalThingworxUrl">
						<ResultType baseType="STRING"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="ActualStatusColor">
						<ResultType aspect.dataShape="KBActualTargetDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="INTEGER"
							                 description=""
							                 name="Actual"
							                 ordinal="1"/>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="INTEGER"
							                 description=""
							                 name="Target"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetAllKpiDataForRailForVisualization">
						<ResultType aspect.dataShape="KBKpiSummaryShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 aspect.isRequired="true"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="KBKpiSummary"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetAllPlantsList">
						<ResultType aspect.dataShape="KBAllPlantsNameDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetAllStationsWithData">
						<ResultType aspect.dataShape="KBStationThingDataPropertyShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetAreaFooterData">
						<ResultType aspect.dataShape="KBProductionAdvisorDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Area"
							                 ordinal="1"/>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="EndDate"
							                 ordinal="3"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Machine"
							                 ordinal="4"/>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="StartDate"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetAreaMachinesForProductionAdvisor">
						<ResultType aspect.dataShape="KBMachinesForProductionAdvisorDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.thingTemplate="KBLocalAreaThingTemplate"
							                 baseType="THINGNAME"
							                 description=""
							                 name="Area"
							                 ordinal="3"/>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="STRING"
							                 description=""
							                 name="KPICalculationBase"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category="RQ"
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetAreasforSmartKPIVisualization">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.thingTemplate="KBLocalPlantThingTemplate"
							                 baseType="THINGNAME"
							                 description=""
							                 name="KBPlantThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetCompleteAreaFooterData">
						<ResultType aspect.dataShape="KBProductionAdvisorDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Area"
							                 ordinal="1"/>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="EndDate"
							                 ordinal="3"/>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="StartDate"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetCVSAssetAdvisorKpiCalculationBaseForMenue">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Language"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetCVSGlobalKpiCalculationBaseForMenue">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Language"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetCVSMachineProcessingDeviationData">
						<ResultType aspect.dataShape="KBCVSDeviationDS"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="EndTime"
							                 ordinal="3"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Machine"
							                 ordinal="1"/>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="StartTime"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetCVSMachinesForProductionAdvisor">
						<ResultType aspect.dataShape="KBMachinesForProductionAdvisorDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="STRING"
							                 description=""
							                 name="Area"
							                 ordinal="4"/>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="DATETIME"
							                 description=""
							                 name="EndDate"
							                 ordinal="3"/>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="STRING"
							                 description=""
							                 name="KPICalculationBase"
							                 ordinal="1"/>
							<FieldDefinition aspect.defaultValue="0.0"
							                 aspect.isRequired="true"
							                 baseType="NUMBER"
							                 description=""
							                 name="Offset"
							                 ordinal="5"/>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="DATETIME"
							                 description=""
							                 name="StartDate"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetCVSMachinesForProductionAdvisor2">
						<ResultType baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="STRING"
							                 description=""
							                 name="Area"
							                 ordinal="4"/>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="DATETIME"
							                 description=""
							                 name="EndDate"
							                 ordinal="3"/>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="STRING"
							                 description=""
							                 name="KPICalculationBase"
							                 ordinal="1"/>
							<FieldDefinition aspect.defaultValue="0.0"
							                 aspect.isRequired="true"
							                 baseType="NUMBER"
							                 description=""
							                 name="Offset"
							                 ordinal="5"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Plant"
							                 ordinal="6"/>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="DATETIME"
							                 description=""
							                 name="StartDate"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetCVSMachinesForProductionAdvisor3">
						<ResultType aspect.dataShape="KBMachinesForProductionAdvisorDataShape2"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="STRING"
							                 description=""
							                 name="Area"
							                 ordinal="4"/>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="DATETIME"
							                 description=""
							                 name="EndDate"
							                 ordinal="3"/>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="STRING"
							                 description=""
							                 name="KPICalculationBase"
							                 ordinal="1"/>
							<FieldDefinition aspect.defaultValue="0.0"
							                 aspect.isRequired="true"
							                 baseType="NUMBER"
							                 description=""
							                 name="Offset"
							                 ordinal="5"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Plant"
							                 ordinal="6"/>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="DATETIME"
							                 description=""
							                 name="StartDate"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetCVSProductionDeviationDataFromSnowFlake">
						<ResultType aspect.dataShape="KBCVSDeviationDS"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="EndDate"
							                 ordinal="4"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="MachineThing"
							                 ordinal="1"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="SourceSystem"
							                 ordinal="2"/>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="StartDate"
							                 ordinal="3"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetCVSTimeBasePeriodDates">
						<ResultType aspect.dataShape="PeriodStartEndDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="KPICalculationBase"
							                 ordinal="4"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Machine"
							                 ordinal="2"/>
							<FieldDefinition baseType="NUMBER"
							                 description=""
							                 name="Offset"
							                 ordinal="1"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Plant"
							                 ordinal="3"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetDataForMachineAdminMashup">
						<ResultType aspect.dataShape="KBMachineAdminDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetDataForStationAdminMashup">
						<ResultType aspect.dataShape="KBStationAdminDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetDefaultStationForTimeBase">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="KBLocalLineThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetDMSItemsForMenue">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetGlobalKpisForMenue">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetKpiIoNioLimitsForBars">
						<ResultType aspect.dataShape="KBKpiSummaryShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="KBKpiSummaryShape1"
							                 ordinal="1"/>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="KBKpiSummaryShape2"
							                 ordinal="2"/>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="KBKpiSummaryShape3"
							                 ordinal="3"/>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="KBKpiSummaryShape4"
							                 ordinal="4"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetKpiLimitsForBars">
						<ResultType aspect.dataShape="KBKpiSummaryShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="KBKpiSummaryShape1"
							                 ordinal="1"/>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="KBKpiSummaryShape2"
							                 ordinal="2"/>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="KBKpiSummaryShape3"
							                 ordinal="3"/>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="KBKpiSummaryShape4"
							                 ordinal="4"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetKPIRailFromInfoTable">
						<ResultType baseType="NUMBER"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="AllKPIsRailInfoTable"
							                 ordinal="1"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="KPIName"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetKPITruckFromInfoTable">
						<ResultType baseType="NUMBER"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="AllKPIsTruckInfoTable"
							                 ordinal="1"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="KPIName"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetListOfMachinesForPlant">
						<ResultType aspect.dataShape="KBActiveMachinesForPlant"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Plant"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category="RQ"
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetLocalAreasforSmartKPIVisualization">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.thingTemplate="KBLocalPlantThingTemplate"
							                 baseType="THINGNAME"
							                 description=""
							                 name="KBPlantThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category="RQ"
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetLocalCVSAreasforProductionAdvisor">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetLocalMachinesforSmartKPIVisualization">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="AreaThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetLocalMachinesList">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Division"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetLocalPlantsforSmartKPIVisualization">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="true"
							                 aspect.thingTemplate="KBLocalDivisionThingTemplate"
							                 baseType="STRING"
							                 description=""
							                 name="KBDivisionThingName"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetLocalStationForTimeBase">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="BaseStationByOpeartor"
							                 ordinal="2"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="KBLocalLineThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMachinesforSmartKPIVisualization">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="AreaThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMainStationsFromMachineInfotable">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBNameForMenuDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="MachinesSelected"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMultiselctLast30KpiTruck">
						<ResultType aspect.dataShape="KBKpiMultiSelectDataShapeForTimeSeries"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Machine"
							                 ordinal="2"/>
							<FieldDefinition aspect.dataShape="KBNameForMenuDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="SelectedKPIList"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMultiselctTop3KpiTruckDataDay">
						<ResultType aspect.dataShape="KBKpiMultiSelectDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Machine"
							                 ordinal="2"/>
							<FieldDefinition aspect.dataShape="KBNameForMenuDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="SelectedKPIList"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMultiselctTop3KpiTruckMonth">
						<ResultType aspect.dataShape="KBKpiMultiSelectDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Machine"
							                 ordinal="2"/>
							<FieldDefinition aspect.dataShape="KBNameForMenuDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="SelectedKPIList"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMultiselctTop3KpiTruckWeek">
						<ResultType aspect.dataShape="KBKpiMultiSelectDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Machine"
							                 ordinal="2"/>
							<FieldDefinition aspect.dataShape="KBNameForMenuDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="SelectedKPIList"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMultiselctTop3KpiTruckYear">
						<ResultType aspect.dataShape="KBKpiMultiSelectDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Machine"
							                 ordinal="2"/>
							<FieldDefinition aspect.dataShape="KBNameForMenuDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="SelectedKPIList"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMultistationAndon1stStation">
						<ResultType aspect.dataShape="KBMachineStationDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="MachineThing"
							                 ordinal="2"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="StationThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMultistationAndonStations">
						<ResultType aspect.dataShape="KBMachineStationDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="MachineThing"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetNextUpdateTimeInMin">
						<ResultType baseType="NUMBER"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetParetoLossesListSum">
						<ResultType aspect.dataShape="KBTimeLossDBDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Language"
							                 ordinal="2"/>
							<FieldDefinition aspect.dataShape="KBTimeLossDBDataShape2"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="LossesInfotable"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetPlantsforSmartKPIVisualization">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="true"
							                 aspect.thingTemplate="KBLocalDivisionThingTemplate"
							                 baseType="STRING"
							                 description=""
							                 name="KBDivisionThingName"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetRailGlobalKpiCalculationBaseForMenue">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetRailGlobalKpisForMenue">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetRailLocalKpisForMenue">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetRailMachinesForProductionAdvisor">
						<ResultType aspect.dataShape="KBMachinesForProductionAdvisorDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="STRING"
							                 description=""
							                 name="Area"
							                 ordinal="4"/>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="DATETIME"
							                 description=""
							                 name="EndDate"
							                 ordinal="3"/>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="STRING"
							                 description=""
							                 name="KPICalculationBase"
							                 ordinal="1"/>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="DATETIME"
							                 description=""
							                 name="StartDate"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetStationForTimeBaseFromOperator">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBNameForMenuDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="SelectedStationsFromOperator"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetStationInfotableFromSelectedStations">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBNameForMenuDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="StationsSelected"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="getStationListFromMachine">
						<ResultType baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.thingTemplate="KBLocalMachineThingTemplate"
							                 baseType="THINGNAME"
							                 description=""
							                 name="machineThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="getStationListFromMachine_legacy">
						<ResultType aspect.dataShape="KBStationThingWithNameDS"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.thingTemplate="KBLocalMachineThingTemplate"
							                 baseType="THINGNAME"
							                 description=""
							                 name="machineThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetStationsForTimeLossVisualization">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetStationsFromMachinesInfotable">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBNameForMenuDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="MachinesSelected"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetTimeLossesDetailed">
						<ResultType aspect.dataShape="KBTimeLossDBDataShape2"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Category"
							                 ordinal="3"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Level"
							                 ordinal="2"/>
							<FieldDefinition aspect.dataShape="KBTimeLossDBDataShape2"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="TimeLossesInfotable"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetTimeLossesMashupName">
						<ResultType aspect.dataShape="KBNameForMashupDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="BOOLEAN"
							                 description=""
							                 name="showGantt"
							                 ordinal="2"/>
							<FieldDefinition baseType="BOOLEAN"
							                 description=""
							                 name="showTableView"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetTimeLossesSum">
						<ResultType aspect.dataShape="KBTimeLossDBDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="EndTime"
							                 ordinal="4"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Language"
							                 ordinal="6"/>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="StartTime"
							                 ordinal="3"/>
							<FieldDefinition aspect.dataShape="KBTimeLossDBDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="TimeLossesActualInfoTable"
							                 ordinal="6"/>
							<FieldDefinition aspect.dataShape="KBTimeLossDBDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="TimeLossesDowntimesInfoTable"
							                 ordinal="5"/>
							<FieldDefinition aspect.dataShape="KBTimeLossDBDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="TimeLossesInfoTable"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetTruckGlobalKpisForMenue">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetTruckLocalKpisForMenue">
						<ResultType aspect.dataShape="KBNameForMenuDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="InfotableToExcel">
						<ResultType baseType="HYPERLINK"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="ExportInfotable"
							                 ordinal="1"/>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="STRING"
							                 description=""
							                 name="FileName"
							                 ordinal="2"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="SheetName"
							                 ordinal="3"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="IsVisualizationTabVisible">
						<ResultType baseType="BOOLEAN"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="MachineName"
							                 ordinal="2"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="TabName"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="KBKpiSummaryShapeSorting">
						<ResultType aspect.dataShape="KBKpiSummaryShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBKpiSummaryShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="KBKpiSummaryShape"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="migrateMachinesStationList">
						<ResultType baseType="NOTHING"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions/>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="OvertakeTimeLossesInfotable">
						<ResultType aspect.dataShape="KBTimeLossDBDataShape2"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBTimeLossDBDataShape2"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="TimeLossesInfotable"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="PartsAtLineForVisualisation">
						<ResultType aspect.dataShape="KBIndexedPartsAtLineDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Machine"
							                 ordinal="1"/>
							<FieldDefinition aspect.dataShape="KBPartsAtLineDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="PartsAtLineInfoTable"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="SplitAreaFooterInfoTable">
						<ResultType aspect.dataShape="KBProductionAdvisorFooterDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.dataShape="KBProductionAdvisorFooterDataShape"
							                 baseType="INFOTABLE"
							                 description=""
							                 name="Footer"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="updateMachinesStationList">
						<ResultType baseType="NOTHING"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.thingTemplate="KBLocalMachineThingTemplate"
							                 baseType="THINGNAME"
							                 description=""
							                 name="newMachineThing"
							                 ordinal="3"/>
							<FieldDefinition aspect.thingTemplate="KBLocalStationThingTemplate"
							                 baseType="THINGNAME"
							                 description=""
							                 name="stationThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="writeInfotableToRessource">
						<ResultType baseType="STRING"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="INFOTABLE"
							                 description=""
							                 name="infotable"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMultistationAndonStations">
						<ResultType aspect.dataShape="KBMachineStationDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="MachineThing"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetMultistationAndon1stStation">
						<ResultType aspect.dataShape="KBMachineStationDataShape"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="MachineThing"
							                 ordinal="2"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="StationThing"
							                 ordinal="1"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetSumOfPartsPerMachineAndTime">
						<ResultType baseType="NUMBER"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="EndTime"
							                 ordinal="3"/>
							<FieldDefinition baseType="BOOLEAN"
							                 description=""
							                 name="IsPartOK"
							                 ordinal="4"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Machine"
							                 ordinal="1"/>
							<FieldDefinition baseType="DATETIME"
							                 description=""
							                 name="StartTime"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
					<ServiceDefinition aspect.isAsync="false"
					                   category=""
					                   description=""
					                   isAllowOverride="false"
					                   isLocalOnly="false"
					                   isOpen="false"
					                   isPrivate="false"
					                   name="GetCVSMachinesForProductionAdvisor4">
						<ResultType aspect.dataShape="KBMachinesForProductionAdvisorDataShape2"
						            baseType="INFOTABLE"
						            description=""
						            name="result"
						            ordinal="0"/>
						<ParameterDefinitions>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="STRING"
							                 description=""
							                 name="Area"
							                 ordinal="4"/>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="DATETIME"
							                 description=""
							                 name="EndDate"
							                 ordinal="3"/>
							<FieldDefinition aspect.isRequired="true"
							                 baseType="STRING"
							                 description=""
							                 name="KPICalculationBase"
							                 ordinal="1"/>
							<FieldDefinition aspect.defaultValue="0.0"
							                 aspect.isRequired="true"
							                 baseType="NUMBER"
							                 description=""
							                 name="Offset"
							                 ordinal="5"/>
							<FieldDefinition baseType="STRING"
							                 description=""
							                 name="Plant"
							                 ordinal="6"/>
							<FieldDefinition aspect.isRequired="false"
							                 baseType="DATETIME"
							                 description=""
							                 name="StartDate"
							                 ordinal="2"/>
						</ParameterDefinitions>
					</ServiceDefinition>
				</ServiceDefinitions>
				<EventDefinitions/>
				<ServiceMappings/>
				<ServiceImplementations>				
                    
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetStationCounterForOutput">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        	var params = {
                                        		infoTableName : "InfoTable",
                                        		dataShapeName : "KBKPIStationCounterOutputDS"
                                        	};
                                        	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);	
                                        	var tableLength = StationList.rows.length;
                                        	for (var x=0; x < tableLength; x++) {
                                        		var row = StationList.rows[x];
                                        		var Station = row.ThingName;
                                        		var Station_Name = row.DisplayName;
                                        		var OK_QTY = 0;
                                        		var NOK_QTY = 0;
                                        		
                                        		var params1 = {
                                        		  fieldName: "Station" /* STRING */,
                                        		  isCaseSensitive: false /* BOOLEAN */,
                                        		  t: StationPartsData /* INFOTABLE */,
                                        		  value: Station /* STRING */
                                        		};
                                        		var stationFound = Resources["InfoTableFunctions"].EQFilter(params1).rows.length;		
                                        		if (stationFound > 0) {
                                        			OK_QTY = Resources["InfoTableFunctions"].EQFilter(params1).rows[0].OK_QTY;
                                        			NOK_QTY = Resources["InfoTableFunctions"].EQFilter(params1).rows[0].NOK_QTY;   
                                        		}	    
                                        		result.AddRow({
                                        			Station: Station,
                                        			Station_Name: Station_Name,
                                        			OK_QTY: OK_QTY,
                                        			NOK_QTY: NOK_QTY
                                        		});
                                        	}
                                        
                                        	var sort = new Object();
                                        	sort.name = "Station_Name";
                                        	sort.ascending = true;
                                        	result.Sort(sort);
                                        
                                        } catch(err) {
                                        	logger.error("KBSmartKPIHelperThing.GetStationCounterForOutput, Eroor!");
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>


                    
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMachineListWithTime">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // KBSmartKPIHelperThing.GetMachineListWithTime
                                        try {
                                            var params = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "KPKPIMachineInfoWithTimeDS"
                                            };
                                            var machineList2 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);   
                                            var machineList3 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params); 
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params); ;
                                            
                                        	var dateValue = new Date();
                                            var machineList = Things["KBSmartKPIHelperThing"].GetCVSMachinesForProductionAdvisor4({
                                                StartDate: dateValue /* DATETIME */,
                                                Area: Area /* STRING */,
                                                Plant: Plant /* STRING */,
                                                EndDate: dateValue /* DATETIME */,
                                                KPICalculationBase: KPICalculationBase /* STRING */,
                                                Offset: Offset /* NUMBER */
                                            });
                                            //var result = machineList;
                                            
                                            var tableLength = machineList.rows.length;
                                            for (var x=0; x < tableLength; x++) {
                                                var row = machineList.rows[x];
                                                var MachineDisplayName = Things[row.MachineThingName].DisplayName;                
                                                
                                                machineList2.AddRow({
                                                	UID: row.UID,
                                                    KPIDateTimeStart: row.KPIDateTimeStart,
                                                    KPIDateTimeEnd: row.KPIDateTimeEnd,
                                                    MachineThingName: row.MachineThingName,
                                                    KPICalculationBase: row.KPICalculationBase,
                                                    ShiftIterations: row.ShiftIterations,
                                                    Footer: row.Footer,
                                                    MachineDisplayName: MachineDisplayName
                                                });
                                            }
                                            
                                            var params2 = {
                                              fieldName: "MachineThingName" /* STRING */,
                                              isCaseSensitive: false /* BOOLEAN */,
                                              t: machineList2 /* INFOTABLE */,
                                              value: SelectedMachineThing /* STRING */
                                            };
                                            var searchResult = Resources["InfoTableFunctions"].EQFilter(params2);
                                            var machineFound = searchResult.rows.length;		
                                            if (machineFound > 0) {
                                                row3 = searchResult.rows[0];
                                                var startTime = row3.KPIDateTimeStart;
                                                var endTime = row3.KPIDateTimeEnd;
                                                if (KPICalculationBase === "Shift") {    
                                                    var shiftInfo = Things["KBKPILocalThingWorxDatabaseThing"].GetFullShiftTimeMinus({
                                                        date: dateValue /* DATETIME */,
                                                        Iterations: 0 - Offset /* INTEGER */,
                                                        Machine: SelectedMachineThing /* STRING */
                                                    });
                                                    startTime = shiftInfo.CurrentStartTime;
                                                    endTime = shiftInfo.CurrentEndTime;        	
                                                }
                                        
                                                machineList3.AddRow({
                                                	UID: row3.UID,
                                                    KPIDateTimeStart: startTime,
                                                    KPIDateTimeEnd: endTime,
                                                    MachineThingName: row3.MachineThingName,
                                                    KPICalculationBase: row3.KPICalculationBase,
                                                    ShiftIterations: row3.ShiftIterations,
                                                    Footer: row3.Footer,
                                                    MachineDisplayName: row3.MachineDisplayName        
                                                });
                                                result = machineList3;
                                            }	    
                                               
                                        } catch(err) {
                                        	logger.error("KBSmartKPIHelperThing.GetMachineListWithTime, Error!");
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>

				
				
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetGlobalThingworxUrl">
						<ConfigurationTables>
							<ConfigurationTable description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var URLsystem = Resources["KBThingWorxServerSystem"].GetStagingIdentifier();
if (URLsystem == "PROD") {
    URLsystem = "";
}

var result="https://smartproduction"+URLsystem+".corp.knorr-bremse.com/";
]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="ActualStatusColor">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBActualTargetDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBActualTargetDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

// KBActualTargetDataShape entry object
var newEntry = new Object();
newEntry.Target = Target; // NUMBER
newEntry.Percent = 0; // NUMBER
if (Target > 0) {
	newEntry.Percent = Actual/Target*100; // NUMBER    
}
newEntry.Actual = Actual; // NUMBER
newEntry.ActualAsInt = Actual; // INTEGER
newEntry.TargetAsInt = Target; // INTEGER
if (Actual >= Target) {
	newEntry.Color = "green";
} else {
	newEntry.Color = "red";
}


result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetAllKpiDataForRailForVisualization">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBKpiSummaryShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBKpiSummaryShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var tableLength = KBKpiSummary.rows.length;
for (var x=0; x < tableLength; x++) {
    var row = KBKpiSummary.rows[x];
    //Your code here
    // KBKpiSummaryShape entry object
    var newEntry = new Object();
    newEntry.KPI = row.KPI; // NUMBER
    newEntry.Label = row.Label; // STRING
    
	if (row.Label == "PlannedProduction") {
        newEntry.KPI4Visualization = "OEE 1.0: Planned Production"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "PlannedProductionIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Planned Production Time"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "PlannedProductionNIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Planning Loss"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "EfficiencyRail") {
        newEntry.KPI4Visualization = "OEE 1.0: Downtime"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "EfficiencyRailShiftAdjusted") {
        newEntry.KPI4Visualization = "OEE 1.0: Downtime Shift Adjusted"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "EfficiencyRailShiftAdjustedIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Operating Time Shift Adjusted"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "EfficiencyRailShiftAdjustedNIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Downtime Shift Adjusted"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "EfficiencyRailIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Operating Time"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "EfficiencyRailNIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Downtime"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "PerformanceRail") {
        newEntry.KPI4Visualization = "OEE 1.0: Speed Loss"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "PerformanceRailShiftAdjusted") {
        newEntry.KPI4Visualization = "OEE 1.0: Speed Loss Shift Adjusted"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "PerformanceRailProdAdjusted") {
        newEntry.KPI4Visualization = "OEE 1.0: Speed Loss Production Adjusted"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "PerformanceRailShiftProdAdjusted") {
        newEntry.KPI4Visualization = "OEE 1.0: Speed Loss Shift & Production Adjusted"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "PerformanceRailShiftProdAdjustedIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Net Operating Time Shift & Production Adjusted"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "PerformanceRailShiftProdAdjustedNIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Speed Loss Shift & Production Adjusted"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "RQ") {
        newEntry.KPI4Visualization = "OEE 1.0: RQ"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "OutputIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Output IO"; // STRING
        newEntry.Value4Visualization = row.KPI+" Parts"; // STRING
    } else if (row.Label == "OutputNIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Output NIO"; // STRING
        newEntry.Value4Visualization = row.KPI+" Parts"; // STRING
    } else if (row.Label == "RQIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Productive Time"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "RQNIO") {
        newEntry.KPI4Visualization = "OEE 1.0: Quality Loss"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "UtilizationRail") {
        newEntry.KPI4Visualization = "OEE 1.0: Utilization"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "OeeRail") {
        newEntry.KPI4Visualization = "OEE 1.0: OEE"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "CalendarTimeV2") {
        newEntry.KPI4Visualization = "OEE 2.0: Calendar Time"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "PlanningLossV2") {
        newEntry.KPI4Visualization = "OEE 2.0: Planning Loss"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "PlannedProductionTimeV2") {
        newEntry.KPI4Visualization = "OEE 2.0: Planned Production Time"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "DowntimeV2") {
        newEntry.KPI4Visualization = "OEE 2.0: Downtime"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "OperatingtimeV2") {
        newEntry.KPI4Visualization = "OEE 2.0: Operating Time"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "PerformanceLossV2") {
        newEntry.KPI4Visualization = "OEE 2.0: Performance Loss"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "NetOperatingtimeV2") {
        newEntry.KPI4Visualization = "OEE 2.0: NetOperating Time"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "QualityLossV2") {
        newEntry.KPI4Visualization = "OEE 2.0: Quality Loss"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "ProductiveTimeV2") {
        newEntry.KPI4Visualization = "OEE 2.0: Productive Time"; // STRING
        newEntry.Value4Visualization = row.KPI+"s"; // STRING
    } else if (row.Label == "OEEV2") {
        newEntry.KPI4Visualization = "OEE 2.0: OEE"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else if (row.Label == "UtilizationV2") {
        newEntry.KPI4Visualization = "OEE 2.0: Utilization"; // STRING
        newEntry.Value4Visualization = row.KPI+"%"; // STRING
    } else {
        newEntry.KPI4Visualization = row.Label; // STRING
        newEntry.Value4Visualization = row.KPI; // STRING
    }
    result.AddRow(newEntry);
}]]></code>
	</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetAllPlantsList">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: ""
                                        var Data = Things["KBSnowflakeDatabaseSmartKPIThing"].GetAllPlantsList();
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBAllPlantsNameDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAllPlantsNameDataShape)
                                        var PlantInfotable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        var tableLength = Data.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = Data.rows[x];
                                            
                                            var obj ={};
                                            
                                            obj.SAPPlantID=row.SAPPLANTID;
                                            obj.PlantName=row.DISPLAYNAME;
                                            
                                            PlantInfotable.AddRow(obj);
                                            
                                            //Your code here
                                        }
                                        
                                        
                                        var result = Resources["InfoTableFunctions"].Sort( {
                                        
                                             sortColumn: "PlantName", t: PlantInfotable, ascending: true
                                        
                                        } );
                                        ]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetAllStationsWithData">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try{
    var ListOfStations =  Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent({
    	maxItems: 1000 /* NUMBER */,
    	nameMask: undefined /* STRING */,
    	thingTemplate: "KBLocalStationThingTemplate" /* THINGTEMPLATENAME */
    });
    var StationProperties = Things[ListOfStations.rows[0].name].GetPropertyValues();
     
    var params1 = {
        infoTableName : "InfoTable",
        dataShapeName : "KBStationThingDataPropertyShape"
    };
    var StationThingDataPropertiesInfotable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params1);
	var newEntry = new Object();
    
	// filling Infotable of properties with all data af all stations based on KBStationThingDataPropertyShape
    for(var x=0;x<ListOfStations.rows.length;x++){
        StationProperties = Things[ListOfStations.rows[x].name].GetPropertyValues();
		StationThingDataPropertiesInfotable.AddRow(newEntry);
    	for (var fieldName in StationThingDataPropertiesInfotable.dataShape.fields) {
            StationThingDataPropertiesInfotable.rows[x][fieldName]= StationProperties.rows[0][fieldName]; 
    	}
	 }
     var result =  StationThingDataPropertiesInfotable;
}catch(err){
	logger.error("GetAllStationsWithData Error: " + err+ " on thing: " + me.name + " at: " + err.lineNumber);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetAreaFooterData">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try{

        var params = {
            infoTableName : "InfoTable",
            dataShapeName : "KBProductionAdvisorDataShape"
        };
        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBProductionAdvisorDataShape)
        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
        var OutputIO=0;
        var Target=0;
        var ActualWorkers=0;
        var OutputNIO=0;
        var Retest=0;
        var PlannedWorkers=0;
       
        if (Things[Machine].isActive){ 
                   		// result: INFOTABLE dataShape: "KBKpiSummaryShape"
            var IOresult =  Things["KBKPILocalThingWorxDatabaseThing"].GetKpiDataForTruck({
            	StartDate: StartDate /* DATETIME */,
            	EndDate: EndDate /* DATETIME */,
            	Machine: Machine /* STRING */,
            	KPIName: 'OutputIO' /* STRING */
            });
            if(IOresult.rows.length>0){
           //      logger.error(me.name + " on GetAreaFooterData() GetAreaFooterData inputs1: " + Area +", "+StartDate + ", "+EndDate+ ", " +Machine+", "+IOresult.rows.length);
           
            	if(!isNaN(parseInt(IOresult.rows[0].KPI))){
            		OutputIO=parseInt(IOresult.rows[0].KPI);
               }
            }
            var KPITarget =  Things["KBKPILocalThingWorxDatabaseThing"].GetKpiDataForTruck({
            	StartDate: StartDate /* DATETIME */,
            	EndDate: EndDate /* DATETIME */,
            	Machine: Machine /* STRING */,
            	KPIName: 'CVS DLP1: Calculated Production Target till now' /* STRING */
            });
            if(KPITarget.rows.length>0){
                if(!isNaN(parseInt(KPITarget.rows[0].KPI))){
                	Target=parseInt(KPITarget.rows[0].KPI);
                }
            }
            var KPIRetest =  Things["KBKPILocalThingWorxDatabaseThing"].GetKpiDataForTruck({
            	StartDate: StartDate /* DATETIME */,
            	EndDate: EndDate /* DATETIME */,
            	Machine: Machine /* STRING */,
            	KPIName: 'CVS: Retests' /* STRING */
            });
            if(KPIRetest.rows.length>0){
                if(!isNaN(parseInt(KPIRetest.rows[0].KPI))){
                	Retest=parseInt(KPIRetest.rows[0].KPI);
                }
            }
            var KPIOutputNIO =  Things["KBKPILocalThingWorxDatabaseThing"].GetKpiDataForTruck({
            	StartDate: StartDate /* DATETIME */,
            	EndDate: EndDate /* DATETIME */,
            	Machine: Machine /* STRING */,
            	KPIName: 'OutputNIO' /* STRING */
            });
            if(KPIOutputNIO.rows.length>0){
                if(!isNaN(parseInt(KPIOutputNIO.rows[0].KPI))){
                	OutputNIO=parseInt(KPIOutputNIO.rows[0].KPI);
                }
            }
//              var MachineKPIs =  Things["KBKPILocalThingWorxDatabaseThing"].GetAllKpiDataForTruck({
//            	StartDate: StartDate /* DATETIME */,
//            	EndDate: EndDate /* DATETIME */,
//            	Machine: Machine /* STRING */
//            });
            
           // result=MachineKPIs;
//            for(var y=0; y<MachineKPIs.rows.length; y++) {
//				var row = MachineKPIs.rows[y];
//                //var result= row.Label;
//                switch (row.Label) {
//                    case "OutputIO":
//                        if(!isNaN(parseInt(row.KPI))){
//                         	OutputIO=parseInt(row.KPI);
//                          }else{
//                            OutputIO=0;}
//                      //  var result= parseInt(row.KPI);
//                        break;
//                    case "CVS DLP1: Calculated Production Target till now":
//                        if(!isNaN(parseInt(row.KPI))){
//                         	Target=parseInt(row.KPI);
//                          }else{
//                            Target=0;}
//                        break;
//                    case "CVS: Actual number of workers at Line":
//                        if(!isNaN(parseInt(row.KPI))){
//                         	ActualWorkers=parseInt(row.KPI);
//                          }else{
//                            ActualWorkers=0;}
//                        break;
//                    case "OutputNIO":
//                        if(!isNaN(parseInt(row.KPI))){
//                         	OutputNIO=parseInt(row.KPI);
//                          }else{
//                            OutputNIO=0;}
//                        break;
//                    case "Retest":
//                        if(!isNaN(parseInt(row.KPI))){
//                         	Retest=parseInt(row.KPI);
//                          }else{
//                            Retest=0;}
//                        break;
//                    case "CVS: Planned number of workers from SAP":
//                        if(!isNaN(parseInt(row.KPI))){
//                         	PlannedWorkers=parseInt(row.KPI);
//                          }else{
//                            PlannedWorkers=0;}
//                        break;
//                    default:
//               	}
//            }
//                      	 // KBProductionAdvisorDataShape entry object
//            if(Area===''||Area===undefined||Area=='All'){
//                var params5 = {
//                	maxItems: 999999 /* NUMBER */,
//                	nameMask: undefined /* STRING */,
//                	query: undefined /* QUERY */,
//                	thingTemplate: "KBLocalAreaThingTemplate" /* THINGTEMPLATENAME */,
//                	tags: undefined /* TAGS */
//                };
//				var areas = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params5);
//                for(a=0;a<areas.rows.length;a++){
//					var AreasMachines=Things[areas.rows[a].name].KBMachineThings;
//                    	for (q=0;q<AreasMachines.rows.length;q++){
//                    		if(Machine==AreasMachines.rows[q].KBMachineThing){
//                    			Area=Things[areas.rows[a].name].DisplayName;
//                                var newEntry = new Object();
//                                    newEntry.TargetDelta = OutputIO-Target; // NUMBER
//                                    newEntry.ActualWorkers = ActualWorkers; // NUMBER
//                                    newEntry.OutputNIO = OutputNIO; // NUMBER
//                                    newEntry.Retest = Retest; // NUMBER
//                                    newEntry.Machine = Area; // STRING
//                                    newEntry.OutputIO = OutputIO; // NUMBER
//                                    newEntry.PlannedWorkers = PlannedWorkers; // NUMBER
//                                    
//                                    result.AddRow(newEntry);
//                        	}
//                        }
//            	}
//            }else{
                
//              logger.debug("GetAreaFooterData outputs: "+Machine+", " + OutputIO+", " +Target+", " + ActualWorkers+", " +OutputNIO +", " +Retest +", " + Area+", " + PlannedWorkers);
            var newEntry = new Object();
            newEntry.TargetDelta = OutputIO-Target; // NUMBER
            newEntry.ActualWorkers = ActualWorkers; // NUMBER
            newEntry.OutputNIO = OutputNIO; // NUMBER
            newEntry.Retest = Retest; // NUMBER
            newEntry.Machine = Area; // STRING
            newEntry.OutputIO = OutputIO; // NUMBER
            newEntry.PlannedWorkers = PlannedWorkers; // NUMBER
            
            result.AddRow(newEntry);
//        }
    }
}catch(err){
	logger.error("GetAreaFooterData Error: " + err+ " on thing: " + me.name + " at: " + err.lineNumber+ " , inputs: "+Machine+", "+Area);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetAreaMachinesForProductionAdvisor">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try {
var kpidateStart = new Date();
var kpidateEnd = new Date();


if (KPICalculationBase == "Day") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentDayStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentDayEnd();
}
else if (KPICalculationBase == "Week") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentWeekStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentWeekEnd();
}
else if (KPICalculationBase == "Year") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentYearStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentYearEnd();
}
else if (KPICalculationBase == "Month") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentMonthStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentMonthEnd();
}
else if (KPICalculationBase == "Hour") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentHourStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentHourEnd();
}
else if (KPICalculationBase == "Quarter") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentQuarterStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentQuarterEnd();
}
else if (KPICalculationBase == "Shift") {
	kpidateStart = new Date(123456);
	kpidateEnd = new Date(123456);
}



var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBMachinesForProductionAdvisorDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBMachinesForProductionAdvisorDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
//
// var params = {
//            infoTableName : "InfoTable",
//            dataShapeName : "KBAreaMachineDataShape "
//            };
// var machines = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
//
//// result: INFOTABLE dataShape: RootEntityList
// machines =  Things[AreaThing].KBMachineThings;
var tableLength =  Things[Area].KBMachineThings.rows.length;

for (var x = 0; x < tableLength; x++) {
	var row = Things[Area].KBMachineThings.rows[x];
	//Your code here
    // KBMachinesForProductionAdvisorDataShape entry object
    var newEntry = new Object();
    newEntry.MachineThingName = row.KBMachineThing; // STRING
    newEntry.KPIDateTimeStart = kpidateStart; // DATETIME
    newEntry.KPIDateTimeEnd = kpidateEnd; // STRING
    newEntry.KPICalculationBase = KPICalculationBase;

    // result: INFOTABLE
		var testResult = Things[row.KBMachineThing].GetPropertyValues();

	    if (Things[row.KBMachineThing].isActive) {
		    result.AddRow(newEntry);
		}
    }
} catch(err) {
		logger.error("Error Service GetAreaMachinesForProductionAdvisor at: "+ Area + " The error:" + err);
		result = false;

}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetAreasforSmartKPIVisualization">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[// result: INFOTABLE dataShape: RootEntityList
var implementingThings = ThingTemplates["KBGlobalAreaThingTemplate"].GetImplementingThingsWithData();

// KBNameForMenuDataShape entry object
var newEntry = new Object();
newEntry.DisplayName = "All"; // STRING - isPrimaryKey = true
newEntry.ThingName = KBPlantThing;

var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

result.AddRow(newEntry);


for (var i = 0; i<implementingThings.getRowCount(); i++) {
    if (Things[implementingThings.getRow(i).name].KBPlantThing == KBPlantThing && Things[implementingThings.getRow(i).name].isActive) {
        var newEntry = new Object();
        newEntry.DisplayName = Things[implementingThings.getRow(i).name].DisplayName;
        newEntry.ThingName = implementingThings.getRow(i).name;
        result.AddRow(newEntry);
    }
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetCompleteAreaFooterData">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var AreasMachines;
try{
if(Things[Area].KBMachineThings!=='' || Things[Area].KBMachineThings!==undefined){
	AreasMachines=Things[Area].KBMachineThings;
}else{
 	AreasMachines='';
}
}catch(err){
	logger.error("GetAreaFooterData Error: " + err+ " on thing: " + me.name + " at: " + err.lineNumber);
}
try{
    
    if(AreasMachines!==''){
        var params = {
            infoTableName : "InfoTable",
            dataShapeName : "KBProductionAdvisorDataShape"
        };
        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBProductionAdvisorDataShape)
        var resultPreparation = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
        var OutputIO;
        var Target;
        var ActualWorkers;
        var OutputNIO;
        var Retest;
        var PlannedWorkers;
       
        for(x=0;x<AreasMachines.rows.length;x++){
        	// result: INFOTABLE dataShape: "KBKpiSummaryShape"
            var MachineKPIs =  Things["KBKPILocalThingWorxDatabaseThing"].GetAllKpiDataForTruck({
            	StartDate: StartDate /* DATETIME */,
            	EndDate: EndDate /* DATETIME */,
            	Machine: AreasMachines.rows[x].KBMachineThing /* STRING */
            });
            
           // result=MachineKPIs;
            for(var y=0; y<MachineKPIs.rows.length; y++) {
				var row = MachineKPIs.rows[y];
                //var result= row.Label;
                switch (row.Label) {
                    case "OutputIO":
                        OutputIO= parseInt(row.KPI);
                      //  var result= parseInt(row.KPI);
                        break;
                    case "CVS DLP1: Calculated Production Target till now":
                        Target= parseInt(row.KPI);
                        break;
                    case "CVS: Actual number of workers at Line":
                        ActualWorkers= parseInt(row.KPI);
                        break;
                    case "OutputNIO":
                        OutputNIO= parseInt(row.KPI);
                        break;
                    case "Retest":
                        Retest= parseInt(row.KPI);
                        break;
                    case "CVS: Planned number of workers from SAP":
                        PlannedWorkers= parseInt(row.KPI);
                        break;
                    default:
               	}
                //var result= OutputIO+" "+Target+' '+ActualWorkers+' '+ OutputNIO+' '+Retest+' '+ OutputIO+' '+ PlannedWorkers;
            }
                      	 // KBProductionAdvisorDataShape entry object
            var newEntry = new Object();
            newEntry.TargetDelta = OutputIO-Target; // NUMBER
            newEntry.ActualWorkers = ActualWorkers; // NUMBER
            newEntry.OutputNIO = OutputNIO; // NUMBER
            newEntry.Retest = Retest; // NUMBER
            newEntry.Machine = AreasMachines.rows[x].KBMachineThing; // STRING
            newEntry.OutputIO = OutputIO; // NUMBER
            newEntry.PlannedWorkers = PlannedWorkers; // NUMBER
            
            resultPreparation.AddRow(newEntry);

        }
         //   result=resultPreparation;
        
            
        var params3 = {
                    	t: resultPreparation /* INFOTABLE */,
                    	columns: "OutputIO,TargetDelta,OutputNIO,Retest,ActualWorkers,PlannedWorkers" /* STRING */,
                    	aggregates:  "SUM,SUM,SUM,SUM,SUM,SUM" /* STRING */,
                    	groupByColumns: ""  /* STRING */
                    };
        resultPreparation2 = Resources["InfoTableFunctions"].Aggregate(params3);
                            // KBProductionAdvisorDataShape entry object
        
        var newEntry2 = new Object();
        newEntry2.TargetDelta = resultPreparation2.SUM_TargetDelta; // STRING
        newEntry2.ActualWorkers = resultPreparation2.SUM_ActualWorkers; // NUMBER
        newEntry2.OutputNIO = resultPreparation2.SUM_OutputNIO; // NUMBER
        newEntry2.Retest = resultPreparation2.SUM_Retest; // NUMBER
        newEntry2.Machine = Area; // STRING
        newEntry2.OutputIO = resultPreparation2.SUM_OutputIO; // NUMBER
        newEntry2.PlannedWorkers = resultPreparation2.SUM_PlannedWorkers; // STRING
        
        result.AddRow(newEntry2);
     
    }
}catch(err){
	logger.error("GetAreaFooterData Error: " + err+ " on thing: " + me.name + " at: " + err.lineNumber);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetCVSAssetAdvisorKpiCalculationBaseForMenue">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var Language=Language;
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};
// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

//if(Language===undefined){Language='Default';}

var newEntry = new Object();
newEntry.DisplayName = "User set"; // STRING - isPrimaryKey = true
var Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.UserSet"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Quarter"; // STRING - isPrimaryKey = true
Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Quarter"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Week"; // STRING - isPrimaryKey = true
 Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Week"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Month"; // STRING - isPrimaryKey = true
 Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Month"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Year"; // STRING - isPrimaryKey = true
 Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Year"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

//var newEntry = new Object();
//newEntry.DisplayName = "HalfYear"; // STRING - isPrimaryKey = true
// Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.HalfYear"});
//newEntry.ThingName = Period;
//newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

//var newEntry = new Object();
//newEntry.DisplayName = "2Years"; // STRING - isPrimaryKey = true
// Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.2Years"});
//newEntry.ThingName = Period;
//newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

//var newEntry = new Object();
//newEntry.DisplayName = "3Years"; // STRING - isPrimaryKey = true
// Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.3Years"});
//newEntry.ThingName = Period;
//newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

//var newEntry = new Object();
//newEntry.DisplayName = "4Years"; // STRING - isPrimaryKey = true
// Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.4Years"});
//newEntry.ThingName = Period;
//newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

//var newEntry = new Object();
//newEntry.DisplayName = "5Years"; // STRING - isPrimaryKey = true
// Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.5Years"});
//newEntry.ThingName = Period;
//newEntry.DBKpiName = "-";
//result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetCVSGlobalKpiCalculationBaseForMenue">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var Language=Language;
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};
// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

if(Language===undefined){Language='Default';}

var newEntry = new Object();
newEntry.DisplayName = "User set"; // STRING - isPrimaryKey = true
var Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.UserSet"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Quarter"; // STRING - isPrimaryKey = true
Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Quarter"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Hour"; // STRING - isPrimaryKey = true
Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Hour"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "4Hours"; // STRING - isPrimaryKey = true
Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.4Hours"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "8Hours"; // STRING - isPrimaryKey = true
Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.8Hours"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Shift"; // STRING - isPrimaryKey = true
Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Shift"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Day"; // STRING - isPrimaryKey = true
Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Day"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Week"; // STRING - isPrimaryKey = true
 Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Week"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Month"; // STRING - isPrimaryKey = true
 Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Month"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Year"; // STRING - isPrimaryKey = true
 Period =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({Language: Language, Token: "KBProductionAdvisorCvsMashup.Year"});
newEntry.ThingName = Period;
newEntry.DBKpiName = "-";
result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetCVSMachineProcessingDeviationData">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[// result: INFOTABLE dataShape: ""
var result =  Things["KBKPILocalThingWorxDatabaseThing"].GetCVSMachineProcessingDeviationData({
	EndTime: EndTime /* DATETIME */,	
	StartTime: StartTime /* DATETIME */,
	Machine: Machine /* STRING */
});]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetCVSMachinesForProductionAdvisor">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var kpidateStart = new Date();
var kpidateEnd = new Date();





if (KPICalculationBase == "Day") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentDayStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentDayEnd();
	
	kpidateStart = dateAddDays(kpidateStart,Offset);
	kpidateEnd = dateAddDays(kpidateEnd,Offset);
}
else if (KPICalculationBase == "Week") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentWeekStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentWeekEnd();
	
	kpidateStart = dateAddDays(kpidateStart,Offset*7);
	kpidateEnd = dateAddDays(kpidateEnd,Offset*7);
}
else if (KPICalculationBase == "Year") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentYearStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentYearEnd();
	
	kpidateStart = dateAddYears(kpidateStart,Offset);
	kpidateEnd = dateAddYears(kpidateEnd,Offset);
}
else if (KPICalculationBase == "Month") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentMonthStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentMonthEnd();
	
	kpidateStart = dateAddMonths(kpidateStart,Offset);
	kpidateEnd = dateAddMonths(kpidateEnd,Offset);
}
else if (KPICalculationBase == "Hour") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentHourStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentHourEnd();
	
	kpidateStart = dateAddHours(kpidateStart,Offset);
	kpidateEnd = dateAddHours(kpidateEnd,Offset);
}
else if (KPICalculationBase == "Quarter") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentQuarterStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentQuarterEnd();
	
	kpidateStart = dateAddMinutes(kpidateStart,Offset*15);
	kpidateEnd = dateAddMinutes(kpidateEnd,Offset*15);
}
else if (KPICalculationBase == "Shift") {
	kpidateStart = new Date(123456);
	kpidateEnd = new Date(123456);
}
else if (KPICalculationBase == "User set") {
	kpidateStart = StartDate;
	kpidateEnd = EndDate;
}


if (Area == null || Area == "") {
	Area = "All";
}

var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBMachinesForProductionAdvisorDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBMachinesForProductionAdvisorDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);


var params = {
	maxItems: 999999 /* NUMBER */,
	nameMask: undefined /* STRING */,
	query: undefined /* QUERY */,
	thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */,
	tags: undefined /* TAGS */
};

// result: INFOTABLE dataShape: RootEntityList
var machines = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params);

var tableLength = machines.rows.length;

for (var x = 0; x < tableLength; x++) {
	try {
		// result: INFOTABLE
		var row = machines.rows[x];
		//Your code here
	    // KBMachinesForProductionAdvisorDataShape entry object
		
		var rowMachine = row.name;
		var rowPlant = Things[rowMachine].KBPlantThing;
		var rowDevision = Things[rowPlant].KBDivisionThing;
		var CVS_DMS_Day_Offset_in_Minutes = Things[rowPlant].CVS_DMS_Day_Offset_in_Minutes;
		
		logger.debug ("GetMachinesForProductionAdvisor: rowMachine --> "+rowMachine+" ("+x+" of "+tableLength+")");
		logger.debug ("GetMachinesForProductionAdvisor: rowPlant --> "+rowPlant+" ("+x+" of "+tableLength+")");
		logger.debug ("GetMachinesForProductionAdvisor: rowDevision --> "+rowDevision+" ("+x+" of "+tableLength+")");

		if (rowDevision == "KBTruckDivisionThing") {
			if (KPICalculationBase == "Day") {
				kpidateStart = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentDayStart(), CVS_DMS_Day_Offset_in_Minutes);
				kpidateEnd = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentDayEnd(), CVS_DMS_Day_Offset_in_Minutes);
				
				kpidateStart = dateAddDays(kpidateStart,Offset);
				kpidateEnd = dateAddDays(kpidateEnd,Offset);
			}

			if (KPICalculationBase == "Week") {
				kpidateStart = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentWeekStart(), CVS_DMS_Day_Offset_in_Minutes);
				kpidateEnd = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentWeekEnd(), CVS_DMS_Day_Offset_in_Minutes);
				
				kpidateStart = dateAddDays(kpidateStart,Offset*7);
				kpidateEnd = dateAddDays(kpidateEnd,Offset*7);
			}

		    var newEntry = new Object();
		    newEntry.MachineThingName = row.name; // STRING
		    newEntry.KPIDateTimeStart = kpidateStart; // DATETIME
		    newEntry.KPIDateTimeEnd = kpidateEnd; // STRING
		    newEntry.KPICalculationBase = KPICalculationBase;
		    newEntry.ShiftIterations = Offset * -1;
			    
			//logger.debug ("GetMachinesForProductionAdvisor: row -->"+row.name+" ("+x+" of "+tableLength+")");
			
			if (Area != "All" && Things[row.name].isActive) {
				var machinesInArea = Things[Area].KBMachineThings;
				
				var tableLength1 = machinesInArea.rows.length;
				for (var xx=0; xx < tableLength1; xx++) {
				    var row1 = machinesInArea.rows[xx];
				    //logger.debug ("GetMachinesForProductionAdvisor: row1 -->"+row1.KBMachineThing+" ("+xx+")");
				    if (row1.KBMachineThing == row.name) {
						result.AddRow(newEntry);
					    //logger.debug ("GetMachinesForProductionAdvisor: inserted ("+x+"/"+xx+")");
				    }
				}			
			} else  if (Things[row.name].isActive) {
				result.AddRow(newEntry);
			}
		}	
	} catch(err) {
		logger.debug ("GetMachinesForProductionAdvisor: "+err);
	}

}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetCVSMachinesForProductionAdvisor2">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try {
var kpidateStart = new Date();
var kpidateEnd = new Date();

if (KPICalculationBase == "Day") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentDayStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentDayEnd();
	
	kpidateStart = dateAddDays(kpidateStart,Offset);
	kpidateEnd = dateAddDays(kpidateEnd,Offset);
}
else if (KPICalculationBase == "Week") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentWeekStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentWeekEnd();
	
	kpidateStart = dateAddDays(kpidateStart,Offset*7);
	kpidateEnd = dateAddDays(kpidateEnd,Offset*7);
}
else if (KPICalculationBase == "Year") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentYearStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentYearEnd();
	
	kpidateStart = dateAddYears(kpidateStart,Offset);
	kpidateEnd = dateAddYears(kpidateEnd,Offset);
}
else if (KPICalculationBase == "Month") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentMonthStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentMonthEnd();
	
	kpidateStart = dateAddMonths(kpidateStart,Offset);
	kpidateEnd = dateAddMonths(kpidateEnd,Offset);
}
else if (KPICalculationBase == "Hour") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentHourStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentHourEnd();
	
	kpidateStart = dateAddHours(kpidateStart,Offset);
	kpidateEnd = dateAddHours(kpidateEnd,Offset);
}
else if (KPICalculationBase == "Quarter") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentQuarterStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentQuarterEnd();
	
	kpidateStart = dateAddMinutes(kpidateStart,Offset*15);
	kpidateEnd = dateAddMinutes(kpidateEnd,Offset*15);
}
else if (KPICalculationBase == "Shift") {
	kpidateStart = new Date(123456);
	kpidateEnd = new Date(123456);
}
else if (KPICalculationBase == "User set") {
	kpidateStart = StartDate;
	kpidateEnd = EndDate;
}


if(Area === null || Area === "" || Area == "All") {
	Area = "All";
}

var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBMachinesForProductionAdvisorDataShape2"
};

///////////////////////////var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var params5 = {
	maxItems: 999999 /* NUMBER */,
	nameMask: undefined /* STRING */,
	thingTemplate: "KBLocalAreaThingTemplate" /* THINGTEMPLATENAME */
};
var areas = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params5);
var AreasLength;
try{    
    AreasLength=areas.rows.length;
}catch(err){
    AreasLength=0;
}

var params2 = {
	maxItems: 999999 /* NUMBER */,
	query: undefined /* QUERY */,
	thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */
};
var machines = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params2);

var tableLength = machines.rows.length;
var UID=0;


////////// footer data reading
var params3 = {
    infoTableName : "InfoTable",
    dataShapeName : "KBProductionAdvisorDataShape"
};
var AreaFooterInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params3);
var AreaFooterInfoTableResult = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params3);
var searchMachineData;
var AreasMachines;
var AreasMachinesLength;
try{    
	AreasMachines=Things[Area].KBMachineThings;    
    AreasMachinesLength=AreasMachines.rows.length;
}catch(err){
    AreasMachinesLength=0;
}
if(Area != "All" && AreasMachinesLength>0 ){
	    for (var q=0;q<AreasMachinesLength;q++){
    		var row = AreasMachines.rows[q];
			var rowMachine = row.name;
        	if (Things[rowMachine].isActive && Things[rowMachine].KBPlantThing==Plant) {
        		var rowPlant = Things[rowMachine].KBPlantThing;
        		var rowDevision = Things[rowPlant].KBDivisionThing;
        		var CVS_DMS_Day_Offset_in_Minutes = Things[rowPlant].CVS_DMS_Day_Offset_in_Minutes;
        		if (rowDevision == "KBTruckDivisionThing") {
        			if (KPICalculationBase == "Day") {
        				kpidateStart = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentDayStart(), CVS_DMS_Day_Offset_in_Minutes);
        				kpidateEnd = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentDayEnd(), CVS_DMS_Day_Offset_in_Minutes);
        				
        				kpidateStart = dateAddDays(kpidateStart,Offset);
        				kpidateEnd = dateAddDays(kpidateEnd,Offset);
        			}
        
        			if (KPICalculationBase == "Week") {
        				kpidateStart = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentWeekStart(), CVS_DMS_Day_Offset_in_Minutes);
        				kpidateEnd = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentWeekEnd(), CVS_DMS_Day_Offset_in_Minutes);
        				
        				kpidateStart = dateAddDays(kpidateStart,Offset*7);
        				kpidateEnd = dateAddDays(kpidateEnd,Offset*7);
        			}
        
                    var tempAreaFooterInfoTable= me.GetAreaFooterData({
                        	StartDate: new Date(kpidateStart) /* DATETIME */,
                        	Area: Area /* STRING */,
                        	Machine: rowMachine,
                        	EndDate: new Date(kpidateEnd) /* DATETIME */
                        });
                                    // KBProductionAdvisorDataShape entry object
                    var newEntry = new Object();
                    newEntry.TargetDelta = tempAreaFooterInfoTable.rows[0].TargetDelta; // NUMBER
                    newEntry.ActualWorkers = tempAreaFooterInfoTable.rows[0].ActualWorkers; // NUMBER
                    newEntry.OutputNIO = tempAreaFooterInfoTable.rows[0].OutputNIO; // NUMBER
                    newEntry.Retest = tempAreaFooterInfoTable.rows[0].Retest; // NUMBER
                    newEntry.Machine = tempAreaFooterInfoTable.rows[0].Machine; // STRING
                    newEntry.OutputIO = tempAreaFooterInfoTable.rows[0].OutputIO; // NUMBER
                    newEntry.PlannedWorkers = tempAreaFooterInfoTable.rows[0].PlannedWorkers; // NUMBER
                    
                    AreaFooterInfoTable.AddRow(newEntry);
    
                        // logger.error(me.name + " on GetCVSMachinesForProductionAdvisor2() GetAreaFooterData inputs: " + Area +", "+kpidateStart + ", "+kpidateEnd+ ", " +row.name);
           }
        }
    }
    //   }catch(err){logger.error(me.name + " on GetCVSMachinesForProductionAdvisor2() Error on line " + err.lineNumber + ": " + err);}
}else{
	for (var qq=0;qq<machines.rows.length;qq++){
    		var row1 = machines.rows[qq];
			var rowMachine1 = row1.name;
        	if (Things[rowMachine1].isActive && Things[rowMachine1].KBPlantThing==Plant) {
        		var rowPlant1 = Things[rowMachine1].KBPlantThing;
        		var rowDevision1 = Things[rowPlant1].KBDivisionThing;
        		var CVS_DMS_Day_Offset_in_Minutes1 = Things[rowPlant1].CVS_DMS_Day_Offset_in_Minutes;
        		if (rowDevision1 == "KBTruckDivisionThing") {
        			if (KPICalculationBase == "Day") {
        				kpidateStart = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentDayStart(), CVS_DMS_Day_Offset_in_Minutes1);
        				kpidateEnd = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentDayEnd(), CVS_DMS_Day_Offset_in_Minutes1);
        				
        				kpidateStart = dateAddDays(kpidateStart,Offset);
        				kpidateEnd = dateAddDays(kpidateEnd,Offset);
        			}
        
        			if (KPICalculationBase == "Week") {
        				kpidateStart = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentWeekStart(), CVS_DMS_Day_Offset_in_Minutes1);
        				kpidateEnd = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentWeekEnd(), CVS_DMS_Day_Offset_in_Minutes1);
        				
        				kpidateStart = dateAddDays(kpidateStart,Offset*7);
        				kpidateEnd = dateAddDays(kpidateEnd,Offset*7);
        			}
        
                    var tempAreaFooterInfoTable1= me.GetAreaFooterData({
                        	StartDate: new Date(kpidateStart) /* DATETIME */,
                        	Area: Area /* STRING */,
                        	Machine: rowMachine1,
                        	EndDate: new Date(kpidateEnd) /* DATETIME */
                        });
                                    // KBProductionAdvisorDataShape entry object
                    var newEntry = new Object();
                    newEntry.TargetDelta = tempAreaFooterInfoTable1.rows[0].TargetDelta; // NUMBER
                    newEntry.ActualWorkers = tempAreaFooterInfoTable1.rows[0].ActualWorkers; // NUMBER
                    newEntry.OutputNIO = tempAreaFooterInfoTable1.rows[0].OutputNIO; // NUMBER
                    newEntry.Retest = tempAreaFooterInfoTable1.rows[0].Retest; // NUMBER
                    newEntry.Machine = tempAreaFooterInfoTable1.rows[0].Machine; // STRING
                    newEntry.OutputIO = tempAreaFooterInfoTable1.rows[0].OutputIO; // NUMBER
                    newEntry.PlannedWorkers = tempAreaFooterInfoTable1.rows[0].PlannedWorkers; // NUMBER
                    
                    AreaFooterInfoTable.AddRow(newEntry);
           }
        }
    }
}
    
    var AreaFooterInfoTableLength;
    try{
        AreaFooterInfoTableLength=AreaFooterInfoTable.rows.length;
    
    }catch(err){}
    	var newEntry2 = new Object();
    	if(AreaFooterInfoTableLength>0){
     		var params4 = { t: AreaFooterInfoTable /* INFOTABLE */,
                        	columns: "OutputIO,TargetDelta,OutputNIO,Retest,ActualWorkers,PlannedWorkers" /* STRING */,
                        	aggregates:  "SUM,SUM,SUM,SUM,SUM,SUM" /* STRING */,
                        	groupByColumns: "Machine"  /* STRING */
                        };
            var resultPreparation2 = Resources["InfoTableFunctions"].Aggregate(params4);
                                // KBProductionAdvisorDataShape entry object
            newEntry2.TargetDelta = resultPreparation2.SUM_TargetDelta; // STRING
            newEntry2.ActualWorkers = resultPreparation2.SUM_ActualWorkers; // NUMBER
            newEntry2.OutputNIO = resultPreparation2.SUM_OutputNIO; // NUMBER
            newEntry2.Retest = resultPreparation2.SUM_Retest; // NUMBER
            newEntry2.Machine = Area; // STRING
            newEntry2.OutputIO = resultPreparation2.SUM_OutputIO; // NUMBER
            newEntry2.PlannedWorkers = resultPreparation2.SUM_PlannedWorkers; // STRING
        }else{
        	
            newEntry2.TargetDelta =0; // STRING
            newEntry2.ActualWorkers = 0; // NUMBER
            newEntry2.OutputNIO = 0; // NUMBER
            newEntry2.Retest = 0; // NUMBER
            newEntry2.Machine = 'All'; // STRING
            newEntry2.OutputIO = 0; // NUMBER
            newEntry2.PlannedWorkers = 0; // STRING
        }
        AreaFooterInfoTableResult.AddRow(newEntry2);
     
     //////////// End of Footer infotable reading to AreaFooterInfoTableResult
var result=AreaFooterInfoTableResult;
if(Area === "All"){
	for (x=0;x<machines.rows.length;x++){
    	var row2 = machines.rows[x];
    	var rowMachine2 = row2.name;
    	if(Things[rowMachine2].isActive){
       		var rowPlant2 = Things[rowMachine2].KBPlantThing;
    		var rowDevision2 = Things[rowPlant2].KBDivisionThing;
    		var CVS_DMS_Day_Offset_in_Minutes2 = Things[rowPlant2].CVS_DMS_Day_Offset_in_Minutes;
    		
    		logger.debug ("GetMachinesForProductionAdvisor: rowMachine --> "+rowMachine2+" ("+x+" of "+tableLength+")");
    		logger.debug ("GetMachinesForProductionAdvisor: rowPlant --> "+rowPlant2+" ("+x+" of "+tableLength+")");
    		logger.debug ("GetMachinesForProductionAdvisor: rowDevision --> "+rowDevision2+" ("+x+" of "+tableLength+")");
    
    		if (rowDevision2 == "KBTruckDivisionThing") {
    			if (KPICalculationBase == "Day") {
    				kpidateStart = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentDayStart(), CVS_DMS_Day_Offset_in_Minutes2);
    				kpidateEnd = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentDayEnd(), CVS_DMS_Day_Offset_in_Minutes2);
    				
    				kpidateStart = dateAddDays(kpidateStart,Offset);
    				kpidateEnd = dateAddDays(kpidateEnd,Offset);
    			}
    
    			if (KPICalculationBase == "Week") {
    				kpidateStart = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentWeekStart(), CVS_DMS_Day_Offset_in_Minutes2);
    				kpidateEnd = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentWeekEnd(), CVS_DMS_Day_Offset_in_Minutes2);
    				
    				kpidateStart = dateAddDays(kpidateStart,Offset*7);
    				kpidateEnd = dateAddDays(kpidateEnd,Offset*7);
    			}
    
    		    var newEntry = new Object();
    		    newEntry.MachineThingName = rowMachine2; // STRING
    		    newEntry.KPIDateTimeStart = kpidateStart; // DATETIME
    		    newEntry.KPIDateTimeEnd = kpidateEnd; // STRING
    		    newEntry.KPICalculationBase = KPICalculationBase;
    		    newEntry.ShiftIterations = Offset * -1;
    			
    			if (rowPlant2==Plant && AreasLength>0) {
                    for(var z=0;z<AreasLength;z++){
    					var AreasMachines3=Things[areas.rows[z].name].KBMachineThings;
            			for (var zz =0;zz<AreasMachines3.rows.length;zz++){
        					if(AreasMachines3.rows[zz].name==rowMachine2){
                                UID=UID+1;
                                newEntry.UID=UID;
        							var query = {"filters": 
                                            {   "type": "EQ",
                                                "fieldName": "Machine",
                                                "value": areas.rows[z].name}
                            		};
                                    var params6 = {
                                    	t: AreaFooterInfoTableResult /* INFOTABLE */,
                                    	query: query /* QUERY */
                                    };
                             		var FooterInfotable = Resources["InfoTableFunctions"].Query(params6);
                                newEntry.Footer = FooterInfotable;
//                                result.AddRow(newEntry);
         				    }
        				}
                    }
    			}
    		}	
        }   
    }
}else{
    //////////////////////////////////////////////////////////////////
     if(AreasMachinesLength>0){
        for (x=0;x<AreasMachinesLength;x++){
    	var row3 = AreasMachines.rows[x];
    	var rowMachine3 = row3.name;
    	if(Things[rowMachine3].isActive){
       		var rowPlant3 = Things[rowMachine3].KBPlantThing;
    		var rowDevision3 = Things[rowPlant3].KBDivisionThing;
    		var CVS_DMS_Day_Offset_in_Minutes3 = Things[rowPlant3].CVS_DMS_Day_Offset_in_Minutes;
    		
    		logger.debug ("GetMachinesForProductionAdvisor: rowMachine --> "+rowMachine3+" ("+x+" of "+tableLength+")");
    		logger.debug ("GetMachinesForProductionAdvisor: rowPlant --> "+rowPlant3+" ("+x+" of "+tableLength+")");
    		logger.debug ("GetMachinesForProductionAdvisor: rowDevision --> "+rowDevision3+" ("+x+" of "+tableLength+")");
    
    		if (rowDevision3 == "KBTruckDivisionThing") {
    			if (KPICalculationBase == "Day") {
    				kpidateStart = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentDayStart(), CVS_DMS_Day_Offset_in_Minutes3);
    				kpidateEnd = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentDayEnd(), CVS_DMS_Day_Offset_in_Minutes3);
    				
    				kpidateStart = dateAddDays(kpidateStart,Offset);
    				kpidateEnd = dateAddDays(kpidateEnd,Offset);
    			}
    
    			if (KPICalculationBase == "Week") {
    				kpidateStart = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentWeekStart(), CVS_DMS_Day_Offset_in_Minutes3);
    				kpidateEnd = dateAddMinutes(Things["KBTimeHelperThing"].GetCurrentWeekEnd(), CVS_DMS_Day_Offset_in_Minutes3);
    				
    				kpidateStart = dateAddDays(kpidateStart,Offset*7);
    				kpidateEnd = dateAddDays(kpidateEnd,Offset*7);
    			}
    
    		    var newEntry3 = new Object();
    		    newEntry3.MachineThingName = rowMachine3; // STRING
    		    newEntry3.KPIDateTimeStart = kpidateStart; // DATETIME
    		    newEntry3.KPIDateTimeEnd = kpidateEnd; // STRING
    		    newEntry3.KPICalculationBase = KPICalculationBase;
    		    newEntry3.ShiftIterations = Offset * -1;
    			UID=UID+1;
                newEntry3.UID=UID;
        		var query2 = {"filters": 
                        {   "type": "EQ",
                            "fieldName": "Machine",
                            "value": Area}
        		};
                var params7 = {
                	t: AreaFooterInfoTableResult /* INFOTABLE */,
                	query: query2 /* QUERY */
                };
         		var FooterInfotable1 = Resources["InfoTableFunctions"].Query(params7);
            	newEntry3.Footer = FooterInfotable1;
//                result.AddRow(newEntry3);
        		}
    		}	
        }   
    }
    
}
//        var query1= {
//          "sorts": [
//              {
//                  "fieldName": "Footer",
//                  "isAscending": true
//              },
//              {
//                  "fieldName": "MachineThingName",
//                  "isAscending": true
//              }
//          	]
//    	};
//         var params1 = {
//                        t: result /* INFOTABLE */,
//                        query: query1 /* QUERY */
//                       };
//                            
//         result = Resources["InfoTableFunctions"].Query(params1);
    	 /// result in KBMachinesForProductionAdvisorDataShape2 shape
} catch(err) {
		logger.error(me.name + " on GetCVSMachinesForProductionAdvisor2() Error on line " + err.lineNumber + ": " + err);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetCVSMachinesForProductionAdvisor3">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try {
var kpidateStart = new Date();
var kpidateEnd = new Date();
var kpidateMachineStart = new Date();
var kpidateMachineEnd = new Date();  

if (KPICalculationBase == "Day") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentDayStart();
	
    //kpidateEnd = Things["KBTimeHelperThing"].GetCurrentDayEnd();
	
	kpidateStart = dateAddDays(kpidateStart,Offset);
	kpidateEnd = dateAddDays(kpidateStart,1);
}
else if (KPICalculationBase == "Week") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentWeekStart();
    kpidateEnd = dateAddDays(kpidateStart,7);
	//kpidateEnd = Things["KBTimeHelperThing"].GetCurrentWeekEnd();
	
	kpidateStart = dateAddDays(kpidateStart,Offset*7);
	kpidateEnd = dateAddDays(kpidateEnd,Offset*7);
    
    ////////
//kpidateStart = dayOfWeek+(7*Offset);
//kpidateEnd = 7-dayOfWeek-(Offset*7);
}
else if (KPICalculationBase == "Year") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentYearStart();
    kpidateEnd = dateAddYears(kpidateStart,1);
	//kpidateEnd = Things["KBTimeHelperThing"].GetCurrentYearEnd();
	
	kpidateStart = dateAddYears(kpidateStart,Offset);
	kpidateEnd = dateAddYears(kpidateEnd,Offset);
}
else if (KPICalculationBase == "Month") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentMonthStartWithIterations({
	Iterations: Offset /* NUMBER */
});
    kpidateEnd = Things["KBTimeHelperThing"].GetCurrentMonthEndWithIterations({
	FullTimeSlot: true /* BOOLEAN */,
	Iterations: Offset /* NUMBER */
});
//    kpidateEnd = dateAddMonths(kpidateStart,1);
//	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentMonthEnd();
	
//	kpidateStart = dateAddMonths(kpidateStart,Offset);
//    kpidateEnd = dateAddMonths(kpidateEnd,Offset);
//	kpidateEnd =  Things["KBTimeHelperThing"].GetDefinedMonthEnd({
//		DateTime: kpidateEnd /* DATETIME */
//	});
//	
}
else if (KPICalculationBase == "4Hours") {
    kpidateStart = dateAddHours(StartDate,Offset*4);
	kpidateEnd = dateAddHours(EndDate,Offset*4);
}
else if (KPICalculationBase == "8Hours") {
    kpidateStart = dateAddHours(StartDate,Offset*8);
	kpidateEnd = dateAddHours(EndDate,Offset*8);
}     
else if (KPICalculationBase == "Quarter") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentQuarterStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentQuarterEnd();
	
	kpidateStart = dateAddMinutes(kpidateStart,Offset*15);
	kpidateEnd = dateAddMinutes(kpidateEnd,Offset*15);
}
else if (KPICalculationBase == "Shift") {
	kpidateStart = new Date(123456);
	kpidateEnd = new Date(123456);
}
else if (KPICalculationBase == "User set") {
	kpidateStart = StartDate;
	kpidateEnd = EndDate;
}

// logger.error ("GetMachinesForProductionAdvisor3: kpidateStart --> "+kpidateStart+" kpidateEnd --> "+kpidateEnd);
if(Area === null || Area === "") {
	Area = "All";
}

var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBMachinesForProductionAdvisorDataShape2"
};

var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var params5 = {
	maxItems: 999999 /* NUMBER */,
	nameMask: undefined /* STRING */,
	query: undefined /* QUERY */,
	thingTemplate: "KBLocalAreaThingTemplate" /* THINGTEMPLATENAME */,
	tags: undefined /* TAGS */
};

// result: INFOTABLE dataShape: RootEntityList
var areas = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params5);


var params2 = {
	maxItems: 999999 /* NUMBER */,
	nameMask: undefined /* STRING */,
	query: undefined /* QUERY */,
	thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */,
	tags: undefined /* TAGS */
};

// result: INFOTABLE dataShape: RootEntityList
var machines = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params2);
var newField = new Object();
	newField.name = 'DisplayName';
	newField.baseType = 'STRING';
	machines.AddField(newField);
	var tableLength = machines.rows.length;
	for (var a = 0; a < tableLength; a++) {
		machines.rows[a].DisplayName = Things[machines.rows[a].name].DisplayName;
	}
	var sort = new Object();
	sort.name = 'DisplayName';
	sort.ascending = true;
	machines.Sort(sort);
	
var UID=0;
var searchMachineData;
        ////////// footer data reading
var params3 = {
        infoTableName : "InfoTable",
        dataShapeName : "KBProductionAdvisorDataShape"
    };
    var AreaFooterInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params3);
    var AreaFooterInfoTableResult = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params3);
    
    //exclude individual footer recalculation for not precalculated Calculation Base
 if(KPICalculationBase != "Shift" && KPICalculationBase != "4Hours" && KPICalculationBase != "8Hours" ){    
    
    for (var y = 0; y < tableLength; y++) {
        if(Area != "All" && Area!==undefined){
            searchMachineData=false;
            var AreasMachines=Things[Area].KBMachineThings;
            for (q=0;q<AreasMachines.rows.length;q++){
            	if(machines.rows[y].name==AreasMachines.rows[q].KBMachineThing){
            		searchMachineData=true;
                }
            }
        }
        
        if(Area == "All" || searchMachineData){
    		var row = machines.rows[y];
    		var rowMachine = row.name;
//            logger.error(me.name + " on GetCVSMachinesForProductionAdvisor3() GetAreaFooterData inputs1: " + Area +", "+kpidateStart + ", "+kpidateEnd+ ", " +row.name);
            if (Things[rowMachine].isActive && (Things[rowMachine].KBPlantThing==Plant || Plant==='' || Plant===null)) {
        		var rowPlant = Things[rowMachine].KBPlantThing;
        		var rowDevision = Things[rowPlant].KBDivisionThing;
        		var CVS_DMS_Day_Offset_in_Minutes = Things[rowPlant].CVS_DMS_Day_Offset_in_Minutes;
        		if (rowDevision == "KBTruckDivisionThing") {
                     if (KPICalculationBase == "Day" ||KPICalculationBase == "Week"||KPICalculationBase == "Month" || KPICalculationBase == "Year") {
           				kpidateMachineStart = dateAddMinutes(kpidateStart, CVS_DMS_Day_Offset_in_Minutes);
        				kpidateMachineEnd = dateAddMinutes(kpidateEnd, CVS_DMS_Day_Offset_in_Minutes);
//                         var diff1 = new Date() - kpidateStart;
//							diff1 = diff1 / (1000*60*60*24);
//                         var diff2 = new Date() - kpidateEnd;
//							diff2 = diff2 / (1000*60*60*24);
                         
//                         kpidateMachineStart = Things["KBTimeHelperThing"].GetDayStart({DaysBack: diff1, OffsetInMinutes: CVS_DMS_Day_Offset_in_Minutes});
//						 kpidateMachineEnd = Things["KBTimeHelperThing"].GetDayStart({DaysBack: diff2, OffsetInMinutes: CVS_DMS_Day_Offset_in_Minutes});
                	}
        			if (KPICalculationBase == "4Hours") {
//                        logger.error ("GetMachinesForProductionAdvisor3: kpidateEnd --> "+kpidateEnd+" (Machine: "+rowMachine1+")");
        				var ShiftInfotable =  Things["KBKPILocalThingWorxDatabaseThing"].GetFullShiftTime({
                        	date: kpidateEnd /* DATETIME */,
                        	Machine: rowMachine1 /* STRING */
                        });
        				kpidateMachineStart = ShiftInfotable.CurrentStartTime;
        				kpidateMachineEnd = ShiftInfotable.CurrentEndTime;
                        if(kpidateMachineEnd===undefined || kpidateMachineEnd===null || kpidateMachineEnd===""){
                            kpidateMachineStart=kpidateEnd;
                            kpidateMachineEnd=kpidateEnd;}
//                        logger.error ("GetMachinesForProductionAdvisor3: kpidateMachineStart --> "+kpidateMachineStart+" (kpidateEnd: "+kpidateMachineEnd+")");
        			}
                    if (KPICalculationBase == "8Hours") {
        				var ShiftInfotable2 =  Things["KBKPILocalThingWorxDatabaseThing"].GetFullShiftTime({
                        	date: kpidateEnd /* DATETIME */,
                        	Machine: rowMachine1 /* STRING */
                        });
        				kpidateMachineStart = ShiftInfotable2.CurrentStartTime;
        				kpidateMachineEnd = ShiftInfotable2.CurrentEndTime;
                         if(kpidateMachineEnd===undefined || kpidateMachineEnd===null || kpidateMachineEnd===""){
                            kpidateMachineStart=kpidateEnd;
                            kpidateMachineEnd=kpidateEnd;}
        			}
    
                    var tempAreaFooterInfoTable= me.GetAreaFooterData({
                        	StartDate: new Date(kpidateMachineStart) /* DATETIME */,
                        	Area: Area /* STRING */,
                        	Machine: row.name,
                        	EndDate: new Date(kpidateMachineEnd) /* DATETIME */
                        });
                                    // KBProductionAdvisorDataShape entry object
                    var newEntry = new Object();
                    newEntry.TargetDelta = tempAreaFooterInfoTable.TargetDelta; // NUMBER
                    newEntry.ActualWorkers = tempAreaFooterInfoTable.ActualWorkers; // NUMBER
                    newEntry.OutputNIO = tempAreaFooterInfoTable.OutputNIO; // NUMBER
                    newEntry.Retest = tempAreaFooterInfoTable.Retest; // NUMBER
                    newEntry.Machine = tempAreaFooterInfoTable.Machine; // STRING
                    newEntry.OutputIO = tempAreaFooterInfoTable.OutputIO; // NUMBER
                    newEntry.PlannedWorkers = tempAreaFooterInfoTable.PlannedWorkers; // NUMBER
                    
                    
                    AreaFooterInfoTable.AddRow(newEntry);
    
                        // logger.error(me.name + " on GetCVSMachinesForProductionAdvisor2() GetAreaFooterData inputs: " + Area +", "+kpidateMachineStart + ", "+kpidateEnd+ ", " +row.name);
               }
            }
        }
        //   }catch(err){logger.error(me.name + " on GetCVSMachinesForProductionAdvisor2() Error on line " + err.lineNumber + ": " + err);}
        }
        
        var AreaFooterInfoTableLength;
        try{
            AreaFooterInfoTableLength=AreaFooterInfoTable.rows.length;
        
        }catch(err){AreaFooterInfoTableLength=0;}
  //  logger.error(me.name + " on GetCVSMachinesForProductionAdvisor3() GetAreaFooterData inputs2: " + Area +", "+kpidateMachineStart + ", "+kpidateEnd+ ", " +row.name);
    		var newEntry2 = new Object();
        	if(AreaFooterInfoTableLength>0){
         		var params4 = { 	t: AreaFooterInfoTable /* INFOTABLE */,
                            	columns: "OutputIO,TargetDelta,OutputNIO,Retest,ActualWorkers,PlannedWorkers" /* STRING */,
                            	aggregates:  "SUM,SUM,SUM,SUM,SUM,SUM" /* STRING */,
                            	groupByColumns: "Machine"  /* STRING */
                            };
                var resultPreparation2 = Resources["InfoTableFunctions"].Aggregate(params4);
                                    // KBProductionAdvisorDataShape entry object
                
                newEntry2.TargetDelta = resultPreparation2.SUM_TargetDelta; // STRING
                newEntry2.ActualWorkers = resultPreparation2.SUM_ActualWorkers; // NUMBER
                newEntry2.OutputNIO = resultPreparation2.SUM_OutputNIO; // NUMBER
                newEntry2.Retest = resultPreparation2.SUM_Retest; // NUMBER
                newEntry2.Machine = Area; // STRING
                newEntry2.OutputIO = resultPreparation2.SUM_OutputIO; // NUMBER
                newEntry2.PlannedWorkers = resultPreparation2.SUM_PlannedWorkers; // STRING
            }else{
                newEntry2.TargetDelta =0; // STRING
                newEntry2.ActualWorkers = 0; // NUMBER
                newEntry2.OutputNIO = 0; // NUMBER
                newEntry2.Retest = 0; // NUMBER
                newEntry2.Machine = Area; // STRING
                newEntry2.OutputIO = 0; // NUMBER
                newEntry2.PlannedWorkers = 0; // STRING
            }
            AreaFooterInfoTableResult.AddRow(newEntry2);
 }
    
         //////////// end footer data reading
    
//var result=AreaFooterInfoTableResult;
for (var x = 0; x < tableLength; x++) {
    var row1 = machines.rows[x];
    var rowMachine1 = row1.name;
    if( Things[rowMachine1].isActive){
        if(Area != "All" && Area!==undefined){
            searchMachineData=false;
            var AreasMachines=Things[Area].KBMachineThings;
            for (q=0;q<AreasMachines.rows.length;q++){
            	if(machines.rows[x].name==AreasMachines.rows[q].KBMachineThing){
            		searchMachineData=true;
                }
            }
        }
        if(Area == "All" || searchMachineData){
    		var rowPlant1 = Things[rowMachine1].KBPlantThing;
    		var rowDevision1 = Things[rowPlant1].KBDivisionThing;
    		var CVS_DMS_Day_Offset_in_Minutes = Things[rowPlant1].CVS_DMS_Day_Offset_in_Minutes;
    		
    		logger.debug ("GetMachinesForProductionAdvisor: rowMachine --> "+rowMachine1+" ("+x+" of "+tableLength+")");
    		logger.debug ("GetMachinesForProductionAdvisor: rowPlant --> "+rowPlant1+" ("+x+" of "+tableLength+")");
    		logger.debug ("GetMachinesForProductionAdvisor: rowDevision --> "+rowDevision1+" ("+x+" of "+tableLength+")");
    
    		if (rowDevision1 == "KBTruckDivisionThing") {
                if (KPICalculationBase == "Day" ||KPICalculationBase == "Week"||KPICalculationBase == "Month" || KPICalculationBase == "Year") {
//        				kpidateStart = dateAddMinutes(kpidateStart, CVS_DMS_Day_Offset_in_Minutes);
//        				kpidateEnd = dateAddMinutes(kpidateEnd, CVS_DMS_Day_Offset_in_Minutes);
        			}
        
                    if (KPICalculationBase == "4Hours") {
//                        logger.error ("GetMachinesForProductionAdvisor3: kpidateEnd --> "+kpidateEnd+" (Machine: "+rowMachine1+")");
        				var ShiftInfotable =  Things["KBKPILocalThingWorxDatabaseThing"].GetFullShiftTime({
                        	date: kpidateEnd /* DATETIME */,
                        	Machine: rowMachine1 /* STRING */
                        });
        				kpidateMachineStart = ShiftInfotable.CurrentStartTime;
        				kpidateMachineEnd = ShiftInfotable.CurrentEndTime;
                        if(kpidateMachineEnd===undefined || kpidateMachineEnd===null || kpidateMachineEnd===""){
                            kpidateMachineStart=kpidateEnd;
                            kpidateMachineEnd=kpidateEnd;}
//                        logger.error ("GetMachinesForProductionAdvisor3: kpidateMachineStart --> "+kpidateMachineStart+" (kpidateEnd: "+kpidateMachineEnd+")");
        			}
                    if (KPICalculationBase == "8Hours") {
        				var ShiftInfotable2 =  Things["KBKPILocalThingWorxDatabaseThing"].GetFullShiftTime({
                        	date: kpidateEnd /* DATETIME */,
                        	Machine: rowMachine1 /* STRING */
                        });
        				kpidateMachineStart = ShiftInfotable2.CurrentStartTime;
        				kpidateMachineEnd = ShiftInfotable2.CurrentEndTime;
                         if(kpidateMachineEnd===undefined || kpidateMachineEnd===null || kpidateMachineEnd===""){
                            kpidateMachineStart=kpidateEnd;
                            kpidateMachineEnd=kpidateEnd;}
        			}
    
    		    var newEntry = new Object();
    		    newEntry.MachineThingName = row1.name; // STRING
    		    newEntry.KPIDateTimeStart = kpidateMachineStart; // DATETIME
    		    newEntry.KPIDateTimeEnd = kpidateMachineEnd; // STRING
    		    newEntry.KPICalculationBase = KPICalculationBase;
    		    newEntry.ShiftIterations = Offset * -1;
                
                    for(var z=0;z<AreaFooterInfoTableResult.rows.length;z++){
                        if(AreaFooterInfoTableResult.rows[z].Machine==Area){
                            var query = {"filters": 
                                {
                                    "type": "EQ",
                                    "fieldName": "Machine",
                                    "value": Area
                                }
                    		};
                            var params = {
                            	t: AreaFooterInfoTableResult /* INFOTABLE */,
                            	query: query /* QUERY */
                            };
                     		var FooterInfotable = Resources["InfoTableFunctions"].Query(params);
                            newEntry.Footer = FooterInfotable;
                        }
                    }
                
          		//logger.debug ("GetMachinesForProductionAdvisor: row -->"+row.name+" ("+x+" of "+tableLength+")");
    			
    			if (Area != "All" && Things[row1.name].isActive && (Things[row1.name].KBPlantThing==Plant || Plant==="")) { 
    				var machinesInArea = Things[Area].KBMachineThings;
                    				// result: INFOTABLE dataShape: "KBProductionAdvisorDataShape"
                     	
    				var tableLength1 = machinesInArea.rows.length;
    				for (var xx=0; xx < tableLength1; xx++) {
    				    var row2 = machinesInArea.rows[xx];
    				    //logger.debug ("GetMachinesForProductionAdvisor: row1 -->"+row1.KBMachineThing+" ("+xx+")");
    				    if (row2.KBMachineThing == row1.name) {
                            UID=UID+1;
                            newEntry.UID=UID;
    						result.AddRow(newEntry);
    					    //logger.debug ("GetMachinesForProductionAdvisor: inserted ("+x+"/"+xx+")");
    				    }
    				}			
    			} 
                    else {
                    if (Things[row1.name].isActive && (Things[row1.name].KBPlantThing==Plant || Plant==='')) {
                                    UID=UID+1;
                                    newEntry.UID=UID;
                                  	result.AddRow(newEntry);
                                  
                    }
    			}
    		}	
        }   
    }
}
        var query1= {
          "sorts": [
              {
                  "fieldName": "Footer",
                  "isAscending": true
              },
              {
                  "fieldName": "MachineThingName",
                  "isAscending": true
              }
          	]
    	};
         var params1 = {
                        t: result /* INFOTABLE */,
                        query: query1 /* QUERY */
                       };
                            
         result = Resources["InfoTableFunctions"].Query(params1);
    	
} catch(err) {
		logger.error(me.name + " on GetCVSMachinesForProductionAdvisor3() Error on line " + err.lineNumber + ": " + err);
}]]></code>
	</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetCVSProductionDeviationDataFromSnowFlake">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: ""
                                        var result = Things["KBSnowflakeDatabaseSmartKPIThing"].GetProductionDeviationDataForMachine({
                                        	StartDate: StartDate /* DATETIME */,
                                        	MachineThing: MachineThing /* STRING */,
                                        	SourceSystem: SourceSystem /* STRING */,
                                        	EndDate: EndDate /* DATETIME */
                                        });
                                        ]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetCVSTimeBasePeriodDates">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try {
    var kpidateStart = new Date();
    var kpidateEnd = new Date();
    var kpidateMachineStart = new Date();
    var kpidateMachineEnd = new Date();  
    
    if (KPICalculationBase == "Day") {
    	kpidateStart = Things["KBTimeHelperThing"].GetCurrentDayStart();
    	kpidateEnd = dateAddDays(kpidateStart,1);
        //kpidateEnd = Things["KBTimeHelperThing"].GetCurrentDayEnd();
    	
    	kpidateStart = dateAddDays(kpidateStart,Offset);
    	kpidateEnd = dateAddDays(kpidateStart,1);
    }
    else if (KPICalculationBase == "Week") {
    	kpidateStart = Things["KBTimeHelperThing"].GetCurrentWeekStart();
        kpidateEnd = dateAddDays(kpidateStart,7);
    	//kpidateEnd = Things["KBTimeHelperThing"].GetCurrentWeekEnd();
    	
    	kpidateStart = dateAddDays(kpidateStart,Offset*7);
    	kpidateEnd = dateAddDays(kpidateEnd,Offset*7);
    }
    else if (KPICalculationBase == "Year") {
    	kpidateStart = Things["KBTimeHelperThing"].GetCurrentYearStart();
        kpidateEnd = dateAddYears(kpidateStart,1);
    	//kpidateEnd = Things["KBTimeHelperThing"].GetCurrentYearEnd();
    	
    	kpidateStart = dateAddYears(kpidateStart,Offset);
    	kpidateEnd = dateAddYears(kpidateEnd,Offset);
    }
    else if (KPICalculationBase == "Month") {
    kpidateStart = Things["KBTimeHelperThing"].GetCurrentMonthStartWithIterations({
			Iterations: Offset /* NUMBER */
		});
		kpidateEnd = Things["KBTimeHelperThing"].GetCurrentMonthEndWithIterations({
			FullTimeSlot: true /* BOOLEAN */ ,
			Iterations: Offset /* NUMBER */
		});
    //	kpidateStart = Things["KBTimeHelperThing"].GetCurrentMonthStart();
    //    kpidateEnd = dateAddMonths(kpidateStart,1);
    //	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentMonthEnd();
    	
    //	kpidateStart = dateAddMonths(kpidateStart,Offset);
    //    kpidateEnd = dateAddMonths(kpidateEnd,Offset);
    //	kpidateEnd =  Things["KBTimeHelperThing"].GetDefinedMonthEnd({
    //		DateTime: kpidateEnd /* DATETIME */
    //	});
    //	
    }
    else if (KPICalculationBase == "4Hours") {
        kpidateStart = dateAddHours(kpidateStart,Offset*4);
    	kpidateEnd = dateAddHours(kpidateEnd,Offset*4);
    }
    else if (KPICalculationBase == "8Hours") {
        kpidateStart = dateAddHours(kpidateStart,Offset*8);
    	kpidateEnd = dateAddHours(kpidateEnd,Offset*8);
    }     
    else if (KPICalculationBase == "Quarter") {
    	kpidateStart = Things["KBTimeHelperThing"].GetCurrentQuarterStart();
    	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentQuarterEnd();
    	
    	kpidateStart = dateAddMinutes(kpidateStart,Offset*15);
    	kpidateEnd = dateAddMinutes(kpidateEnd,Offset*15);
    }
//    else if (KPICalculationBase == "Shift") {
//    	kpidateStart = new Date(123456);
//    	kpidateEnd = new Date(123456);
//    }
    else if (KPICalculationBase == "User set") {
    	kpidateStart = StartDate;
    	kpidateEnd = EndDate;
    }
    
    var params = {
    	infoTableName : "InfoTable",
    	dataShapeName : "PeriodStartEndDataShape"
    };
    
    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

    		var rowMachine = Things[Machine].KBLocalLineThing;
         //   logger.error(me.name + " on GetCVSTimeBasePeriodDates() rowMachine isActive: " + Things[rowMachine].isActive +", Things[rowMachine].KBPlantThing: "+Things[rowMachine].KBPlantThing +", Things[Things[rowMachine].KBPlantThing].KBDivisionThing: "+Things[Things[rowMachine].KBPlantThing].KBDivisionThing+", Things[Things[rowMachine].KBPlantThing].CVS_DMS_Day_Offset_in_Minutes: "+Things[Things[rowMachine].KBPlantThing].CVS_DMS_Day_Offset_in_Minutes);
            if (Things[rowMachine].isActive && (Things[rowMachine].KBPlantThing==Plant || Plant===''|| Plant===undefined)) {
        		var rowPlant = Things[rowMachine].KBPlantThing;
        		var rowDevision = Things[rowPlant].KBDivisionThing;
        		var CVS_DMS_Day_Offset_in_Minutes = Things[rowPlant].CVS_DMS_Day_Offset_in_Minutes;
             	if (rowDevision == "KBTruckDivisionThing") {
                     if (KPICalculationBase == "Day" ||KPICalculationBase == "Week"||KPICalculationBase == "Month" || KPICalculationBase == "Year") {
        		kpidateMachineStart = dateAddMinutes(kpidateStart, CVS_DMS_Day_Offset_in_Minutes);
				kpidateMachineEnd = dateAddMinutes(kpidateEnd, CVS_DMS_Day_Offset_in_Minutes);
        				
        		//		var diff1 = new Date() - kpidateStart;
				//			diff1 = diff1 / (1000*60*60*24);
                //        var diff2 = new Date() - kpidateEnd;
				//			diff2 = diff2 / (1000*60*60*24);
                //         if (KPICalculationBase == "Day" && diff2 > -1 && diff2 < 0){diff2=-1;}
                //         kpidateMachineStart = Things["KBTimeHelperThing"].GetDayStart({DaysBack: diff1, OffsetInMinutes: CVS_DMS_Day_Offset_in_Minutes});
				//		 kpidateMachineEnd = Things["KBTimeHelperThing"].GetDayStart({DaysBack: diff2, OffsetInMinutes: CVS_DMS_Day_Offset_in_Minutes});
                	}
        			if (KPICalculationBase == "4Hours") {
        				var ShiftInfotable =  Things["KBKPILocalThingWorxDatabaseThing"].GetFullShiftTime({
                        	date: kpidateEnd /* DATETIME */,
                        	Machine: rowMachine /* STRING */
                        });
        				kpidateMachineStart = ShiftInfotable.CurrentStartTime;
        				kpidateMachineEnd = ShiftInfotable.CurrentEndTime;
                        if(kpidateMachineEnd===undefined || kpidateMachineEnd===null || kpidateMachineEnd===""){
                            kpidateMachineStart=kpidateEnd;
                            kpidateMachineEnd=kpidateEnd;}
       			}
                    if (KPICalculationBase == "8Hours") {
        				var ShiftInfotable2 =  Things["KBKPILocalThingWorxDatabaseThing"].GetFullShiftTime({
                        	date: kpidateEnd /* DATETIME */,
                        	Machine: rowMachine /* STRING */
                        });
        				kpidateMachineStart = ShiftInfotable2.CurrentStartTime;
        				kpidateMachineEnd = ShiftInfotable2.CurrentEndTime;
                         if(kpidateMachineEnd===undefined || kpidateMachineEnd===null || kpidateMachineEnd===""){
                            kpidateMachineStart=kpidateEnd;
                            kpidateMachineEnd=kpidateEnd;}
        			}
                   if (KPICalculationBase == "Shift") {
                       //logger.debug(me.name + " on Temp1() : " + kpidateMachineStart + ", " + kpidateMachineEnd);
                       // dateValue:DATETIME
                       var dateValue1 = new Date();
                       var UtcTimeOffset1 = dateValue1.getTimezoneOffset();

                       var ShiftTimes1 = Things["KBKPILocalThingWorxDatabaseThing"].GetFullShiftTimeMinus_With_UTC_Time_Offset({
                       	date: dateValue1 /* DATETIME */ ,
                       	UtcTimeOffset: UtcTimeOffset1 /* DATETIME */ ,
                       	Machine: Things[Machine].KBLocalLineThing /* STRING */ ,
                       	Iterations: Offset
                       });
                       kpidateMachineStart=ShiftTimes1.rows[0].CurrentStartTime;
                       kpidateMachineEnd=ShiftTimes1.rows[0].CurrentEndTime;
                   }
                                    // KBProductionAdvisorDataShape entry object
                    var newEntry = new Object();
                    newEntry.KPIDateTimeStart = kpidateMachineStart;
                    newEntry.KPIDateTimeEnd = kpidateMachineEnd;
                    result.AddRow(newEntry);
               }
            }
    
} catch(err) {
		logger.error(me.name + " on GetCVSTimeBasePeriodDates() Error on line " + err.lineNumber + ": " + err);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetDataForMachineAdminMashup">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBMachineAdminDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBMachineAdminDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);


var params = {
	maxItems: 999999 /* NUMBER */,
	nameMask: undefined /* STRING */,
	query: undefined /* QUERY */,
	thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */,
	tags: undefined /* TAGS */
};

// result: INFOTABLE dataShape: RootEntityList
var machines = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params);

var tableLength = machines.rows.length;

for (var x = 0; x < tableLength; x++) {
	var row = machines.rows[x];
	//Your code here
    // KBMachineAdminDataShape entry object
    try {
        var newEntry = new Object();
        newEntry.MachineThingName = row.name; // STRING
        newEntry.MainStationForStatus = Things[row.name].MainStationForLineStatus; // STRING
        //***DEPRECATED*** newEntry.ShiftFactor = Things[row.name].ShiftFactorInPercent; // NUMBER

        try {
            newEntry.DisplayName = Things[row.name].DisplayName; // STRING
            newEntry.FullName = Things[row.name].FullName; // STRING
            newEntry.isActive = Things[row.name].isActive; // STRING
        } catch(err) {
            newEntry.DisplayName = "KBLocalMachineSmartKPIShape is not assigned!";
        }
        result.AddRow(newEntry);
    } catch(err) {
    }
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetDataForStationAdminMashup">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params0 = {
	infoTableName : "InfoTable",
	dataShapeName : "KBStationAdminDataShape"
};
// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBMachineAdminDataShape)
var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params0);

var params = {
	maxItems: 999999 /* NUMBER */,
	nameMask: undefined /* STRING */,
	query: undefined /* QUERY */,
	thingTemplate: "KBLocalStationThingTemplate" /* THINGTEMPLATENAME */,
	tags: undefined /* TAGS */
};
// result: INFOTABLE dataShape: RootEntityList
var stationList = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params);
//var result = stationList;

var tableLength = stationList.rows.length;
for (var x=0; x < tableLength; x++) {
    var row = stationList.rows[x];
    var stationThingName = row.name;
    var displayName = Things[stationThingName].DisplayName;
    var fullName = Things[stationThingName].FullName;
    var isActive = Things[stationThingName].isActive;
    var lineThingName = Things[stationThingName].KBLocalLineThing;
    var linkToAndon = Things[stationThingName].IsOperatorInputScreenUsedForThisStation;
    outputTable.AddRow({
    	name: stationThingName,
        DisplayName: displayName,
        FullName: fullName,
        isActive: isActive,
        LineThingName: lineThingName,
        linkToAndon: linkToAndon
    });
}
var result = outputTable;

/*
var tableLength = machines.rows.length;
for (var x = 0; x < tableLength; x++) {
	var row = machines.rows[x];
	//Your code here
    // KBMachineAdminDataShape entry object
    try {
        var newEntry = new Object();
        newEntry.MachineThingName = row.name; // STRING
        newEntry.MainStationForStatus = Things[row.name].MainStationForLineStatus; // STRING
        //***DEPRECATED*** newEntry.ShiftFactor = Things[row.name].ShiftFactorInPercent; // NUMBER

        try {
            newEntry.DisplayName = Things[row.name].DisplayName; // STRING
            newEntry.FullName = Things[row.name].FullName; // STRING
            newEntry.isActive = Things[row.name].isActive; // STRING
        } catch(err) {
            newEntry.DisplayName = "KBLocalMachineSmartKPIShape is not assigned!";
        }
        result.AddRow(newEntry);
    } catch(err) {
    }
}
*/]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetDefaultStationForTimeBase">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params3 = {
	maxItems: undefined /* NUMBER */ ,
	nameMask: undefined /* STRING */ ,
	thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */
};

// result: INFOTABLE dataShape: SpotlightSearchWithPersistent
if (KBLocalLineThing == '' || KBLocalLineThing == null || KBLocalLineThing == undefined) {
	var MachineListInfotable = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params3);
	for (var i = 0; i < MachineListInfotable.getRowCount(); i++) {
		if (Things[MachineListInfotable.rows[i].name].isActive) {
			KBLocalLineThing = MachineListInfotable.rows[i].name;
//            result = MachineListInfotable.rows[i].name;
			i = MachineListInfotable.getRowCount();
		}
	}
}

var params1 = {
	infoTableName: "InfoTable",
	dataShapeName: "KBNameForMenuDataShape"
};
// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params1);


var params2 = {
	maxItems: undefined /* NUMBER */ ,
	nameMask: undefined /* STRING */ ,
	thingTemplate: "KBLocalStationThingTemplate" /* THINGTEMPLATENAME */
};

var thingList1 = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params2);
for (var j = 0; j < thingList1.getRowCount(); j++) {
	if ((Things[thingList1.rows[j].name].KBLocalLineThing == KBLocalLineThing || KBLocalLineThing == "" || KBLocalLineThing == undefined && KBLocalLineThing == null)) {
		// KBNameForMenuDataShape entry object
		var newEntry1 = new Object();
		newEntry1.ThingName = thingList1.rows[j].name;
		newEntry1.DisplayName = Things[thingList1.rows[j].name].DisplayName;

		if (newEntry1.DisplayName == null || newEntry1.DisplayName == "") {
			newEntry1.DisplayName = newEntry1.ThingName;
		}
		result.AddRow(newEntry1);
	}
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetDMSItemsForMenue">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var newEntry = new Object();
newEntry.DisplayName = "Culminated Number of Parts"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBDailyManagementSystemCulminatedNumberOfPartsMashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Output per Hour (Bar Chart)"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBDailyManagementSystemOutputPerHourBarMashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Output per Hour (Line Chart)"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBDailyManagementSystemOutputPerHourMashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Cycle Time Analysis (Times < 5 x Processing Time APO)"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBDailyManagementSystemCycleTime5APOMashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Cycle Time Analysis (Times < 10 x Processing Time APO)"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBDailyManagementSystemCycleTime10APOMashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Cycle Time Analysis (All Times)"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBDailyManagementSystemCycleTimeAllMashup";
result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetGlobalKpisForMenue">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var newEntry = new Object();
newEntry.DisplayName = "Rate of Quality"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBRateOfQualityMashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Output"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBOutputMashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "OEE2"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBOEE2Mashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Utilization"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBUtilizationMashup";
result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetKpiIoNioLimitsForBars">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var ll = 9999999;
var ul = 0;

if (KBKpiSummaryShape1 != null) {
	var tableLength = KBKpiSummaryShape1.rows.length;
	for (var x = 0; x < tableLength; x++) {
		var row = KBKpiSummaryShape1.rows[x];
		//Your code here
	    if (row.OK > ul) {
	        ul = row.OK;
	    }
	    if (row.OK < ll && row.OK > 0) {
	        ll = row.OK;
	    }
	    if (row.NOK > ul) {
	        ul = row.NOK;
	    }
	    if (row.NOK < ll && row.NOK > 0) {
	        ll = row.NOK;
	    }
	}
}

if (KBKpiSummaryShape2 != null) {
	var tableLength = KBKpiSummaryShape2.rows.length;
	for (var x = 0; x < tableLength; x++) {
		var row = KBKpiSummaryShape2.rows[x];
		//Your code here
	    if (row.OK > ul) {
	        ul = row.OK;
	    }
	    if (row.OK < ll && row.OK > 0) {
	        ll = row.OK;
	    }
	    if (row.NOK > ul) {
	        ul = row.NOK;
	    }
	    if (row.NOK < ll && row.NOK > 0) {
	        ll = row.NOK;
	    }
	}
}

if (KBKpiSummaryShape3 != null) {
	var tableLength = KBKpiSummaryShape3.rows.length;
	for (var x = 0; x < tableLength; x++) {
		var row = KBKpiSummaryShape3.rows[x];
		//Your code here
	    if (row.OK > ul) {
	        ul = row.OK;
	    }
	    if (row.OK < ll && row.OK > 0) {
	        ll = row.OK;
	    }
	    if (row.NOK > ul) {
	        ul = row.NOK;
	    }
	    if (row.NOK < ll && row.NOK > 0) {
	        ll = row.NOK;
	    }
	}
}

if (KBKpiSummaryShape4 != null) {
	var tableLength = KBKpiSummaryShape4.rows.length;
	for (var x = 0; x < tableLength; x++) {
		var row = KBKpiSummaryShape4.rows[x];
		//Your code here
	    if (row.OK > ul) {
	        ul = row.OK;
	    }
	    if (row.OK < ll && row.OK > 0) {
	        ll = row.OK;
	    }
	    if (row.NOK > ul) {
	        ul = row.NOK;
	    }
	    if (row.NOK < ll && row.NOK > 0) {
	        ll = row.NOK;
	    }
	}
}
var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBKpiSummaryShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBKpiSummaryShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var ll1 = Math.round(ll)-1;
var ul1 = Math.round(ul)+1;

if (ll1 < 0 || ll1 == 9999998) {
	ll1 = 0;
}

if (ul1 = 1) {
	ul1 = 100;
}

// KBKpiSummaryShape entry object
var newEntry = new Object();
newEntry.NOK = ll1; // INTEGER
newEntry.OK = ul1; // INTEGER

result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetKpiLimitsForBars">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var ll = 9999999;
var ul = 0;

if (KBKpiSummaryShape1 != null) {
	var tableLength = KBKpiSummaryShape1.rows.length;
	for (var x = 0; x < tableLength; x++) {
		var row = KBKpiSummaryShape1.rows[x];
		if (row.OK === undefined) {
			if (row.KPI > ul) {
				ul = row.KPI;
			}
			if (row.KPI < ll && row.KPI > 0) {
				ll = row.KPI;
			}
		} else {
        	if (row.OK > ul) {
				ul = row.OK;
			}
			if (row.OK < ll && row.OK > 0) {
				ll = row.OK;
			}
			if (row.NOK > ul) {
				ul = row.NOK;
			}
			if (row.NOK < ll && row.NOK > 0) {
				ll = row.NOK;
			}
       	}

	}
}

if (KBKpiSummaryShape2 != null) {
	var tableLength2 = KBKpiSummaryShape2.rows.length;
	for (var x2 = 0; x2 < tableLength2; x2++) {
		var row2 = KBKpiSummaryShape2.rows[x2];
		if (row2.OK === undefined) {
			if (row2.KPI > ul) {
				ul = row2.KPI;
			}
			if (row2.KPI < ll && row2.KPI > 0) {
				ll = row2.KPI;
			}
		} else {
       		if (row2.OK > ul) {
				ul = row2.OK;
			}
			if (row2.OK < ll && row2.OK > 0) {
				ll = row2.OK;
			}
			if (row2.NOK > ul) {
				ul = row2.NOK;
			}
			if (row2.NOK < ll && row2.NOK > 0) {
				ll = row2.NOK;
			}
          }
	}
}

if (KBKpiSummaryShape3 != null) {
	var tableLength3 = KBKpiSummaryShape3.rows.length;
	for (var x3 = 0; x3 < tableLength3; x3++) {
		var row3 = KBKpiSummaryShape3.rows[x3];
		if (row3.OK === undefined) {
			if (row3.KPI > ul) {
				ul = row3.KPI;
			}
			if (row3.KPI < ll && row3.KPI > 0) {
				ll = row3.KPI;
			}
		} else {
        	if (row3.OK > ul) {
				ul = row3.OK;
			}
			if (row3.OK < ll && row3.OK > 0) {
				ll = row3.OK;
			}
			if (row3.NOK > ul) {
				ul = row3.NOK;
			}
			if (row3.NOK < ll && row3.NOK > 0) {
				ll = row3.NOK;
			}
    	}
	}
}

if (KBKpiSummaryShape4 != null) {
	var tableLength4 = KBKpiSummaryShape4.rows.length;
	for (var x4 = 0; x4 < tableLength4; x4++) {
		var row4 = KBKpiSummaryShape4.rows[x4];
		if (row4.OK === undefined) {
			if (row4.KPI > ul) {
				ul = row4.KPI;
			}
			if (row4.KPI < ll && row4.KPI > 0) {
				ll = row4.KPI;
			}
		} else {
         	if (row4.OK > ul) {
				ul = row4.OK;
			}
			if (row4.OK < ll && row4.OK > 0) {
				ll = row4.OK;
			}
			if (row4.NOK > ul) {
				ul = row4.NOK;
			}
			if (row4.NOK < ll && row4.NOK > 0) {
				ll = row4.NOK;
			}
         }
	}
}
var params = {
	infoTableName: "InfoTable",
	dataShapeName: "KBKpiSummaryShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBKpiSummaryShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var ll1 = Math.round(ll) - 1;
var ul1 = Math.round(ul) + 1;

if (ll1 < 0 || ll1 == 9999998) {
	ll1 = 0;
}

if (ul1 == 1) {
	ul1 = 100;
}
// KBKpiSummaryShape entry object
var newEntry = new Object();
newEntry.NOK = ll1; // INTEGER
newEntry.OK = ul1; // INTEGER

result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetKPIRailFromInfoTable">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var tableLength = AllKPIsRailInfoTable.rows.length;
var result = 0.0;

for (var x = 0; x < tableLength; x++) {
	var row = AllKPIsRailInfoTable.rows[x];
	//Your code here
    
    if (row.Label == KPIName) {
        result = row.KPI;
    }
    
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetKPITruckFromInfoTable">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var tableLength = 0;
try {
	tableLength = AllKPIsTruckInfoTable.rows.length;
} catch(err) {
	logger.debug ("GetKPITruckFromInfoTable: "+err);
}

var result = 0.0;

for (var x = 0; x < tableLength; x++) {
	var row = AllKPIsTruckInfoTable.rows[x];
	//Your code here
    
    if (row.Label == KPIName) {
        result = row.KPI;
    }
    
}]]></code>
	</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetListOfMachinesForPlant">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: ""
                                        var MachinesRawData = Things["KBSnowflakeDatabaseSmartKPIThing"].getListOFMachinesForPlant();
                                        var query;
                                        query = {  	
                                        	"filters": {
                                                   	"type": "EQ",
                                                       "fieldName": "PLANT",
                                                       "value": Plant                                     				
                                                    }
                                                };	
                                        		
                                        var params = {
                                                t: MachinesRawData /* INFOTABLE */,
                                                query: query /* QUERY */
                                                };
                                                    
                                              
                                        var Data = Resources["InfoTableFunctions"].Query(params);
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBActiveMachinesForPlant"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAllPlantsNameDataShape)
                                        var MachinesInfotable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var tableLength = Data.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = Data.rows[x];    
                                            var obj ={};    
                                            obj.Plant=row.PLANT;
                                            obj.SourceSystem=row.SOURCESYSTEM;
                                            obj.MachineThingName=row.MACHINETHINGNAME;
                                            obj.MachineName=row.MACHINENAME;    
                                            MachinesInfotable.AddRow(obj);     
                                        }
                                        
                                        var result = Resources["InfoTableFunctions"].Sort( {
                                        
                                             sortColumn: "MachineName", t: MachinesInfotable, ascending: true
                                        
                                        } );
                                        ]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetLocalAreasforSmartKPIVisualization">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[// result: INFOTABLE dataShape: RootEntityList
var implementingThings = ThingTemplates["KBLocalAreaThingTemplate"].GetImplementingThingsWithData();

// KBNameForMenuDataShape entry object
var newEntry = new Object();
newEntry.DisplayName = "All"; // STRING - isPrimaryKey = true
newEntry.ThingName = KBPlantThing;

var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

result.AddRow(newEntry);


for (var i = 0; i<implementingThings.getRowCount(); i++) {
    if (Things[implementingThings.getRow(i).name].KBPlantThing == KBPlantThing && Things[implementingThings.getRow(i).name].isActive) {
        var newEntry = new Object();
        newEntry.DisplayName = Things[implementingThings.getRow(i).name].DisplayName;
        newEntry.ThingName = implementingThings.getRow(i).name;
        result.AddRow(newEntry);
    }
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetLocalCVSAreasforProductionAdvisor">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var location = Resources["KBThingWorxServerSystem"].GetLocationIdentifier();


// result: INFOTABLE dataShape: RootEntityList
var implementingThings = ThingTemplates["KBLocalAreaThingTemplate"].GetImplementingThingsWithData();

// KBNameForMenuDataShape entry object
var newEntry = new Object();
newEntry.DisplayName = "All"; // STRING - isPrimaryKey = true
newEntry.ThingName = "All";

var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

if (location != "KEC" && location != "LIB") {
	result.AddRow(newEntry);
}

var tableLength = implementingThings.getRowCount();
for (var i = 0; i<tableLength; i++) {

	try {
		var row = implementingThings.getRow(i);
	
		var rowArea = row.name;
		var rowPlant = Things[rowArea].KBPlantThing;
		var rowDevision = Things[rowPlant].KBDivisionThing;
		
		logger.debug ("GetLocalCVSAreasforProductionAdvisor: rowArea --> "+rowArea+" ("+i+" of "+tableLength+")");
		logger.debug ("GetLocalCVSAreasforProductionAdvisor: rowPlant --> "+rowPlant+" ("+i+" of "+tableLength+")");
		logger.debug ("GetLocalCVSAreasforProductionAdvisor: rowDevision --> "+rowDevision+" ("+i+" of "+tableLength+")");
	
	    if (Things[rowArea].isActive && rowDevision == "KBTruckDivisionThing") {
//	        var newEntry = new Object();
	        newEntry.DisplayName = row.DisplayName;
	        newEntry.ThingName = row.name;
	        if (newEntry.DisplayName == null || newEntry.DisplayName == "") {
	        	newEntry.DisplayName = newEntry.ThingName;
	        }
	        result.AddRow(newEntry);
	    }
	} catch(err) {
		logger.debug ("GetLocalCVSAreasforProductionAdvisor: "+err);
	}
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetLocalMachinesforSmartKPIVisualization">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try{
    
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
var KBPlantThing="";  
var AreaSelected=false;
 if(AreaThing!=="" && AreaThing!==undefined && AreaThing!==null){
   
// result: BOOLEAN
	if(Resources["PTC.Factory.CommonUtilities"].DoesThingExists({thingName: AreaThing})){
        if(Things[AreaThing].GetThingTemplate().name == "KBLocalAreaThingTemplate"){
            KBPlantThing=Things[AreaThing].KBPlantThing;
            AreaSelected=true;
        }else if(Things[AreaThing].GetThingTemplate().name == "KBLocalPlantThingTemplate"){
            KBPlantThing=AreaThing;
        }
    }

     
  if (AreaSelected ===true) {
     	var thingList2 = Things[AreaThing].KBMachineThings;
       logger.error("DEBUG on service GetLocalMachinesforSmartKPIVisualization: " +thingList2.getRowCount()+ ", "+AreaSelected);
   // 	 logger.debug("Debug on service GetLocalMachinesforSmartKPIVisualization1: " +Things[thingList2.rows[0].name].DisplayName);
    	for (var i = 0; i < thingList2.getRowCount(); i++) {
             
           if (Things[thingList2.rows[i].KBMachineThing].isActive && (Things[thingList2.rows[i].KBMachineThing].KBPlantThing==KBPlantThing || KBPlantThing==""  || KBPlantThing==undefined && KBPlantThing==null)) {
               // KBNameForMenuDataShape entry object
                var newEntry = new Object();
                newEntry.DisplayName = Things[thingList2.rows[i].KBMachineThing].DisplayName; // STRING - isPrimaryKey = true
                newEntry.ThingName = thingList2.rows[i].KBMachineThing;
                if (newEntry.DisplayName == null || newEntry.DisplayName == "") {
                	newEntry.DisplayName = newEntry.ThingName;
                }
                result.AddRow(newEntry);
           }
        }
      
  }else{
	var params1 = {
        	maxItems: undefined /* NUMBER */ ,
        	nameMask: undefined /* STRING */ ,
        	thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */
        };        
        // result: INFOTABLE dataShape: SpotlightSearchWithPersistent
        var thingList1 = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params1);
        logger.debug("Debug on service GetLocalMachinesforSmartKPIVisualization2: " +Things[thingList1.rows[0].name].DisplayName);
        for (var j = 0; j < thingList1.getRowCount(); j++) {
           if (Things[thingList1.rows[j].name].isActive && (Things[thingList1.rows[j].name].KBPlantThing==KBPlantThing || KBPlantThing==""  || KBPlantThing==undefined && KBPlantThing==null)) {
               // KBNameForMenuDataShape entry object
                var newEntry1 = new Object();
                newEntry1.DisplayName = Things[thingList1.rows[j].name].DisplayName; // STRING - isPrimaryKey = true
                newEntry1.ThingName = thingList1.rows[j].name;
                if (newEntry1.DisplayName == null || newEntry1.DisplayName == "") {
                	newEntry1.DisplayName = newEntry1.ThingName;
                }
                result.AddRow(newEntry1);
            }
        }
  }
}else{      
        var params1 = {
        	maxItems: undefined /* NUMBER */ ,
        	nameMask: undefined /* STRING */ ,
        	thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */
        };        
        // result: INFOTABLE dataShape: SpotlightSearchWithPersistent
        var thingList1 = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params1);
        logger.debug("Debug on service GetLocalMachinesforSmartKPIVisualization2: " +Things[thingList1.rows[0].name].DisplayName);
        for (var j = 0; j < thingList1.getRowCount(); j++) {
           if (Things[thingList1.rows[j].name].isActive && (Things[thingList1.rows[j].name].KBPlantThing==KBPlantThing || KBPlantThing==""  || KBPlantThing==undefined && KBPlantThing==null)) {
               // KBNameForMenuDataShape entry object
                var newEntry1 = new Object();
                newEntry1.DisplayName = Things[thingList1.rows[j].name].DisplayName; // STRING - isPrimaryKey = true
                newEntry1.ThingName = thingList1.rows[j].name;
                if (newEntry1.DisplayName == null || newEntry1.DisplayName == "") {
                	newEntry1.DisplayName = newEntry1.ThingName;
                }
                result.AddRow(newEntry1);
            }
        }
  }

} catch(err) {
	logger.error("Error on service GetLocalMachinesforSmartKPIVisualization: " + err + " on thing:" + me.name+ " at:" + err.lineNumber);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetLocalMachinesList">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[// result: INFOTABLE dataShape: "KBNameForMenuDataShape"
var plantDetail =  me.GetLocalPlantsforSmartKPIVisualization({
	KBDivisionThingName: Division /* STRING */
});

var divisionName= plantDetail.rows[0].ThingName; 

// result: INFOTABLE dataShape: "KBNameForMenuDataShape"
var areaDetail =  me.GetLocalAreasforSmartKPIVisualization({
	KBPlantThing: divisionName /* THINGNAME */
});

var tableLength = areaDetail.rows.length;
var areaThingName;
for (var x=0; x < tableLength; x++) {
    var row = areaDetail.rows[x];
    
    if(row.DisplayName =="All")
    {
      areaThingName  =row.ThingName;
    }
    //Your code here
}

// result: INFOTABLE dataShape: "KBNameForMenuDataShape"
var result =  me.GetLocalMachinesforSmartKPIVisualization({
	AreaThing: areaThingName /* STRING */
});]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetLocalPlantsforSmartKPIVisualization">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[logger.debug("KBSmartKPIHelperThing/GetLocalPlantsforSmartKPIVisualization: Starting");

// implementingThings: INFOTABLE dataShape: RootEntityList
var implementingThings = ThingTemplates["KBLocalPlantThingTemplate"].GetImplementingThingsWithData();
var tableLength = implementingThings.rows.length;

logger.debug("KBSmartKPIHelperThing/GetLocalPlantsforSmartKPIVisualization: No of Things implementing KBLocalPlantThingTemplate: " + tableLength);


var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

for (var x = 0; x < tableLength; x++) {
	var row = implementingThings.rows[x];
	//Your code here


	try {
		var rowDevision = Things[row.name].KBDivisionThing;
		
		logger.debug ("KBSmartKPIHelperThing/GetLocalPlantsforSmartKPIVisualization: rowDevision --> "+rowDevision+" ("+x+" of "+tableLength+")");
		if (rowDevision == KBDivisionThingName) {
	
			logger.debug("KBSmartKPIHelperThing/GetLocalPlantsforSmartKPIVisualization: Adding: " + row.name);
	    
	        // KBNameForMenuDataShape entry object
	        var newEntry = new Object();
	        newEntry.DisplayName = Things[row.name].DisplayName; // STRING
	        newEntry.ThingName = row.name; // STRING
	
	        result.AddRow(newEntry);
		}
	} catch(err) {
		logger.debug ("GetMachinesForProductionAdvisor: "+err);
	}


}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetLocalStationForTimeBase">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[// infotable with result 
var params1 = {
	infoTableName: "InfoTable",
	dataShapeName: "KBNameForMenuDataShape"
};
// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params1);
// First condition 
if (BaseStationByOpeartor != '' && BaseStationByOpeartor != null && BaseStationByOpeartor != undefined) {
	KBLocalLineThing = BaseStationByOpeartor;
}
//2 condition
if (KBLocalLineThing == '' || KBLocalLineThing == null || KBLocalLineThing == undefined) {
	var params3 = {
		maxItems: undefined /* NUMBER */ ,
		nameMask: undefined /* STRING */ ,
		thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */
	};
	var MachineListInfotable = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params3);
	for (var i = 0; i < MachineListInfotable.getRowCount(); i++) {
		if (Things[MachineListInfotable.rows[i].name].isActive) {
			KBLocalLineThing = MachineListInfotable.rows[i].name;
			//            result = MachineListInfotable.rows[i].name;
			i = MachineListInfotable.getRowCount();
		}
	}
}
var params2 = {
	maxItems: undefined /* NUMBER */ ,
	nameMask: undefined /* STRING */ ,
	thingTemplate: "KBLocalStationThingTemplate" /* THINGTEMPLATENAME */
};
var thingList1 = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params2);
for (var j = 0; j < thingList1.getRowCount(); j++) {
	if ((Things[thingList1.rows[j].name].KBLocalLineThing == KBLocalLineThing)) {
		// KBNameForMenuDataShape entry object
		var newEntry1 = new Object();
		newEntry1.ThingName = thingList1.rows[j].name;
		newEntry1.DisplayName = Things[thingList1.rows[j].name].DisplayName;
		if (newEntry1.DisplayName == null || newEntry1.DisplayName == "") {
			newEntry1.DisplayName = newEntry1.ThingName;
		}
		result.AddRow(newEntry1);
	}
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMachinesforSmartKPIVisualization">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
	maxItems: undefined /* NUMBER */,
	nameMask: AreaThing /* STRING */,
	type: "Thing" /* STRING */,
	tags: undefined /* TAGS */
};

// result: INFOTABLE dataShape: RootEntityList
var thingList1 = Resources["EntityServices"].GetEntityList(params);

var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var newEntry = new Object();
newEntry.DisplayName = "All"; // STRING - isPrimaryKey = true
newEntry.ThingName = AreaThing;
result.AddRow(newEntry);


if (thingList1.getRowCount() > 0) {
	// result: INFOTABLE dataShape: EntityList
	if (Things[thingList1.getRow(0).name].GetThingTemplate().getRow(0).name == "KBGlobalAreaThingTemplate") {
        var thingList2 = Things[thingList1.getRow(0).name].KBMachineThings;
        for (var i = 0; i < thingList2.getRowCount(); i++) {
            if (Things[thingList2.getRow(i).KBMachineThing].isActive) {
                // KBNameForMenuDataShape entry object
                var newEntry = new Object();
                newEntry.DisplayName = Things[thingList2.getRow(i).KBMachineThing].DisplayName; // STRING - isPrimaryKey = true
                newEntry.ThingName = thingList2.getRow(i).KBMachineThing;
                result.AddRow(newEntry);
            }
        }
    } else {
        // result: INFOTABLE dataShape: RootEntityList
        var thingList2 = ThingShapes["KBSmartKPIGenericThingShape"].GetImplementingThingsWithData();
        
        for (var i = 0; i < thingList2.getRowCount(); i++) {
            if (Things[thingList2.getRow(i).name].KBPlantThing != null 
            	&& Things[thingList2.getRow(i).name].KBPlantThing == AreaThing
            	&& Things[thingList2.getRow(i).name].isActive
            	&& Things[thingList2.getRow(i).name].GetThingTemplate().getRow(0).name != "KBGlobalAreaThingTemplate") {
            // KBNameForMenuDataShape entry object
            var newEntry = new Object();
            newEntry.DisplayName = Things[thingList2.getRow(i).name].DisplayName; // STRING - isPrimaryKey = true
            newEntry.ThingName = thingList2.getRow(i).name;
            result.AddRow(newEntry);
            }

        }
    }
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMainStationsFromMachineInfotable">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try {
    // for loop in the for loop 
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};
//CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);  
var tableLength = MachinesSelected.getRowCount();
    for (var x=0; x < tableLength; x++) {
        var row = MachinesSelected.rows[x];
        var newEntry = new Object();
            newEntry.DisplayName = row.DisplayName;
            newEntry.ThingName = Things[row.ThingName].MainStationForLineStatus; 
            newEntry.DBKpiName = row.ThingName;
            
        result.AddRow(newEntry);
    }
} catch(err) {logger.error(err);
             }]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMultiselctLast30KpiTruck">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var tableLength = SelectedKPIList.rows.length;
var resultRow, KPIName;
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBKpiMultiSelectDataShapeForTimeSeries"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBKpiMultiSelectDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

/* Navigate rows for KPI
   Add dynamic columns to Infotable */
for (var x=0; x < tableLength; x++) {
    var row = SelectedKPIList.rows[x];
    KPIName = SelectedKPIList.rows[x].DisplayName;
    resultRow = Things["KBKPILocalThingWorxDatabaseThing"].GetKpiDataTruckLast30Days({
		Machine: Machine /* STRING */,
		KPIName: KPIName/* STRING */
	});
    var queryLength = resultRow.rows.length; 
	for (var i=0;  i < queryLength; i++) {
   		var qrow = resultRow.rows[i];
        
        var resObject = new Object();
        var KPIDisplayName = KPIName;
        
//        var newField = new Object();
//		newField.name = 'KPI'+x;
//		newField.baseType = 'NUMBER';
//        result.AddField(newField);
        resObject.KPIDateTime = qrow.KPIDateTime;
        resObject['KPI'+x] = qrow.KPIFloatValue;
              
        result.AddRow(resObject);
    }
}


//var tableLength = SelectedKPIList.rows.length;
//var resultRow, KPIName;
//var params = {
//    infoTableName : "InfoTable",
//    dataShapeName : "KBKpiMultiSelectDataShape"
//};
//
//// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBKpiMultiSelectDataShape)
//var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
//
///* Navigate rows for KPI
//   Add dynamic columns to Infotable */
//for (var x=0; x < tableLength; x++) {
//    var row = SelectedKPIList.rows[x];
//    KPIName = SelectedKPIList.rows[x].DisplayName;
//    resultRow = Things["KBKPILocalThingWorxDatabaseThing"].GetKpiDataTruckLast30Days({
//		Machine: Machine /* STRING */,
//		KPIName: KPIName/* STRING */
//	});
//    var queryLength = resultRow.rows.length; 
//	for (var i=0;  i < queryLength; i++) {
//   		var qrow = resultRow.rows[i];
//          
//        var resObject = new Object();
//        resObject.KPIValue = qrow.KPIFloatValue;
//        resObject.KPIDateTime = qrow.KPIDateTime;
//        resObject.Label = KPIName;
//        result.AddRow(resObject);
//    }
//}
//
//
//var tableLength = SelectedKPIList.rows.length;
//var resultRow, KPIName;
//var result = DataShapes["KBKpiMultiSelectDataShape"].CreateValues();
//for (var x=0; x < tableLength; x++) {
//    var row = SelectedKPIList.rows[x];
//    KPIName = SelectedKPIList.rows[x].DisplayName;
//   // logger.error("KPI "+KPIName);
//    resultRow = Things["KBKPILocalThingWorxDatabaseThing"].GetKpiDataTruckLast30Days({
//		Machine: Machine /* STRING */,
//		KPIName: KPIName/* STRING */
//	});
//    var queryLength = resultRow.rows.length;
//	for (var i=0;  i < queryLength; i++) {
//   		var qrow = resultRow.rows[i];
//        var newEntry = new Object();
//        newEntry.KPIDateTime = qrow.KPIDateTime; // STRING
//        if (x==0)
//       		newEntry.KPIValue = qrow.KPIFloatValue; // NUMBER
//        else 
//            newEntry.SKPI = qrow.KPIFloatValue;
//        result.AddRow(newEntry);
//       
//	}
//}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMultiselctTop3KpiTruckDataDay">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var tableLength = SelectedKPIList.rows.length;
var resultRow, KPIName;
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBKpiMultiSelectDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBKpiMultiSelectDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

/* Navigate rows for KPI
   Add dynamic columns to Infotable */
for (var x=0; x < tableLength; x++) {
    var row = SelectedKPIList.rows[x];
    KPIName = SelectedKPIList.rows[x].DisplayName;
    resultRow = Things["KBKPILocalThingWorxDatabaseThing"].GetTop3KpiTruckDataDay({
		Machine: Machine /* STRING */,
		KPIName: KPIName/* STRING */
	});
    var queryLength = resultRow.rows.length; 
	for (var i=0;  i < queryLength; i++) {
   		var qrow = resultRow.rows[i];
        var resObject = new Object();
        var KPIDisplayName = KPIName;
        resObject.Label = qrow.Label;
        resObject[KPIDisplayName] = qrow.KPI;
        var newField = new Object();
		newField.name = KPIDisplayName;
		newField.baseType = 'NUMBER';
		result.AddField(newField);
		result.AddRow(resObject);
    }
}
]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMultiselctTop3KpiTruckMonth">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var tableLength = SelectedKPIList.rows.length;
var resultRow, KPIName;
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBKpiMultiSelectDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBKpiMultiSelectDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

/* Navigate rows for KPI
   Add dynamic columns to Infotable */
for (var x=0; x < tableLength; x++) {
    var row = SelectedKPIList.rows[x];
    KPIName = SelectedKPIList.rows[x].DisplayName;
    resultRow = Things["KBKPILocalThingWorxDatabaseThing"].GetTop3KpiTruckDataMonth({
		Machine: Machine /* STRING */,
		KPIName: KPIName/* STRING */
	});
    var queryLength = resultRow.rows.length; 
	for (var i=0;  i < queryLength; i++) {
   		var qrow = resultRow.rows[i];
        var resObject = new Object();
        var KPIDisplayName = KPIName;
        resObject.Label = qrow.Label;
        resObject[KPIDisplayName] = qrow.KPI;
        var newField = new Object();
		newField.name = KPIDisplayName;
		newField.baseType = 'NUMBER';
		result.AddField(newField);
		result.AddRow(resObject);
    }
}
]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMultiselctTop3KpiTruckWeek">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var tableLength = SelectedKPIList.rows.length;
var resultRow, KPIName;
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBKpiMultiSelectDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBKpiMultiSelectDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

/* Navigate rows for KPI
   Add dynamic columns to Infotable */
for (var x=0; x < tableLength; x++) {
    var row = SelectedKPIList.rows[x];
    KPIName = SelectedKPIList.rows[x].DisplayName;
    resultRow = Things["KBKPILocalThingWorxDatabaseThing"].GetTop3KpiTruckDataWeek({
		Machine: Machine /* STRING */,
		KPIName: KPIName/* STRING */
	});
    var queryLength = resultRow.rows.length; 
	for (var i=0;  i < queryLength; i++) {
   		var qrow = resultRow.rows[i];
        var resObject = new Object();
        var KPIDisplayName = KPIName;
        resObject.Label = qrow.Label;
        resObject[KPIDisplayName] = qrow.KPI;
        var newField = new Object();
		newField.name = KPIDisplayName;
		newField.baseType = 'NUMBER';
		result.AddField(newField);
		result.AddRow(resObject);
    }
}
]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMultiselctTop3KpiTruckYear">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var tableLength = SelectedKPIList.rows.length;
var resultRow, KPIName;
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBKpiMultiSelectDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBKpiMultiSelectDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

/* Navigate rows for KPI
   Add dynamic columns to Infotable */
for (var x=0; x < tableLength; x++) {
    var row = SelectedKPIList.rows[x];
    KPIName = SelectedKPIList.rows[x].DisplayName;
    resultRow = Things["KBKPILocalThingWorxDatabaseThing"].GetTop3KpiTruckDataYear({
		Machine: Machine /* STRING */,
		KPIName: KPIName/* STRING */
	});
    var queryLength = resultRow.rows.length; 
	for (var i=0;  i < queryLength; i++) {
   		var qrow = resultRow.rows[i];
        var resObject = new Object();
        var KPIDisplayName = KPIName;
        resObject.Label = qrow.Label;
        resObject[KPIDisplayName] = qrow.KPI;
        var newField = new Object();
		newField.name = KPIDisplayName;
		newField.baseType = 'NUMBER';
		result.AddField(newField);
		result.AddRow(resObject);
    }
}
]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMultistationAndon1stStation">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try {
	var KBLocalStations = Things[MachineThing].KBLocalStationThings;
	logger.debug("size> " + KBLocalStations.rows.length);
	if (KBLocalStations.rows.length > 0) {
		var params = {
			fieldName: 'KBLocalStationThing' /* STRING */ ,
			isCaseSensitive: true /* BOOLEAN */ ,
			t: KBLocalStations /* INFOTABLE */ ,
			value: StationThing /* STRING */
		};
		var result = Resources["InfoTableFunctions"].EQFilter(params);
	}
	//    var result=KBLocalStations;
} catch (err) {
	logger.error("Error on service GetMultistationAndon1stStation: " + err + " on thing:" + me.name + " at:" + err.lineNumber);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMultistationAndonStations">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try {
	var KBLocalStations = Things[MachineThing].KBLocalStationThings;
	if (KBLocalStations.rows.length > 0) {
		var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
			infoTableName: "InfoTable",
			dataShapeName: "KBMachineStationDataShape"
		});
		for (var x=0; x < KBLocalStations.rows.length; x++) {
           if (Things[KBLocalStations.rows[x].KBLocalStationThing].IsStationAndonVisible === true) {
				var newEntry = new Object();
				newEntry.KBLocalStationThing = KBLocalStations.rows[x].KBLocalStationThing; // THINGNAME [Primary Key]
				newEntry.Order = KBLocalStations.rows[x].Order; // NUMBER
				result.AddRow(newEntry);
			}
		}
		var sort = new Object();
		sort.name = 'Order';
		                                        sort.ascending = true;
		                                        result.Sort(sort);
	}
} catch (err) {
	logger.error("Error on service GetMultistationAndonStations: " + err + " on thing:" + me.name + " at:" + err.lineNumber);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetNextUpdateTimeInMin">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var now=new Date();
var MinutesNow=now.getMinutes();
var MyMinutes=(Math.floor(MinutesNow/5) +1)*5;

var result=MyMinutes-MinutesNow;]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetParetoLossesListSum">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var LossesInfotableLength;
var SummaryName; 
try{

    var newEntry = new Object();
    var params = {
        infoTableName : "InfoTable",
        dataShapeName : "KBTimeLossDBDataShape2"
    };
    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBTimeLossDBDataShape)
    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
	if(Language===""){
    	Language="Default";
    }
   
    try{
        SummaryName=  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({
        	Language: Language /* STRING */,
        	Token: "KBLocalSmartKPITimeLossesMashup.SumAllLosses" /* STRING */
        });
    }catch(err){
        try{
           	SummaryName=  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({
            	Language: "Default" /* STRING */,
            	Token: "KBLocalSmartKPITimeLossesMashup.SumAllLosses" /* STRING */
            });
        }catch(err1){
            if(SummaryName==="" || SummaryName===undefined){
            	SummaryName="Sum [all losses]";
            }
        }
    }
    var query = 
            {"filters": 
             {"type": "NE",
              "fieldName": "Type",
              "value": "Pr"
             }
            };
            var params3 = {
            	t: LossesInfotable /* INFOTABLE */,
            	query: query /* QUERY */
            };
          LossesInfotable = Resources["InfoTableFunctions"].Query(params3);
    try{
    	LossesInfotableLength=LossesInfotable.rows.length;
    
	}catch(err){}
    if(LossesInfotableLength>0){
    	var params1 = {
        	t: LossesInfotable /* INFOTABLE */,
        	columns: "TimeSumInMinutes,Occurrences,Percent" /* STRING */,
        	aggregates:  "SUM,SUM,SUM" /* STRING */,
        	groupByColumns: undefined  /* STRING */
        };
        resultData = Resources["InfoTableFunctions"].Aggregate(params1);
        
                // KBTimeLossDBDataShape entry object
        newEntry.Time2 = undefined; // DATETIME
        newEntry.Percent = resultData.rows[0].SUM_Percent; // NUMBER
        newEntry.Time1 = undefined; // DATETIME
        newEntry.StatusType = undefined; // STRING
        newEntry.TimeSumInSeconds = undefined; // LONG
        newEntry.PercentCumulated = undefined; // NUMBER
        newEntry.Occurrences = resultData.rows[0].SUM_Occurrences; // INTEGER
        newEntry.TimeSumInMinutes = resultData.rows[0].SUM_TimeSumInMinutes; // NUMBER
        newEntry.CycleTimeInMinutes = undefined; // NUMBER
        newEntry.StatusNameLevel2 = undefined; // STRING
        newEntry.StatusNameLevel1 = SummaryName; // STRING
    }else{
        newEntry.Time2 = undefined; // DATETIME
        newEntry.Percent = '0'; // NUMBER
        newEntry.Time1 = undefined; // DATETIME
        newEntry.StatusType = undefined; // STRING
        newEntry.TimeSumInSeconds = undefined; // LONG
        newEntry.PercentCumulated = undefined; // NUMBER
        newEntry.Occurrences = '0'; // INTEGER
        newEntry.TimeSumInMinutes = '0'; // NUMBER
        newEntry.CycleTimeInMinutes = undefined; // NUMBER
        newEntry.StatusNameLevel2 = undefined; // STRING
        newEntry.StatusNameLevel1 = SummaryName; // STRING
    }
    result.AddRow(newEntry);

}catch(err){
	logger.error("GetParetoLossesListSum Error: " + err+ " on thing: " + me.name + " at: " + err.lineNumber+ " , Language: "+Language);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetPlantsforSmartKPIVisualization">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[// implementingThings: INFOTABLE dataShape: RootEntityList
var implementingThings = ThingTemplates["KBLocalPlantThingTemplate"].GetImplementingThingsWithData();
var tableLength = implementingThings.rows.length;

var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

for (var x = 0; x < tableLength; x++) {
	var row = implementingThings.rows[x];
	//Your code here
    
    if (Things[KBDivisionThingName].name == KBDivisionThingName) {
    
        // KBNameForMenuDataShape entry object
        var newEntry = new Object();
        newEntry.DisplayName = Things[row.name].DisplayName; // STRING
        newEntry.ThingName = row.name; // STRING

        result.AddRow(newEntry);

    }
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetRailGlobalKpiCalculationBaseForMenue">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var newEntry = new Object();
newEntry.DisplayName = "Quarter"; // STRING - isPrimaryKey = true
newEntry.ThingName = "-";
newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Hour"; // STRING - isPrimaryKey = true
newEntry.ThingName = "-";
newEntry.DBKpiName = "-";
//result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Shift"; // STRING - isPrimaryKey = true
newEntry.ThingName = "-";
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Day"; // STRING - isPrimaryKey = true
newEntry.ThingName = "-";
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Week"; // STRING - isPrimaryKey = true
newEntry.ThingName = "-";
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Month"; // STRING - isPrimaryKey = true
newEntry.ThingName = "-";
newEntry.DBKpiName = "-";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Year"; // STRING - isPrimaryKey = true
newEntry.ThingName = "-";
newEntry.DBKpiName = "-";
result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetRailGlobalKpisForMenue">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var newEntry = new Object();
newEntry.DisplayName = "OEE"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalMashup";
newEntry.DBKpiName = "OeeRail";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Utilization"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalMashup";
newEntry.DBKpiName = "UtilizationRail";
result.AddRow(newEntry);


var newEntry = new Object();
newEntry.DisplayName = "Efficiency"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalMashup";
newEntry.DBKpiName = "EfficiencyRail";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Efficiency Shift Adjusted"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalMashup";
newEntry.DBKpiName = "EfficiencyRailShiftAdjusted";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Performance"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalMashup";
newEntry.DBKpiName = "PerformanceRail";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Performance Shift Adjusted"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalMashup";
newEntry.DBKpiName = "PerformanceRailShiftAdjusted";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Performance Production Adjusted"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalMashup";
newEntry.DBKpiName = "PerformanceRailProdAdjusted";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Performance Shift & Production Adjusted"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalMashup";
newEntry.DBKpiName = "PerformanceRailShiftProdAdjusted";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Planned Production Time"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalMashup";
newEntry.DBKpiName = "PlannedProduction";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Rate of Quality"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalMashup";
newEntry.DBKpiName = "RQ";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Output"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbGlobalIoNioMashup";
newEntry.DBKpiName = "Output";
result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetRailLocalKpisForMenue">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var newEntry = new Object();
newEntry.DisplayName = "OEE"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalMashup";
newEntry.DBKpiName = "OeeRail";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Utilization"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalMashup";
newEntry.DBKpiName = "UtilizationRail";
result.AddRow(newEntry);


var newEntry = new Object();
newEntry.DisplayName = "Efficiency"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalMashup";
newEntry.DBKpiName = "EfficiencyRail";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Efficiency Shift Adjusted"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalMashup";
newEntry.DBKpiName = "EfficiencyRailShiftAdjusted";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Performance"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalMashup";
newEntry.DBKpiName = "PerformanceRail";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Performance Shift Adjusted"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalMashup";
newEntry.DBKpiName = "PerformanceRailShiftAdjusted";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Performance Production Adjusted"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalMashup";
newEntry.DBKpiName = "PerformanceRailProdAdjusted";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Performance Shift & Production Adjusted"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalMashup";
newEntry.DBKpiName = "PerformanceRailShiftProdAdjusted";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Planned Production Time"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalMashup";
newEntry.DBKpiName = "PlannedProduction";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Rate of Quality"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalMashup";
newEntry.DBKpiName = "RQ";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Output"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBKpiDbLocalIoNioMashup";
newEntry.DBKpiName = "Output";
result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetRailMachinesForProductionAdvisor">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var kpidateStart = new Date();
var kpidateEnd = new Date();


if (KPICalculationBase == "Day") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentDayStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentDayEnd();
}
else if (KPICalculationBase == "Day - 1") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastDayStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastDayEnd();
}
else if (KPICalculationBase == "Day - 2") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastLastDayStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastLastDayEnd();
}
else if (KPICalculationBase == "Week") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentWeekStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentWeekEnd();
}
else if (KPICalculationBase == "Week - 1") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastWeekStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastWeekEnd();
}
else if (KPICalculationBase == "Week - 2") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastLastWeekStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastLastWeekEnd();
}
else if (KPICalculationBase == "Year") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentYearStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentYearEnd();
}
else if (KPICalculationBase == "Year - 1") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastYearStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastYearEnd();
}
else if (KPICalculationBase == "Year - 2") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastLastYearStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastLastYearEnd();
}
else if (KPICalculationBase == "Month") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentMonthStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentMonthEnd();
}
else if (KPICalculationBase == "Month - 1") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastMonthStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastMonthEnd();
}
else if (KPICalculationBase == "Month - 2") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastLastMonthStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastLastMonthEnd();
}
else if (KPICalculationBase == "Hour") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentHourStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentHourEnd();
}
else if (KPICalculationBase == "Hour - 1") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastHourStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastHourEnd();
}
else if (KPICalculationBase == "Hour - 2") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastLastHourStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastLastHourEnd();
}
else if (KPICalculationBase == "Quarter") {
	kpidateStart = Things["KBTimeHelperThing"].GetCurrentQuarterStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentQuarterEnd();
}
else if (KPICalculationBase == "Quarter - 1") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastQuarterStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastQuarterEnd();
}
else if (KPICalculationBase == "Quarter - 2") {
	kpidateStart = Things["KBTimeHelperThing"].GetLastLastQuarterStart();
	kpidateEnd = Things["KBTimeHelperThing"].GetLastLastQuarterEnd();
}
else if (KPICalculationBase == "Shift") {
	kpidateStart = new Date(123456);
	kpidateEnd = new Date(123456);
}
else if (KPICalculationBase == "Shift - 1") {
	kpidateStart = new Date(123456);
	kpidateEnd = new Date(123456);
}
else if (KPICalculationBase == "Shift - 2") {
	kpidateStart = new Date(123456);
	kpidateEnd = new Date(123456);
}
else if (KPICalculationBase == "User set") {
	kpidateStart = StartDate;
	kpidateEnd = EndDate;
}


if (Area == null || Area == "") {
	Area = "All";
}

var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBMachinesForProductionAdvisorDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBMachinesForProductionAdvisorDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);


var params = {
	maxItems: 999999 /* NUMBER */,
	nameMask: undefined /* STRING */,
	query: undefined /* QUERY */,
	thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */,
	tags: undefined /* TAGS */
};

// result: INFOTABLE dataShape: RootEntityList
var machines = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params);

var tableLength = machines.rows.length;

for (var x = 0; x < tableLength; x++) {
    
	try {
		// result: INFOTABLE
		var row = machines.rows[x];
		//Your code here
	    // KBMachinesForProductionAdvisorDataShape entry object
		
		var rowMachine = row.name;
		var rowPlant = Things[rowMachine].KBPlantThing;
		var rowDevision = Things[rowPlant].KBDivisionThing;
		
		logger.debug ("GetMachinesForProductionAdvisor: rowMachine --> "+rowMachine+" ("+x+" of "+tableLength+")");
		logger.debug ("GetMachinesForProductionAdvisor: rowPlant --> "+rowPlant+" ("+x+" of "+tableLength+")");
		logger.debug ("GetMachinesForProductionAdvisor: rowDevision --> "+rowDevision+" ("+x+" of "+tableLength+")");
		if (rowDevision == "KBRailDivisionThing") {

		    var newEntry = new Object();
		    newEntry.MachineThingName = row.name; // STRING
		    newEntry.KPIDateTimeStart = kpidateStart; // DATETIME
		    newEntry.KPIDateTimeEnd = kpidateEnd; // STRING
		    newEntry.KPICalculationBase = KPICalculationBase;
			    
			//logger.debug ("GetMachinesForProductionAdvisor: row -->"+row.name+" ("+x+" of "+tableLength+")");
			
			if (Area != "All" && Things[row.name].isActive) {
				var machinesInArea = Things[Area].KBMachineThings;
				
				var tableLength1 = machinesInArea.rows.length;
				for (var xx=0; xx < tableLength1; xx++) {
				    var row1 = machinesInArea.rows[xx];
				    //logger.debug ("GetMachinesForProductionAdvisor: row1 -->"+row1.KBMachineThing+" ("+xx+")");
				    if (row1.KBMachineThing == row.name) {
						result.AddRow(newEntry);
					    //logger.debug ("GetMachinesForProductionAdvisor: inserted ("+x+"/"+xx+")");
				    }
				}			
			} else  if (Things[row.name].isActive) {
				result.AddRow(newEntry);
			}
		}	
	} catch(err) {
		logger.debug ("GetMachinesForProductionAdvisor: "+err);
	}

}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetStationForTimeBaseFromOperator">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

	for (var i = 0; i < SelectedStationsFromOperator.getRowCount(); i++) {
        var newEntry1 = new Object();
        newEntry1.ThingName = SelectedStationsFromOperator.rows[i].ThingName;
		newEntry1.DisplayName = SelectedStationsFromOperator.rows[i].DisplayName;
        newEntry1.DBKpiName = SelectedStationsFromOperator.rows[i].DBKpiName;
        i = SelectedStationsFromOperator.getRowCount();
		if (newEntry1.DisplayName == null || newEntry1.DisplayName == "") {
			newEntry1.DisplayName = newEntry1.ThingName;
		}
		result.AddRow(newEntry1);
	}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetStationInfotableFromSelectedStations">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try {
    // for loop in the for loop 
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};
//CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
    
var tableLength = StationsSelected.getRowCount();
    for (var x=0; x < tableLength; x++) {
        
        var row = StationsSelected.rows[x];
        var newEntry = new Object();
                                newEntry.DisplayName = row.DisplayName;
                                newEntry.ThingName = row.ThingName; 
                                newEntry.DBKpiName = row.DBKpiName;
                                
                                        
                        result.AddRow(newEntry);
                }

} catch(err) {logger.error(err);

}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="getStationListFromMachine">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[// init output table
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBStationThingWithNameDS"
};
// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBStationThingWithNameDS)
var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

// get station list
var stationList =  Things[machineThing].KBLocalStationThings;
//var result  = stationList;

// check machineThing for each station
var tableLength = stationList.rows.length;
for (var x=0; x < tableLength; x++) {
    var row = stationList.rows[x];
    var stationThing = row.KBLocalStationThing;
    var displayName = Things[stationThing].DisplayName;
    //var machineName = Things[stationThing].KBLocalLineThing;
    outputTable.AddRow({
        DisplayName: displayName,
        ThingName: stationThing
    });
}

// re-order output table
var sort = new Object();
sort.name = "DisplayName";
sort.ascending = true;
outputTable.Sort(sort);

var result = outputTable;]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="getStationListFromMachine_legacy">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[// init output table
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBStationThingWithNameDS"
};
// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBStationThingWithNameDS)
var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

// get station list
var stationList =  ThingTemplates["KBLocalStationThingTemplate"].GetImplementingThings();
//var result  = stationList;

// check machineThing for each station
var tableLength = stationList.rows.length;
for (var x=0; x < tableLength; x++) {
    var row = stationList.rows[x];
    var stationThing = row.name;
    var displayName = Things[stationThing].DisplayName;
    var machineName = Things[stationThing].KBLocalLineThing;
    if(machineThing == machineName) {
        outputTable.AddRow({
            	DisplayName: displayName,
                ThingName: stationThing
            });
       }
}

// re-order output table
var sort = new Object();
sort.name = "DisplayName";
sort.ascending = true;
outputTable.Sort(sort);

var result = outputTable;]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetStationsForTimeLossVisualization">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try {
var params = {
	maxItems: 999999 /* NUMBER */,
	nameMask: undefined /* STRING */,
    query: undefined /* QUERY */,
	thingTemplate: "KBLocalStationThingTemplate" /* THINGTEMPLATENAME */,
	tags: undefined /* TAGS */
};

// result: INFOTABLE dataShape: RootEntityList
var stations = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params);
    
var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);



var tableLength = stations.rows.length;


    for (var x = 0; x < tableLength; x++) {
        var row = stations.rows[x];
        //Your code here
        var StationName;
        if(Things[row.name].DisplayName!==""){
        	StationName=Things[row.name].DisplayName;
        }else{
        	StationName=row.name;
        }

        if (Things[row.name].IsOperatorInputScreenUsedForThisStation && Things[row.name].KBLocalLineThing !== "") {
            // KBNameForMenuDataShape entry object
            var newEntry = new Object();
            newEntry.DisplayName = StationName; // STRING
            newEntry.DBKpiName = Things[row.name].KBLocalLineThing; // STRING
            newEntry.ThingName = row.name; // STRING
			result.AddRow(newEntry);

        }
	}
} catch(err) {
	logger.error("Error: " + err + " thing: " + me.name);
	result = false;
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetStationsFromMachinesInfotable">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try {
    // for loop in the for loop 
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};
//CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
var tableLength = MachinesSelected.getRowCount();
    for (var x=0; x < tableLength; x++) {
        var row = MachinesSelected.rows[x];
        var tableLength2 = Things[row.ThingName].KBLocalStationThings.getRowCount();
        try {for (var y=0; y < tableLength2; y++) {
                                    var stationList = Things[row.ThingName].KBLocalStationThings.rows[y]; 
                                    var newEntry = new Object();
                                    newEntry.DisplayName = Things[stationList.KBLocalStationThing].DisplayName;
                                    newEntry.ThingName = stationList.KBLocalStationThing; 
                                    newEntry.DBKpiName = row.ThingName;
//                                    newEntry.UID = x+1;
                                    
                                    result.AddRow(newEntry);
                                }
                        
                        } catch(err) {logger.error(err);
                                     }          
    }
} catch(err) {logger.error(err);
             }]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetTimeLossesDetailed">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var result;
try{
	var TimeLossesInfotableLength;
    try{
		TimeLossesInfotableLength=TimeLossesInfotable.rows.length;
   }catch(err){
		TimeLossesInfotableLength=0;
   }
	if(TimeLossesInfotableLength>0 && Category!=="" && Category!==undefined){
        var query;
        if(Level=='L1'){
    	  query = 
            {"filters": 
             {"type": "EQ",
              "fieldName": "Type",
              "value": Category
             }
            };
        }else{
            query = 
            {"filters": 
             {"type": "EQ",
              "fieldName": "StatusNameLevel1",
              "value": Category
             }
            };
        }
            var params = {
            	t: TimeLossesInfotable /* INFOTABLE */,
            	query: query /* QUERY */
            };
          result = Resources["InfoTableFunctions"].Query(params);
    }
    
}catch(err){
    	logger.error("GetTimeLossesDetailed Error: " + err+ " on thing: " + me.name + " at: " + err.lineNumber + ", category: " +Category);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetTimeLossesMashupName">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
	infoTableName: "InfoTable",
	dataShapeName: "KBNameForMashupDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

if (showGantt == true && showTableView == false) {
	var newEntry = new Object();
	newEntry.MashupDisplayName = "TimeLossesGANTchart"; // STRING - isPrimaryKey = true
	newEntry.MashupThingName = "KBLocalMachineTimeLossesTypesMashup";
	result.AddRow(newEntry);
} else if (showTableView == true && showGantt == false) {
	var newEntry = new Object();
	newEntry.MashupDisplayName = "TimeLossesTable"; // STRING - isPrimaryKey = true
	newEntry.MashupThingName = "KBMultiMachineLossComparisonDataTableMashup";
	result.AddRow(newEntry);
} else if (showTableView == true && showGantt == true) {
	var newEntry = new Object();
	newEntry.MashupDisplayName = "TimeLossesTable"; // STRING - isPrimaryKey = true
	newEntry.MashupThingName = "KBMultiMachineLossComparisonDummyMashup";
	result.AddRow(newEntry);
} else {
	var newEntry = new Object();
	newEntry.MashupDisplayName = "TimeLossesParetoChart"; // STRING - isPrimaryKey = true
	newEntry.MashupThingName = "KBMultiMachineLossComparisonParetoMashup";
	result.AddRow(newEntry);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetTimeLossesSum">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try{
    var TimeDifference=(EndTime-StartTime)/60000;
	var OpeningTimeMinutes=0;
    var OpeningTimePercent=0;
    var CalculatedActualMinutes=0;
    var DowntimesSum=0;
    var resultData;
    var type;
    var newEntry = new Object();
    var params = {
            infoTableName : "InfoTable",
            dataShapeName : "KBTimeLossDBDataShape"
        };
    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
	if(Language===""){
		Language="Default";
	}
    var SummaryName;
    try{
		SummaryName =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({
    		Language: Language /* STRING */,
    		Token: "KBLocalSmartKPITimeLossesMashup.OpeningTime" /* STRING */
    	});
    }catch(err){
        try{
          	SummaryName =  Things["KBAdministratorTranslationUtilityThing"].GetTokenValue({
        		Language: "Default" /* STRING */,
        		Token: "KBLocalSmartKPITimeLossesMashup.OpeningTime" /* STRING */
        	});
        }catch(err2){
      		SummaryName ="Opening time";
        }
    }
    if(SummaryName===""){SummaryName="Opening Time";}
    var TimeLossesInfoTableLength;
    try{TimeLossesInfoTableLength=TimeLossesInfoTable.rows.length;
    }catch(err){TimeLossesInfoTableLength=0;}
	if(TimeLossesInfoTableLength>0){
        // APO data
    	var params1 = {
        	t: TimeLossesInfoTable /* INFOTABLE */,
        	columns: "TimeSumInMinutes,Percent" /* STRING */,
        	aggregates:  "SUM,SUM" /* STRING */,
        	groupByColumns: "StatusType"  /* STRING */
        };
        resultData = Resources["InfoTableFunctions"].Aggregate(params1);
    	if(resultData.SUM_TimeSumInMinutes<TimeDifference){
        type='less';
        }else{if(resultData.SUM_TimeSumInMinutes==TimeDifference){type='OK';}
              else{if(resultData.SUM_TimeSumInMinutes>TimeDifference){type='more';}
                  }
             }
		OpeningTimeMinutes=resultData.SUM_TimeSumInMinutes;
        OpeningTimePercent=resultData.SUM_Percent;
    }
    
      // Teoretical vs Actual Time    
    var TimeLossesActualInfoTableLength;
    try{TimeLossesActualInfoTableLength=TimeLossesActualInfoTable.rows.length;
    }catch(err){TimeLossesActualInfoTableLength=0;}
	  
    if(TimeLossesActualInfoTableLength>0){
          var query = 
            {"filters": 
             {"type": "EQ",
              "fieldName": "StatusNameLevel1",
              "value": "Actual"
             }
            };
            var params3 = {
            	t: TimeLossesActualInfoTable /* INFOTABLE */,
            	query: query /* QUERY */
            };
          TimeLossesActualInfoTable = Resources["InfoTableFunctions"].Query(params3);
          CalculatedActualMinutes=TimeLossesActualInfoTable.TimeSumInMinutes;
      }
    // Pareto Data
    var TimeLossesDowntimesInfoTableLength;
    try{TimeLossesDowntimesInfoTableLength=TimeLossesDowntimesInfoTable.rows.length;
    }catch(err){TimeLossesDowntimesInfoTableLength=0;}
	
     if(TimeLossesDowntimesInfoTableLength>0){
        var params2 = {
            	t: TimeLossesDowntimesInfoTable /* INFOTABLE */,
            	columns: "TimeSumInMinutes" /* STRING */,
            	aggregates:  "SUM" /* STRING */,
            	groupByColumns: "StatusType"  /* STRING */
            };
        var DowntimesData = Resources["InfoTableFunctions"].Aggregate(params2);
        
        DowntimesSum = DowntimesData.SUM_TimeSumInMinutes;
     
   // result summary
    	    newEntry.Time2 = undefined; // DATETIME
            newEntry.Time1 = undefined; // DATETIME
            newEntry.Percent = OpeningTimePercent; // NUMBER
            newEntry.StatusType = type; // STRING
            newEntry.TimeSumInSeconds =  OpeningTimeMinutes-CalculatedActualMinutes-DowntimesSum; // LONG
            newEntry.PercentCumulated = CalculatedActualMinutes;//; // NUMBER
            newEntry.Occurrences = TimeDifference; // INTEGER
            newEntry.TimeSumInMinutes = OpeningTimeMinutes; // NUMBER
            newEntry.CycleTimeInMinutes = DowntimesSum; // NUMBER
            newEntry.StatusNameLevel2 = undefined; // STRING
            newEntry.StatusNameLevel1 = SummaryName; // STRING
         }else{
         	newEntry.Time2 = undefined; // DATETIME
            newEntry.Time1 = undefined; // DATETIME
            newEntry.Percent = 0; // NUMBER
            newEntry.StatusType = 'OK'; // STRING
            newEntry.TimeSumInSeconds =  0; // LONG
            newEntry.PercentCumulated = 0;//; // NUMBER
            newEntry.Occurrences = 0; // INTEGER
            newEntry.TimeSumInMinutes = 0; // NUMBER
            newEntry.CycleTimeInMinutes = 0; // NUMBER
            newEntry.StatusNameLevel2 = undefined; // STRING
            newEntry.StatusNameLevel1 = SummaryName; // STRING
         }
    
    	result.AddRow(newEntry);

    // KBTimeLossDBDataShape entry object

}catch(err){
	logger.error("GetTimeLossesSum Error: " + err+ " on thing: " + me.name + " at: " + err.lineNumber+ " , Language: "+Language);
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetTruckGlobalKpisForMenue">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var newEntry = new Object();
newEntry.DisplayName = "Rate of Quality"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBRateOfQualityMashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Output"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBOutputMashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "OEE2"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBOEE2Mashup";
result.AddRow(newEntry);

var newEntry = new Object();
newEntry.DisplayName = "Utilization"; // STRING - isPrimaryKey = true
newEntry.ThingName = "KBUtilizationMashup";
result.AddRow(newEntry);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetTruckLocalKpisForMenue">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBNameForMenuDataShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBNameForMenuDataShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var newEntryRQ = new Object();
newEntryRQ.DisplayName = "Rate of Quality"; // STRING - isPrimaryKey = true
newEntryRQ.ThingName = "KBKpiDbLocalMashup";
newEntryRQ.DBKpiName = "RQ";
result.AddRow(newEntryRQ);

var newEntryOutput = new Object();
newEntryOutput.DisplayName = "Output"; // STRING - isPrimaryKey = true
newEntryOutput.ThingName = "KBKpiDbLocalIoNioMashup";
newEntryOutput.DBKpiName = "Output";
result.AddRow(newEntryOutput);

var newEntryOEE = new Object();
newEntryOEE.DisplayName = "OEE2"; // STRING - isPrimaryKey = true
newEntryOEE.ThingName = "KBKpiDbLocalMashup";
newEntryOEE.DBKpiName = "CVS: OEE (Version 2)";
result.AddRow(newEntryOEE);

var newEntryUtil = new Object();
newEntryUtil.DisplayName = "Utilization"; // STRING - isPrimaryKey = true
newEntryUtil.ThingName = "KBKpiDbLocalMashup";
newEntryUtil.DBKpiName = "CVS: Utilization";
result.AddRow(newEntryUtil);]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="InfotableToExcel">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[logger.debug(me.name + ' -  InfotableToExcel - started ');

try{
    
    var CurrentDate = new Date();
    var fileRepository = "ReportRepository";
    var CreateExcelSheet = function (sheetName) {
        Resources["ExcelExporter"].CreateSheet({
            ExcelFileName: FullFileName /* STRING */,
            SheetName: sheetName /* STRING */,
            FileRepository: fileRepository /* THINGNAME */
        });
    };

    var WriteDBInfotableToExcelFile = function (sheetName, infotable, hasHeader) {
        Resources["ExcelExporter"].WriteInfotableToExcelFile({
            ExcelFileName: FullFileName /* STRING */,
            SheetName: sheetName /* STRING */,
            InfoTable: infotable /* INFOTABLE */,
            FileRepository: fileRepository /* THINGNAME */,
            HasHeader: hasHeader /* BOOLEAN */
        });
    };
////          //  logger.warn('field name is >' + dataShapeFields[fieldName].name);
////          //  logger.warn('field basetype is >' + dataShapeFields[fieldName].baseType);

    var timestamp ="_" + CurrentDate.getFullYear() + "-"+ (CurrentDate.getMonth()+1) + "-"+ CurrentDate.getDate() + "_"+ CurrentDate.getHours() + ""+ CurrentDate.getMinutes() + "" + CurrentDate.getSeconds();
	var FullFileName = "Export_" + FileName  + timestamp + ".xlsx";
    
    Resources["ExcelExporter"].CreateWorkBook({
        ExcelFileName: FullFileName /* STRING */,
        FileRepository: fileRepository /* THINGNAME */
    });
	if (SheetName===""){
        SheetName="Thingworx Exported Data";
    }
    CreateExcelSheet(SheetName); 
    WriteDBInfotableToExcelFile( SheetName, ExportInfotable, false); //TimeLossesInfoTable
	logger.warn("Service  InfotableToExcel FullFileName: " + FullFileName);
    // result: INFOTABLE dataShape: "FileSystemFileWithLinks"
    var fileInfo =  Things[fileRepository].GetFileListingWithLinks({
        path: undefined /* STRING */,
        nameMask: FullFileName /* STRING */
    });
    // Result: STRING
    // result: STRING
    // Result: STRING

var ServerName =  Things["KBThingWorxServerSystemDataTable"].GetFullServerName({
	Host: Resources["KBThingWorxServerSystem"].GetHostName() /* STRING */
});

     var link ="https://" + ServerName +fileInfo.rows[0].downloadLink;
    logger.warn("Service  InfotableToExcel link: " + link);
    var result = link;
    
}catch(ex){
     
    logger.warn("Service error in InfotableToExcel on " + me.name + " at " +  ex.lineNumber +  ": " + ex);
}
logger.debug(me.name + ' -  InfotableToExcel - Service execution finished');]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="IsVisualizationTabVisible">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var result = true;
if (TabName == "Rate of Quality") {
    var params = {
        thingShapeName: "KBRateOfQualityShape" /* THINGSHAPENAME */
    };

    // result: BOOLEAN
    result = Things[MachineName].ImplementsShape(params);
} else if (TabName == "Output") {
    var params = {
        thingShapeName: "KBRateOfQualityShape" /* THINGSHAPENAME */
    };

    // result: BOOLEAN
    result = Things[MachineName].ImplementsShape(params);
} else if (TabName == "Utilization") {
    var params = {
        thingShapeName: "KBUtilizationShape" /* THINGSHAPENAME */
    };

    // result: BOOLEAN
    result = Things[MachineName].ImplementsShape(params);
} else if (TabName == "OEE2") {
    var params = {
        thingShapeName: "KBOEE2Shape" /* THINGSHAPENAME */
    };

    // result: BOOLEAN
    result = Things[MachineName].ImplementsShape(params);
} else if (TabName == "Losses") {
	var params = {
		thingTemplateName: "KBGlobalMachineThingTemplate" /* THINGTEMPLATENAME */
	};
	
	try {
		// result: BOOLEAN
		result = Things[MachineName].IsDerivedFromTemplate(params);
	} catch(err) {
		result = false;
	}
} else {
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="KBKpiSummaryShapeSorting">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var params = {
	infoTableName : "InfoTable",
	dataShapeName : "KBKpiSummaryShape"
};

// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBKpiSummaryShape)
var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var tableLength = KBKpiSummaryShape.rows.length;

for (var x = tableLength-1; x >= 0; x--) {
	var row = KBKpiSummaryShape.rows[x];
	//Your code here
    // KBKpiSummaryShape entry object
    var newEntry = new Object();
    newEntry.OptionalProductionDate = row.OptionalProductionDate; // DATETIME
    newEntry.KPI = row.KPI; // NUMBER
    newEntry.Label = row.Label; // STRING
    newEntry.NOK = row.NOK; // INTEGER
    newEntry.OK = row.OK; // INTEGER
    newEntry.OptionalDiffInMinutesLastPartProduced = row.OptionalDiffInMinutesLastPartProduced; // INTEGER

	result.AddRow(newEntry);

}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="migrateMachinesStationList">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[//old: getStatonListFromMachine_legacy
//new: Things[machineThing].KBLocalStationThings
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBMachineStationDataShape"
};
var stationList = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

//#1. get machine list
var machineList = ThingTemplates["KBLocalMachineThingTemplate"].GetImplementingThings();
//var result = machineList;

//#2. for each machine, get stationlist
var tableLength = machineList.rows.length;
for (var x=0; x < tableLength; x++) {
    var row = machineList.rows[x];
    var machineThing = row.name;
//#3. update KBLocalStationThings    
	stationList.RemoveAllRows();
    var stationList0 = me.getStationListFromMachine_legacy({
		machineThing: machineThing /* THINGNAME */
	});
    //var result = stationList0;
    var sort = new Object();
    sort.name = "ThingName";
    sort.ascending = true;
    stationList0.Sort(sort);    
    var tableLength0 = stationList0.rows.length;
    for (var x0=0; x0 < tableLength0; x0++) {
        var row0 = stationList0.rows[x0];
        var stationName = row0.ThingName;
        stationList.AddRow({
        	KBLocalStationThing: stationName,
            Order: x0
        });
    }
	Things[machineThing].KBLocalStationThings = stationList;   
}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="OvertakeTimeLossesInfotable">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[result=TimeLossesInfotable;]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="PartsAtLineForVisualisation">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[try{
    
    var params = {
        infoTableName : "InfoTable",
        dataShapeName : "KBIndexedPartsAtLineDataShape"
    };
    
    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBIndexedPartsAtLineDataShape)
    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
    
//    var PartsAtLineInfoTable =  Things["KBKPILocalThingWorxDatabaseThing"].PartsAtLine({
//    	Machine: Machine /* STRING */
//    });
    var i=1;
    for(x=0;x<PartsAtLineInfoTable.rows.length;x++){
		var newEntry = new Object();
        newEntry.numberOfParts = PartsAtLineInfoTable.rows[x].numberOfParts; // INTEGER
        newEntry.SAPOperationNumber = PartsAtLineInfoTable.rows[x].SAPOperationNumber; // STRING
        newEntry.PartNumber = PartsAtLineInfoTable.rows[x].PartNumber; // STRING
        newEntry.OrderNumber = PartsAtLineInfoTable.rows[x].OrderNumber; // STRING
       	newEntry.Index = i;
            i=i+1;
        result.AddRow(newEntry);
    }

}catch(Err){

}]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="SplitAreaFooterInfoTable">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var result=Footer;]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="updateMachinesStationList">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[//part 0, create infoTable for output
var output = "";
var params = {
    infoTableName : "InfoTable",
    dataShapeName : "KBMachineStationDataShape"
};
var outputTable1 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
var outputTable2 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);

var oldMachineThing = "";
var oldMachineThingFlag = false;
oldMachineThing = Things[stationThing].KBLocalLineThing;
if(oldMachineThing != "") {
	oldMachineThingFlag = true;
	//var result = "oldMachineThing found.";
    logger.debug("KBSmartKPIHelperThing-TT.updateMachinesStationList, oldMachineThing found." + Things[stationThing].KBLocalLineThing);
}

//var result = oldMachineThing;
if(oldMachineThing != newMachineThing) {
	//part 1, remove binding of old Machine Thing
	if(oldMachineThingFlag === true) {
		output = "old machine thing is set";		
		var tempStationList1 = Things[oldMachineThing].KBLocalStationThings;
		var tableLength1 = tempStationList1.rows.length;
		logger.debug("KBSmartKPIHelperThing-TT.updateMachinesStationList, tempStationList1.rows.length = " + tableLength1);		
		if(tableLength1 > 0) {			  
							  
										
							
									 
			 for (var x1=0; x1 < tableLength1; x1++) {
				var row1 = tempStationList1.rows[x1];
				var tempStation = row1.KBLocalStationThing;
				var tempOrder = row1.Order;
				if(tempStation != stationThing) {
					outputTable1.AddRow({
						KBLocalStationThing: tempStation,
						Order: tempOrder
					});
				   }
	 
																							   
			} 
            var sort1 = new Object();
			sort1.name = "Order";
			sort1.ascending = true;
			outputTable1.Sort(sort1);
            //for (var x2=0; x2 < tableLength1; x2++) {
			//	var row2 = tempStationList1.rows[x2];
			//	outputTable2.AddRow({KBLocalStationThing: row2.KBLocalStationThing,Order: x2+1});
			//} 
			Things[oldMachineThing].KBLocalStationThings = outputTable1;		
            
		}			
	}
//	outputTable1.RemoveAllRows();
//    outputTable2.RemoveAllRows();
	//part 2, add binding of new Machine Thing	
	if(newMachineThing != null) {
		logger.debug("KBSmartKPIHelperThing-TT.updateMachinesStationList, set new machine thing");
        Things[stationThing].KBLocalLineThing = newMachineThing;
		output = "new machine thing is set";	
		var tempStationList2 = Things[newMachineThing].KBLocalStationThings;
		var params2 = {
		  fieldName: "KBLocalStationThing" /* STRING */,
		  isCaseSensitive: false /* BOOLEAN */,
		  t: tempStationList2 /* INFOTABLE */,
		  value: stationThing /* STRING */
		};
		var bindingFound = Resources["InfoTableFunctions"].EQFilter(params2).rows.length;	
        logger.debug("KBSmartKPIHelperThing-TT.updateMachinesStationList, bindingFound = " + bindingFound);
		if(bindingFound === 0){
			var nextOrder = 0;
			if(tempStationList2.rows.length > 0){
				var sort2 = new Object();
				sort2.name = "Order";
				sort2.ascending = true;
				tempStationList2.Sort(sort2); 	
				var tableLength2 = tempStationList2.rows.length;  
				nextOrder = tempStationList2.rows[tableLength2-1].Order + 1;
			}							
			tempStationList2.AddRow({
				KBLocalStationThing: stationThing,
				Order: nextOrder
			});	
	
			outputTable2 = tempStationList2;	
			Things[newMachineThing].KBLocalStationThings = outputTable2;
		}			
	}	
	else {
		Things[stationThing].KBLocalLineThing = "";
	}
}

//var result = output;]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="writeInfotableToRessource">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code><![CDATA[var data = "";
var counter = 0;

// infotable datashape iteration
var dataShapeFields = infotable.dataShape.fields;
for (var fieldName in dataShapeFields) {
    //logger.warn('field name is ' + dataShapeFields[fieldName].name);
    //logger.warn('field basetype is ' + dataShapeFields[fieldName].baseType);
    if (counter > 0) {
        data += ";";
    }
    data += "\"" + dataShapeFields[fieldName].name + "\"";
    counter += 1;
}
data += "\n";

var tableLength = infotable.rows.length;
for (var x=0; x < tableLength; x++) {
    var row = infotable.rows[x];
    //Your code here
    counter = 0;
    for (var fieldName in dataShapeFields) {
        //logger.warn('field name is ' + dataShapeFields[fieldName].name);
        //logger.warn('field basetype is ' + dataShapeFields[fieldName].baseType);
        if (counter > 0) {
            data += ";";
        }
        var fieldname1 = dataShapeFields[fieldName].name;
        var value = row[fieldname1];
        data += "\"" + value + "\"";
        counter += 1;
    }
    data += "\n";
}

var dateValue = new Date();
var filename = Resources["CurrentSessionInfo"].GetCurrentUser()+dateValue.getTime()+".csv";
    
 Things["DataDownloadRepository"].CreateTextFile({
	path: filename /* STRING */,
	data: data /* STRING */,
	overwrite: true /* BOOLEAN */
});

// result: INFOTABLE dataShape: "FileSystemFileWithLinks"
var repository =  Things["DataDownloadRepository"].GetFileListingWithLinks({
	path: undefined /* STRING */,
	nameMask: filename /* STRING */
});
// Result: STRING Resources["KBThingWorxServerSystem"].GetHostName()+
var result = repository.downloadLink;]]></code>

									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMultistationAndonStations">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        try {
                                        	var KBLocalStations = Things[MachineThing].KBLocalStationThings;
                                        	if (KBLocalStations.rows.length > 0) {
                                        		var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "KBMachineStationDataShape"
                                        		});
                                        		for (var x=0; x < KBLocalStations.rows.length; x++) {
                                                   if (Things[KBLocalStations.rows[x].KBLocalStationThing].IsStationAndonVisible === true) {
                                        				var newEntry = new Object();
                                        				newEntry.KBLocalStationThing = KBLocalStations.rows[x].KBLocalStationThing; // THINGNAME [Primary Key]
                                        				newEntry.Order = KBLocalStations.rows[x].Order; // NUMBER
                                        				result.AddRow(newEntry);
                                        			}
                                        		}
                                        		var sort = new Object();
                                        		sort.name = 'Order';
		                                        sort.ascending = true;
		                                        result.Sort(sort);
                                        	}
                                        } catch (err) {
                                        	logger.error("Error on service GetMultistationAndonStations: " + err + " on thing:" + me.name + " at:" + err.lineNumber);
                                        }
                                        ]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetMultistationAndon1stStation">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        try {
                                        	var KBLocalStations = Things[MachineThing].KBLocalStationThings;
                                        	logger.debug("size> " + KBLocalStations.rows.length);
                                        	if (KBLocalStations.rows.length > 0) {
                                        		var params = {
                                        			fieldName: 'KBLocalStationThing' /* STRING */ ,
                                        			isCaseSensitive: true /* BOOLEAN */ ,
                                        			t: KBLocalStations /* INFOTABLE */ ,
                                        			value: StationThing /* STRING */
                                        		};
                                        		var result = Resources["InfoTableFunctions"].EQFilter(params);
                                        	}
                                        	//    var result=KBLocalStations;
                                        } catch (err) {
                                        	logger.error("Error on service GetMultistationAndon1stStation: " + err + " on thing:" + me.name + " at:" + err.lineNumber);
                                        }
                                        ]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetSumOfPartsPerMachineAndTime">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description=""
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        try {
                                         var result=0;
                                         if(StartTime!=undefined && EndTime!=undefined && Machine!=undefined &&    
                                         	StartTime!="" && EndTime!="" && Machine!="" &&
                                         	StartTime!==null && EndTime!==null && Machine!==null){
                                        	var PartInfotable = Things["KBKPILocalThingWorxDatabaseThing"].GetSumOfPartsPerMachineAndTime({
                                        		EndTime: EndTime /* DATETIME */ ,
                                        		StartTime: StartTime /* DATETIME */ ,
                                        		Machine: Machine /* STRING */
                                        	});
                                        	var query = {
                                        		"filters": {
                                        			"type": "EQ",
                                        			"fieldName": "isPartOK",
                                        			"value": true
                                        		}
                                        	};
                                        	var params = {
                                        		t: PartInfotable /* INFOTABLE */ ,
                                        		query: query /* QUERY */
                                        	};
                                        
                                        	PartInfotable = Resources["InfoTableFunctions"].Query(params);
                                        	if(PartInfotable.rows.length>0){
                                        		result = PartInfotable.Quantity;
                                        	}
                                         }
                                        } catch (err) {
                                        	logger.error("Error on service GetSumOfPartsPerMachineAndTime: " + err + " on thing:" + me.name + " at:" + err.lineNumber);
                                        }
                                        ]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
					<ServiceImplementation description=""
					                       handlerName="Script"
					                       name="GetCVSMachinesForProductionAdvisor4">
						<ConfigurationTables>
							<ConfigurationTable dataShapeName=""
							                    description="Script"
							                    isMultiRow="false"
							                    name="Script"
							                    ordinal="0">
								<DataShape>
									<FieldDefinitions>
										<FieldDefinition baseType="STRING"
										                 description="code"
										                 name="code"
										                 ordinal="0"/>
									</FieldDefinitions>
								</DataShape>
								<Rows>
									<Row>
										<code>
                                        <![CDATA[
                                        try {
                                        var kpidateStart = new Date();
                                        var kpidateEnd = new Date();
                                        var kpidateMachineStart = new Date();
                                        var kpidateMachineEnd = new Date();  
                                        
                                        if (KPICalculationBase == "Day") {
                                        	kpidateStart = Things["KBTimeHelperThing"].GetCurrentDayStart();
                                        	//kpidateEnd = Things["KBTimeHelperThing"].GetCurrentDayEnd();
                                        	
                                        	kpidateStart = dateAddDays(kpidateStart,Offset);
                                        	kpidateEnd = dateAddDays(kpidateStart,1);
                                        }
                                        else if (KPICalculationBase == "Week") {
                                        	kpidateStart = Things["KBTimeHelperThing"].GetCurrentWeekStart();
                                            kpidateEnd = dateAddDays(kpidateStart,7);
                                        	
                                        	kpidateStart = dateAddDays(kpidateStart,Offset*7);
                                        	kpidateEnd = dateAddDays(kpidateEnd,Offset*7);
                                            
                                        }
                                        else if (KPICalculationBase == "Year") {
                                        	kpidateStart = Things["KBTimeHelperThing"].GetCurrentYearStart();
                                            kpidateEnd = dateAddYears(kpidateStart,1);
                                        	
                                        	kpidateStart = dateAddYears(kpidateStart,Offset);
                                        	kpidateEnd = dateAddYears(kpidateEnd,Offset);
                                        }
                                        else if (KPICalculationBase == "Month") {
                                        	kpidateStart = Things["KBTimeHelperThing"].GetCurrentMonthStartWithIterations({
                                        	Iterations: Offset /* NUMBER */
                                        });
                                            kpidateEnd = Things["KBTimeHelperThing"].GetCurrentMonthEndWithIterations({
                                        	FullTimeSlot: true /* BOOLEAN */,
                                        	Iterations: Offset /* NUMBER */
                                        });
                                        }
                                        else if (KPICalculationBase == "4Hours") {
                                            kpidateStart = dateAddHours(StartDate,Offset*4);
                                        	kpidateEnd = dateAddHours(EndDate,Offset*4);
                                        }
                                        else if (KPICalculationBase == "8Hours") {
                                            kpidateStart = dateAddHours(StartDate,Offset*8);
                                        	kpidateEnd = dateAddHours(EndDate,Offset*8);
                                        }     
                                        else if (KPICalculationBase == "Quarter") {
                                        	kpidateStart = Things["KBTimeHelperThing"].GetCurrentQuarterStart();
                                        	kpidateEnd = Things["KBTimeHelperThing"].GetCurrentQuarterEnd();
                                        	
                                        	kpidateStart = dateAddMinutes(kpidateStart,Offset*15);
                                        	kpidateEnd = dateAddMinutes(kpidateEnd,Offset*15);
                                        }
                                        else if (KPICalculationBase == "Shift") {
                                        	kpidateStart = new Date(123456);
                                        	kpidateEnd = new Date(123456);
                                        }
                                        else if (KPICalculationBase == "User set") {
                                        	kpidateStart = StartDate;
                                        	kpidateEnd = EndDate;
                                        }
                                        
                                        // logger.error ("GetMachinesForProductionAdvisor3: kpidateStart --> "+kpidateStart+" kpidateEnd --> "+kpidateEnd);
                                        if(Area === null || Area === "") {
                                        	Area = "All";
                                        }
                                        
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBMachinesForProductionAdvisorDataShape2"
                                        };
                                        
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var params5 = {
                                        	maxItems: 999999 /* NUMBER */,
                                        	nameMask: undefined /* STRING */,
                                        	query: undefined /* QUERY */,
                                        	thingTemplate: "KBLocalAreaThingTemplate" /* THINGTEMPLATENAME */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var areas = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params5);
                                        
                                        
                                        var params2 = {
                                        	maxItems: 999999 /* NUMBER */,
                                        	nameMask: undefined /* STRING */,
                                        	query: undefined /* QUERY */,
                                        	thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var machines = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params2);
                                        var newField = new Object();
                                        	newField.name = 'DisplayName';
                                        	newField.baseType = 'STRING';
                                        	machines.AddField(newField);
                                        	var tableLength = machines.rows.length;
                                        	for (var a = 0; a < tableLength; a++) {
                                        		machines.rows[a].DisplayName = Things[machines.rows[a].name].DisplayName;
                                        	}
                                        	var sort = new Object();
                                        	sort.name = 'DisplayName';
                                        	sort.ascending = true;
                                        	machines.Sort(sort);
                                        	
                                        var UID=0;
                                        var searchMachineData;
                                              
                                        var params3 = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "KBProductionAdvisorFooterDataShape"
                                            };
                                            var AreaFooterInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params3);
                                            var AreaFooterInfoTableResult = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params3);
                                            
                                        //var result=AreaFooterInfoTableResult;
                                        for (var x = 0; x < tableLength; x++) {
                                            var row1 = machines.rows[x];
                                            var rowMachine1 = row1.name;
                                            if( Things[rowMachine1].isActive){
                                                if(Area != "All" && Area!==undefined){
                                                    searchMachineData=false;
                                                    var AreasMachines=Things[Area].KBMachineThings;
                                                    for (q=0;q<AreasMachines.rows.length;q++){
                                                    	if(machines.rows[x].name==AreasMachines.rows[q].KBMachineThing){
                                                    		searchMachineData=true;
                                                        }
                                                    }
                                                }
                                                if(Area == "All" || searchMachineData){
                                            		var rowPlant1 = Things[rowMachine1].KBPlantThing;
                                            		var rowDevision1 = Things[rowPlant1].KBDivisionThing;
                                            		var CVS_DMS_Day_Offset_in_Minutes = Things[rowPlant1].CVS_DMS_Day_Offset_in_Minutes;
                                            		
                                            		logger.debug ("GetMachinesForProductionAdvisor: rowMachine --> "+rowMachine1+" ("+x+" of "+tableLength+")");
                                            		logger.debug ("GetMachinesForProductionAdvisor: rowPlant --> "+rowPlant1+" ("+x+" of "+tableLength+")");
                                            		logger.debug ("GetMachinesForProductionAdvisor: rowDevision --> "+rowDevision1+" ("+x+" of "+tableLength+")");
                                            
                                            		if (rowDevision1 == "KBTruckDivisionThing") {
                                                        if (KPICalculationBase == "Day" ||KPICalculationBase == "Week"||KPICalculationBase == "Month" || KPICalculationBase == "Year") {
                                                            kpidateMachineStart = dateAddMinutes(kpidateStart, CVS_DMS_Day_Offset_in_Minutes);
                                                			kpidateMachineEnd = dateAddMinutes(kpidateEnd, CVS_DMS_Day_Offset_in_Minutes);
                                        //                         var diff1 = new Date() - kpidateStart;
                                        //							diff1 = diff1 / (1000*60*60*24);
                                        //                         var diff2 = new Date() - kpidateEnd;
                                        //							diff2 = diff2 / (1000*60*60*24);
                                        //                         
                                        //                         kpidateMachineStart = Things["KBTimeHelperThing"].GetDayStart({DaysBack: diff1, OffsetInMinutes: CVS_DMS_Day_Offset_in_Minutes});
                                        //						 kpidateMachineEnd = Things["KBTimeHelperThing"].GetDayStart({DaysBack: diff2, OffsetInMinutes: CVS_DMS_Day_Offset_in_Minutes});
                                                			}
                                                
                                                            if (KPICalculationBase == "4Hours") {
                                        //                        logger.error ("GetMachinesForProductionAdvisor3: kpidateEnd --> "+kpidateEnd+" (Machine: "+rowMachine1+")");
                                                				var ShiftInfotable =  Things["KBKPILocalThingWorxDatabaseThing"].GetFullShiftTime({
                                                                	date: kpidateEnd /* DATETIME */,
                                                                	Machine: rowMachine1 /* STRING */
                                                                });
                                                				kpidateMachineStart = ShiftInfotable.CurrentStartTime;
                                                				kpidateMachineEnd = ShiftInfotable.CurrentEndTime;
                                                                if(kpidateMachineEnd===undefined || kpidateMachineEnd===null || kpidateMachineEnd===""){
                                                                    kpidateMachineStart=kpidateEnd;
                                                                    kpidateMachineEnd=kpidateEnd;}
                                        //                        logger.error ("GetMachinesForProductionAdvisor3: kpidateMachineStart --> "+kpidateMachineStart+" (kpidateEnd: "+kpidateMachineEnd+")");
                                                			}
                                                            if (KPICalculationBase == "8Hours") {
                                                				var ShiftInfotable2 =  Things["KBKPILocalThingWorxDatabaseThing"].GetFullShiftTime({
                                                                	date: kpidateEnd /* DATETIME */,
                                                                	Machine: rowMachine1 /* STRING */
                                                                });
                                                				kpidateMachineStart = ShiftInfotable2.CurrentStartTime;
                                                				kpidateMachineEnd = ShiftInfotable2.CurrentEndTime;
                                                                 if(kpidateMachineEnd===undefined || kpidateMachineEnd===null || kpidateMachineEnd===""){
                                                                    kpidateMachineStart=kpidateEnd;
                                                                    kpidateMachineEnd=kpidateEnd;}
                                                			}
                                            
                                            		    var newEntry = new Object();
                                            		    newEntry.MachineThingName = row1.name; // STRING
                                            		    newEntry.KPIDateTimeStart = kpidateMachineStart;
                                            		    newEntry.KPIDateTimeEnd = kpidateMachineEnd; 
                                            		    newEntry.KPICalculationBase = KPICalculationBase;
                                            		    newEntry.ShiftIterations = Offset * -1;
                                                        if(KPICalculationBase != "Shift" && KPICalculationBase != "4Hours" && KPICalculationBase != "8Hours" ){    
                                                        	var newEntry1 = new Object();
                                                            newEntry1.Area = Area; // STRING             
                                             				newEntry1.StartDate=kpidateMachineStart;
                                                            newEntry1.EndDate=kpidateMachineEnd;
                                                            
                                                            AreaFooterInfoTableResult.AddRow(newEntry1);
                                         				}
                                                            for(var z=0;z<AreaFooterInfoTableResult.rows.length;z++){
                                                                if(AreaFooterInfoTableResult.rows[z].Area==Area){
                                                                    var query = {"filters": 
                                                                        {
                                                                            "type": "EQ",
                                                                            "fieldName": "Area",
                                                                            "value": Area
                                                                        }
                                                            		};
                                                                    var params = {
                                                                    	t: AreaFooterInfoTableResult /* INFOTABLE */,
                                                                    	query: query /* QUERY */
                                                                    };
                                                             		var FooterInfotable = Resources["InfoTableFunctions"].Query(params);
                                                                    newEntry.Footer = FooterInfotable;
                                        //                            logger.error(me.name + " on GetCVSMachinesForProductionAdvisor4() Debug  3");
                                                                }
                                                            }
                                                        if( newEntry.Footer ==="" || newEntry.Footer ===undefined){
                                                            // logger.error(me.name + " on GetCVSMachinesForProductionAdvisor4() Debug  4");
                                                             newEntry.Footer =AreaFooterInfoTableResult;
                                                        }
                                                  		//logger.debug ("GetMachinesForProductionAdvisor: row -->"+row.name+" ("+x+" of "+tableLength+")");
                                            			
                                            			if (Area != "All" && Things[row1.name].isActive && (Things[row1.name].KBPlantThing==Plant || Plant==="")) { 
                                            				var machinesInArea = Things[Area].KBMachineThings;
                                                            				// result: INFOTABLE dataShape: "KBProductionAdvisorDataShape"
                                                             	
                                            				var tableLength1 = machinesInArea.rows.length;
                                            				for (var xx=0; xx < tableLength1; xx++) {
                                            				    var row2 = machinesInArea.rows[xx];
                                            				    //logger.debug ("GetMachinesForProductionAdvisor: row1 -->"+row1.KBMachineThing+" ("+xx+")");
                                            				    if (row2.KBMachineThing == row1.name) {
                                                                    UID=UID+1;
                                                                    newEntry.UID=UID;
                                            						result.AddRow(newEntry);
                                            					    //logger.debug ("GetMachinesForProductionAdvisor: inserted ("+x+"/"+xx+")");
                                            				    }
                                            				}			
                                            			} 
                                                            else {
                                                            if (Things[row1.name].isActive && (Things[row1.name].KBPlantThing==Plant || Plant==='')) {
                                                                            UID=UID+1;
                                                                            newEntry.UID=UID;
                                                                          	result.AddRow(newEntry);
                                                                          
                                                            }
                                            			}
                                            		}	
                                                }   
                                            }
                                        }
                                                var query1= {
                                                  "sorts": [
                                                      {
                                                          "fieldName": "Footer",
                                                          "isAscending": true
                                                      },
                                                      {
                                                          "fieldName": "MachineThingName",
                                                          "isAscending": true
                                                      }
                                                  	]
                                            	};
                                                 var params1 = {
                                                                t: result /* INFOTABLE */,
                                                                query: query1 /* QUERY */
                                                               };
                                                                    
                                                 result = Resources["InfoTableFunctions"].Query(params1);
                                            	
                                        } catch(err) {
                                        		logger.error(me.name + " on GetCVSMachinesForProductionAdvisor3() Error on line " + err.lineNumber + ": " + err);
                                        }
                                        ]]></code>
									</Row>
								</Rows>
							</ConfigurationTable>
						</ConfigurationTables>
					</ServiceImplementation>
				</ServiceImplementations>
				<Subscriptions/>
			</ThingShape>
			<PropertyBindings/>
			<RemotePropertyBindings/>
			<RemoteServiceBindings/>
			<RemoteEventBindings/>
			<AlertConfigurations/>
			<ImplementedShapes/>
			<ThingProperties/>
			<ConfigurationChanges>
				<ConfigurationChange changeAction="CREATE"
				                     changeReason="header : name : updated&#10;"
				                     timestamp="2022-08-11T09:06:56.637Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetTruckLocalKpisForMenue : service updated&#10;"
				                     timestamp="2022-08-11T09:08:45.562Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-08-11T09:08:55.061Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-08-11T18:55:50.713Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetTruckLocalKpisForMenue : service updated&#10;"
				                     timestamp="2022-08-11T18:57:56.086Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetTruckLocalKpisForMenue : service updated&#10;"
				                     timestamp="2022-08-11T18:59:16.732Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-08-16T12:18:58.260Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="properties : Logger : added&#10;"
				                     timestamp="2022-08-16T12:33:15.221Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-08-16T12:35:22.516Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-08-16T18:16:48.718Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetTruckLocalKpisForMenue : service updated&#10;"
				                     timestamp="2022-08-19T05:39:41.433Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetTruckLocalKpisForMenue : service updated&#10;"
				                     timestamp="2022-08-22T06:23:00.612Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiIoNioLimitsForBars : service updated&#10;"
				                     timestamp="2022-08-29T09:25:08.596Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetTruckLocalKpisForMenue : service updated&#10;"
				                     timestamp="2022-08-29T11:18:28.123Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service added&#10;"
				                     timestamp="2022-09-16T08:27:47.797Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-16T09:09:48.807Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : input parameter Machine added, inputs updated&#10;"
				                     timestamp="2022-09-16T10:25:34.287Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : output updated&#10;"
				                     timestamp="2022-09-16T10:31:55.985Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T05:52:59.188Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-19T05:53:03.926Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T06:17:58.013Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T07:10:52.171Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T08:37:30.020Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T08:42:12.127Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T09:34:40.888Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-19T09:34:50.888Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T09:35:52.746Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T09:36:36.027Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T09:43:12.122Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T10:03:12.221Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T10:14:04.377Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : input parameter SelectedKPIList updated, inputs updated&#10;"
				                     timestamp="2022-09-19T10:15:39.360Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : input parameter SelectedKPIList updated, inputs updated&#10;"
				                     timestamp="2022-09-19T10:21:33.511Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-19T10:21:39.995Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T10:24:34.429Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T10:27:16.661Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T10:29:22.837Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T10:59:23.904Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T11:01:00.934Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : output updated&#10;"
				                     timestamp="2022-09-19T11:07:33.890Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T11:09:35.577Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T11:10:37.513Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T11:10:53.888Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-19T11:10:59.951Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T11:14:46.806Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-19T11:15:37.461Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : output updated&#10;"
				                     timestamp="2022-09-19T11:25:30.747Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-20T07:06:23.843Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-20T07:13:47.070Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-20T07:23:42.890Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-20T07:31:21.203Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-20T07:40:08.763Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="properties : Logger : removed&#10;services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T08:51:26.773Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T08:52:42.032Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiIoNioLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T08:58:50.558Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T08:59:35.398Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T09:05:00.214Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T09:12:11.681Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T09:23:12.144Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-21T09:23:15.970Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-21T09:34:04.796Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T09:34:05.032Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T09:38:52.827Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T09:41:20.745Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T09:42:39.305Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiIoNioLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T14:37:40.831Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-21T14:37:46.063Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-21T14:46:10.521Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-21T14:46:20.786Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKPIMashup : service added&#10;"
				                     timestamp="2022-09-22T04:32:23.869Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKPIMashup : service updated, service deleted&#10;"
				                     timestamp="2022-09-22T06:51:53.269Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetKpiLimitsForBars : service updated&#10;"
				                     timestamp="2022-09-22T09:16:30.259Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-22T10:00:07.046Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-22T10:00:12.843Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-22T10:01:36.998Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-22T10:14:57.110Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-22T10:15:18.954Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : output updated&#10;"
				                     timestamp="2022-09-22T10:35:06.517Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-22T10:42:32.228Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-22T10:44:23.929Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-22T10:49:09.019Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : output updated&#10;"
				                     timestamp="2022-09-22T10:53:37.188Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : KBKpiSummaryShapeSorting : service updated&#10;"
				                     timestamp="2022-09-23T08:57:16.490Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-23T09:40:36.547Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-23T09:56:36.012Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-23T09:58:20.058Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-23T18:19:33.664Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckWeek : service added&#10;"
				                     timestamp="2022-09-24T01:35:07.868Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckWeek : service updated&#10;GetMultiselctTop3KpiTruckMonth : service added&#10;GetMultiselctTop3KpiTruckYear : service added&#10;"
				                     timestamp="2022-09-24T01:56:06.267Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckMonth : service updated&#10;"
				                     timestamp="2022-09-24T01:56:31.564Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckMonth : service updated&#10;"
				                     timestamp="2022-09-24T01:56:55.657Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service added&#10;"
				                     timestamp="2022-09-26T08:01:08.389Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-09-26T08:07:17.778Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-09-26T08:08:06.277Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-09-26T08:15:29.146Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-26T08:15:34.864Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-09-26T08:23:28.043Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-26T12:59:37.112Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-26T13:00:12.065Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-26T13:12:11.880Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-09-26T13:12:17.583Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-26T13:12:47.348Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-26T13:17:41.594Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-26T13:18:23.921Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-09-28T05:05:39.330Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : validateNumOfSelectedRows : service added&#10;"
				                     timestamp="2022-10-06T11:53:48.001Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : validateNumOfSelectedRows : output updated&#10;"
				                     timestamp="2022-10-06T11:54:04.485Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : validateNumOfSelectedRows : input parameter selectedList updated, inputs updated&#10;"
				                     timestamp="2022-10-06T11:55:28.890Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T13:17:07.322Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T13:25:06.016Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T13:42:01.454Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-10-10T13:42:13.641Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T13:45:10.999Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T13:46:45.482Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T15:29:12.362Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T15:30:12.783Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T15:30:48.423Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T15:37:36.026Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T15:43:16.239Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-10T15:49:55.019Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T03:10:53.690Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T03:23:24.968Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T03:25:02.745Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T03:26:14.525Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-10-11T03:26:30.815Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T03:29:05.466Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T03:30:36.699Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T03:54:10.252Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T04:04:21.711Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T04:05:15.815Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T04:08:15.910Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T04:15:39.627Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : output updated&#10;"
				                     timestamp="2022-10-11T04:31:38.617Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T04:35:31.505Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T04:48:22.145Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T04:52:09.209Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T04:55:37.780Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T04:59:05.850Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T04:59:19.790Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T05:00:49.378Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-11T05:01:09.959Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;GetMultiselctTop3KpiTruckWeek : output updated&#10;GetMultiselctTop3KpiTruckMonth : output updated&#10;GetMultiselctTop3KpiTruckYear : output updated&#10;"
				                     timestamp="2022-10-11T05:18:20.221Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : validateNumOfSelectedRows : service deleted&#10;"
				                     timestamp="2022-10-12T12:16:25.866Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-12T15:18:40.744Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-10-12T15:18:45.378Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : output updated&#10;"
				                     timestamp="2022-10-13T05:55:19.323Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T05:57:05.549Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T06:09:56.059Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T06:10:45.516Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T06:47:51.331Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T07:18:30.354Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctTop3KpiTruckDataDay : service updated&#10;"
				                     timestamp="2022-10-13T08:40:23.630Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : output updated&#10;"
				                     timestamp="2022-10-13T09:14:12.174Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T11:45:58.259Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T12:08:07.481Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T12:21:51.373Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T12:29:09.224Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T12:29:56.337Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T12:33:31.650Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T13:11:03.598Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T13:16:00.200Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T13:33:38.705Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-13T13:47:22.097Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : output updated&#10;"
				                     timestamp="2022-10-14T06:51:31.880Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-10-14T06:51:41.060Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason="services : GetMultiselctLast30KpiTruck : service updated&#10;"
				                     timestamp="2022-10-14T07:01:39.497Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="MODIFY"
				                     changeReason=""
				                     timestamp="2022-10-14T07:01:52.340Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-10-14T07:02:45.889Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-10-14T07:03:54.270Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-10-14T07:04:44.304Z"
				                     user="adm-srivastn"/>
				<ConfigurationChange changeAction="FORCEEDIT"
				                     changeReason="ForceEdit"
				                     timestamp="2022-10-14T07:08:43.382Z"
				                     user="adm-srivastn"/>
			</ConfigurationChanges>
		</Thing>
	</Things>
</Entities>