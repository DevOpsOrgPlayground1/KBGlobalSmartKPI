<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b628"
 majorVersion="9"
 minorVersion="0"
 modelPersistenceProviderPackage="MssqlPersistenceProviderPackage"
 revision="10"
 schemaVersion="1109"
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         lastModifiedDate="2022-11-03T02:35:26.886Z"
         name="KBAdministratorTranslationUtilityThing"
         projectName="KBsmartKPI"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="KBLocalAdministrators"
                         type="Group"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="KBLocalAdministrators"
                         type="Group"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBLocalAdministrators"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBLocalAdministrators"
                         type="Group"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="KBLocalAdministrators"
                         type="Group"></Principal>
                    </EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="GetTokenValue">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBMesKitHelperUser"
                         type="User"></Principal>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="KBBackGroundWorker"
                     type="Organization"></Principal>
                    <Principal
                     isPermitted="true"
                     name="KBDevelopment"
                     type="Organization"></Principal>
                    <Principal
                     isPermitted="true"
                     name="KBOrganization"
                     type="Organization"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddOrUpdateLevel2Entry">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Division"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Language"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Level1TokenName"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Level2TokenName"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Level2TokenValue"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Station"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="StatusType"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="false"
                             baseType="STRING"
                             description=""
                             name="TimeLossInSec"
                             ordinal="7"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddOrUpdateLevel2EntryV2">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Division"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="externalIdent"
                             ordinal="10"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="JSON"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Language"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Level1TokenName"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Level2TokenName"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Level2TokenValue"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Station"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="StatusType"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="StatusType1"
                             ordinal="11"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="TimeLossInSec"
                             ordinal="7"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    
                    
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddOrUpdateLevel2EntryMultiStation">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Division"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Language"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="KBMachineAdminDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="Stations"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="KBMachineLocalizedStatusDefinition1DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="Statuses"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="StatusType"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddOrUpdateLevel2EntryMultiStationV2">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Division"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Language"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="KBMachineAdminDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="Stations"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="KBMachineLocalizedStatusDefinition1DataShapeV2"
                             baseType="INFOTABLE"
                             description=""
                             name="Statuses"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="StatusType"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>                    
                    
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="AddOrUpdateToken">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Language"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Text"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Token"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CheckInfotableRowsQty">
                        <ResultType
                         baseType="NUMBER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="MyInfotable"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CreateDefaultTokensCAPS">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CreateDefaultTokensCVS">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CreateDefaultTokensOthers">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="CreateDefaultTokensRail">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="DeleteLevel2Row">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Division"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Level1"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Level2"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="Station"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetAllStationsForTranslation">
                        <ResultType
                         aspect.dataShape="KBMachineAdminDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="MachineThingName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="PlantThing"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetLocalizationTableNames">
                        <ResultType
                         aspect.dataShape="LanguageDescription"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMachinesForTranslation">
                        <ResultType
                         aspect.dataShape="KBMachineAdminDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="PlantThingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupsForDropdown">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokens">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Language"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="MashupName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSAndon">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSButton">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSDataType">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSDuplicateJobOrder">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSEditShift">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSEquipmentType">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSExpectedDuration">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSGrid">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSHome">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSInvalidMaterial">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSJobOrder">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSLabel">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSManageShifts">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSManageWorkInstruction">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSMenu">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSMessage">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSOperation">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSOperatioNoteDescription">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSOrderAssemblyParts">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSPlantShift">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSProcessingResource">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSResourceType">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSSetup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSStartTime">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSStationType">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSStatusMessage">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSTargetUnitis">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSText">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSTitle">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSTOOL">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSTotalProductiveMaintenanceRequest">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSTPMTaskDay">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSTPMTaskFrequency">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSTPMTaskType">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSUserSub">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensCAPSWorkstationSchedule">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBCMAll">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBCVSPartTraceability">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBCVSVisualizationProductionDeviation">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBLabelPrintRailMashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBLocalAndonCVSMashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBLocalLevel0FrameCVSMashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBLocalLevel0FrameRailMashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBLocalLevel0FrameRailMashupL1">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBLocalLevel0FrameRailMashupL2">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBLocalSmartKPIProductiveTimeLossesFrameMashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBManualPartDataAdministrationMainMashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBOperatorScreenCVSV2MashupL1">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBOperatorScreenCVSV2MashupL2M">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBOperatorScreenCVSV2MashupL2S">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBOperatorScreenRailV2ChangePartMashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBOperatorScreenRailV2ConfirmPartMashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBOperatorScreenRailV2Mashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBOrderAndShiftInfoBoard">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBPrinterStationRailMashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMashupTokensKBProductionAdvisorCvsMashup">
                        <ResultType
                         aspect.dataShape="KBAdministratorTranslationMashupTokensDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPlantsForTranslation">
                        <ResultType
                         aspect.dataShape="KBMachineAdminDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetStationsForTranslation">
                        <ResultType
                         aspect.dataShape="KBMachineAdminDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="MachineThingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetTokenValue">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Language"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isRequired="true"
                             baseType="STRING"
                             description=""
                             name="Token"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="InstallTileConsole">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddOrUpdateLevel2Entry">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if (TimeLossInSec == undefined || TimeLossInSec == "") {
                                        	TimeLossInSec = 0;
                                        } 
                                        
                                        var timeLossInSecInt = parseInt(TimeLossInSec);
                                        
                                        
                                        if ((Language != undefined) && (Language != "") 
                                        	&& (Level1TokenName != undefined) && (Level1TokenName != "") 
                                        	&& (Level2TokenName != undefined) && (Level2TokenName != "") 
                                        	&& (Level2TokenValue != undefined) && (Level2TokenValue != "")){
                                        	if (Level2TokenName=="new") {
                                        	
                                        		var identifier = "Level2TranslationIndex";
                                        		var params = {
                                        			Identifier: identifier /* STRING */
                                        		};
                                        		
                                        		// result: INFOTABLE
                                        		var updateIdOrderData = Things["KBKPILocalThingWorxDatabaseThing"].GetSmartKPIKepwareConnectorPointer(params);
                                        		var newIndex = updateIdOrderData.rows[0].UpdatedId+1;
                                        		Level2TokenName = Level1TokenName.replace(".1.",".2.")+"."+newIndex;
                                        		
                                        		var params = {
                                        			Identifier: identifier /* STRING */,
                                        			Id: newIndex /* LONG */
                                        		};
                                        		
                                        		// result: NUMBER
                                        		Things["KBKPILocalThingWorxDatabaseThing"].SetSmartKPIKepwareConnectorPointer(params);
                                        		
                                        	    var params = {
                                        			name: Level2TokenName /* STRING */,
                                        			value: Level2TokenValue /* STRING */
                                        		};
                                        		
                                        		// no return
                                        		LocalizationTables["Default"].AddOrUpdateToken(params);
                                        	}
                                        	
                                        	var params = {
                                        		SortingIndex: 0 /* NUMBER */,
                                        		StatusType: StatusType /* STRING */,
                                        		Status: Level2TokenName /* STRING */,
                                        		Machine: Station /* STRING */,
                                        		SubStatus: Level1TokenName /* STRING */,
                                        		Division: Division,
                                        		TimeLossInSec: timeLossInSecInt
                                        	};
                                        	
                                        	// result: LONG
                                        	var result = Things["KBKPILocalThingWorxDatabaseThing"].AddOrUpdateOperatorInputMachineDefinition(params);
                                        	
                                        	var params = {
                                        		name: Level2TokenName /* STRING */,
                                        		value: Level2TokenValue /* STRING */
                                        	};
                                        	
                                        	// no return
                                        	LocalizationTables[Language].AddOrUpdateToken(params);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>

                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddOrUpdateLevel2EntryV2">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
											logger.debug("KBAdministratorTranslationUtilityThing.AddOrUpdateLevel2EntryV2, begin");
											if (TimeLossInSec == undefined || TimeLossInSec == "") {
												TimeLossInSec = 0;
											} 
											if (JSON == undefined || JSON == "") {
												JSON = "{}";
											} 
											if (StatusType1 == undefined || StatusType1 == "") {
												StatusType1 = "default definition";
											} 
											
											var timeLossInSecInt = parseInt(TimeLossInSec);
											
											if ((Language != undefined) && (Language != "") 
												&& (Level1TokenName != undefined) && (Level1TokenName != "") 
												&& (Level2TokenName != undefined) && (Level2TokenName != "") 
												&& (Level2TokenValue != undefined) && (Level2TokenValue != "")){
												if (Level2TokenName=="new") {
												
													var identifier = "Level2TranslationIndex";
													var params = {
														Identifier: identifier /* STRING */
													};
													
													// result: INFOTABLE
													var updateIdOrderData = Things["KBKPILocalThingWorxDatabaseThing"].GetSmartKPIKepwareConnectorPointer(params);
													var newIndex = updateIdOrderData.rows[0].UpdatedId+1;
													Level2TokenName = Level1TokenName.replace(".1.",".2.")+"."+newIndex;
													
													var params = {
														Identifier: identifier /* STRING */,
														Id: newIndex /* LONG */
													};
													
													// result: NUMBER
													Things["KBKPILocalThingWorxDatabaseThing"].SetSmartKPIKepwareConnectorPointer(params);
													
												    var params = {
														name: Level2TokenName /* STRING */,
														value: Level2TokenValue /* STRING */
													};
													
													// no return
													logger.debug("AddOrUpdateToken, begin");
													LocalizationTables["Default"].AddOrUpdateToken(params);
													logger.debug("AddOrUpdateToken, end");
												}
												
												var params = {
													SortingIndex: 0 /* NUMBER */,
													StatusType: StatusType /* STRING */,
													Status: Level2TokenName /* STRING */,
													Machine: Station /* STRING */,
													SubStatus: Level1TokenName /* STRING */,
													Division: Division,
													TimeLossInSec: timeLossInSecInt,
													JSON: JSON,
													externalIdent: externalIdent,
													StatusType1: StatusType1
												};
												
												// result: LONG
												logger.debug("KBKPILocalThingWorxDatabaseThing.AddOrUpdateOperatorInputMachineDefinitionV2, begin");
												var result = Things["KBKPILocalThingWorxDatabaseThing"].AddOrUpdateOperatorInputMachineDefinitionV2(params);
												logger.debug("KBKPILocalThingWorxDatabaseThing.AddOrUpdateOperatorInputMachineDefinitionV2, end");
												
												var params2 = {
													name: Level2TokenName /* STRING */,
													value: Level2TokenValue /* STRING */
												};
												
												// no return
												LocalizationTables[Language].AddOrUpdateToken(params2);
											}

                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>


                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddOrUpdateLevel2EntryMultiStation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try{
                                            var Level2TokenName;
                                            var Level2TokenValue;
                                            var Level1TokenName;
                                            var TimeLossInSec;
                                            if(Statuses.rows.length>0){
                                            	for(z=0;z<Statuses.rows.length;z++){
                                            		Level2TokenName=Statuses.rows[z].LocalizedStatus;
                                                    Level2TokenValue=Statuses.rows[z].Status;
                                                    Level1TokenName=Statuses.rows[z].SubStatus;
                                                	TimeLossInSec=Statuses.rows[z].TimeLossInSec;
                                                    
                                                    if (TimeLossInSec === undefined || TimeLossInSec === "") {
                                                    	TimeLossInSec = 0;
                                                    } 
                                                    
                                                    var timeLossInSecInt = parseInt(TimeLossInSec);
                                                    
                                                    
                                                    if ((Language !== undefined) && (Language !== "") && (Level1TokenName !== undefined) && (Level1TokenName !== "") && (Level2TokenName !== undefined) && (Level2TokenName !== "") && (Level2TokenValue !== undefined) && (Level2TokenValue !== "")){
                                                    	if (Level2TokenName=="new") {
                                                    	
                                                    		var identifier = "Level2TranslationIndex";
                                                    		var params = {
                                                    			Identifier: identifier /* STRING */
                                                    		};
                                                    		
                                                    		// result: INFOTABLE
                                                    		var updateIdOrderData = Things["KBKPILocalThingWorxDatabaseThing"].GetSmartKPIKepwareConnectorPointer(params);
                                                    		var newIndex = updateIdOrderData.rows[0].UpdatedId+1;
                                                    		Level2TokenName = Level1TokenName.replace(".1.",".2.")+"."+newIndex;
                                                    		
                                                    		var params = {
                                                    			Identifier: identifier /* STRING */,
                                                    			Id: newIndex /* LONG */
                                                    		};
                                                    		
                                                    		// result: NUMBER
                                                    		Things["KBKPILocalThingWorxDatabaseThing"].SetSmartKPIKepwareConnectorPointer(params);
                                                    		
                                                    	    var params = {
                                                    			name: Level2TokenName /* STRING */,
                                                    			value: Level2TokenValue /* STRING */
                                                    		};
                                                    		
                                                    		// no return
                                                    		LocalizationTables["Default"].AddOrUpdateToken(params);
                                                    	}
                                                        var StationQty=0;
                                                        try{
                                                            StationQty=Stations.rows.length;
                                                            }catch(err){}
                                                        	if(StationQty>0){
                                                            	for(x=0;x<Stations.rows.length;x++){
                                                                	var params = {
                                                                		SortingIndex: 0 /* NUMBER */,
                                                                		StatusType: StatusType /* STRING */,
                                                                		Status: Level2TokenValue  /* STRING */,
                                                                		Machine: Stations.rows[x].MachineThingName /* STRING */,
                                                                		SubStatus: Level1TokenName /* STRING */,
                                                                		Division: Division,
                                                                		TimeLossInSec: timeLossInSecInt
                                                                	};
                                                                	
                                                                	// result: LONG
                                                                	var result = Things["KBKPILocalThingWorxDatabaseThing"].AddOrUpdateOperatorInputMachineDefinition(params);
                                                                	
                                                                	var params = {
                                                                		name: Level2TokenName /* STRING */,
                                                                		value: Level2TokenValue /* STRING */
                                                                	};
                                                                	
                                                                	// no return
                                                                	LocalizationTables[Language].AddOrUpdateToken(params);
                                                                }
                                                            }
                                                    }
                                                }
                                            }
                                        
                                        }catch(err){
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>

                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddOrUpdateLevel2EntryMultiStationV2">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try{
                                            var Level2TokenName;
                                            var Level2TokenValue;
                                            var Level1TokenName;
                                            var TimeLossInSec;
                                            if(Statuses.rows.length>0){
                                            	for(z=0;z<Statuses.rows.length;z++){
                                            		Level2TokenName=Statuses.rows[z].LocalizedStatus;
                                                    Level2TokenValue=Statuses.rows[z].Status;
                                                    Level1TokenName=Statuses.rows[z].SubStatus;
                                                	TimeLossInSec=Statuses.rows[z].TimeLossInSec;
                                        			JSON1=Statuses.rows[z].JSON;
                                        			externalIdent=Statuses.rows[z].externalIdent;
                                        			StatusType1=Statuses.rows[z].StatusType1;
                                                    
                                                    if (TimeLossInSec === undefined || TimeLossInSec === "") {
                                                    	TimeLossInSec = 0;
                                                    } 
                                                    
                                                    var timeLossInSecInt = parseInt(TimeLossInSec);
                                                    
                                                    
                                                    if ((Language !== undefined) && (Language !== "") && (Level1TokenName !== undefined) && (Level1TokenName !== "") && (Level2TokenName !== undefined) && (Level2TokenName !== "") && (Level2TokenValue !== undefined) && (Level2TokenValue !== "")){
                                                    	if (Level2TokenName=="new") {
                                                    	
                                                    		var identifier = "Level2TranslationIndex";
                                                    		var params = {
                                                    			Identifier: identifier /* STRING */
                                                    		};
                                                    		
                                                    		// result: INFOTABLE
                                                    		var updateIdOrderData = Things["KBKPILocalThingWorxDatabaseThing"].GetSmartKPIKepwareConnectorPointer(params);
                                                    		var newIndex = updateIdOrderData.rows[0].UpdatedId+1;
                                                    		Level2TokenName = Level1TokenName.replace(".1.",".2.")+"."+newIndex;
                                                    		
                                                    		var params = {
                                                    			Identifier: identifier /* STRING */,
                                                    			Id: newIndex /* LONG */
                                                    		};
                                                    		
                                                    		// result: NUMBER
                                                    		Things["KBKPILocalThingWorxDatabaseThing"].SetSmartKPIKepwareConnectorPointer(params);
                                                    		
                                                    	    var params = {
                                                    			name: Level2TokenName /* STRING */,
                                                    			value: Level2TokenValue /* STRING */
                                                    		};
                                                    		
                                                    		// no return
                                                    		LocalizationTables["Default"].AddOrUpdateToken(params);
                                                    	}
                                                        var StationQty=0;
                                                        try{
                                                            StationQty=Stations.rows.length;
                                                            }catch(err){}
                                                        	if(StationQty>0){
                                                            	for(x=0;x<Stations.rows.length;x++){
                                                                	var params = {
                                                                		SortingIndex: 0 /* NUMBER */,
                                                                		StatusType: StatusType /* STRING */,
                                                                		Status: Level2TokenValue  /* STRING */,
                                                                		Machine: Stations.rows[x].MachineThingName /* STRING */,
                                                                		SubStatus: Level1TokenName /* STRING */,
                                                                		Division: Division,
                                                                		TimeLossInSec: timeLossInSecInt,
                                        								JSON: JSON1,
                                        								externalIdent: externalIdent,
                                        								StatusType1: StatusType1
                                                                	};													
                                                                	
                                                                	// result: LONG
                                                                	var result = Things["KBKPILocalThingWorxDatabaseThing"].AddOrUpdateOperatorInputMachineDefinitionV2(params);
                                                                	
                                                                	var params = {
                                                                		name: Level2TokenName /* STRING */,
                                                                		value: Level2TokenValue /* STRING */
                                                                	};
                                                                	
                                                                	// no return
                                                                	LocalizationTables[Language].AddOrUpdateToken(params);
                                                                }
                                                            }
                                                    }
                                                }
                                            }
                                        
                                        }catch(err){
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>



                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="AddOrUpdateToken">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if (Language != "Default" && Language != "System"){
                                        	var params = {
                                        		name: Token /* STRING */,
                                        		value: Text/* STRING */
                                        	};
                                        	
                                        	// no return
                                        	LocalizationTables[Language].AddOrUpdateToken(params);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CheckInfotableRowsQty">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try{
                                            result=MyInfotable.rows.length;
                                        }catch(err){}
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CreateDefaultTokensCAPS">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //Rail: CAPS (Andon)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Andon.Department.Department01", value: "Department 01"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Andon.Department.Department02", value: "Department 02"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Andon.Department.Department03", value: "Department 03"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Andon.Department.IndustrialEngineering", value: "Industrial Engineering"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Andon.Department.QualityInspection", value: "Quality Inspection"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.AndonAlertMessage.Body", value: "Hello,<br><br>An ANDON alert has been triggered at the following location. Please respond as soon as possible.<br><br>Location:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.AndonAlertMessage.Subject", value: "ANDON Alert"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.AndonDepartment.DEPT01", value: "DEPT 01"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.AndonDepartment.DEPT02", value: "DEPT 02"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.AndonDepartment.DEPT03", value: "DEPT 03"});
                                        
                                        //Rail: CAPS (Button)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Accept", value: "Accept"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Add", value: "Add"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Apply", value: "Apply"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Cancel", value: "Cancel"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Close", value: "Close"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Edit", value: "Edit"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Load", value: "Load"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.NOK", value: "NOK"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.No", value: "No"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Notify", value: "Notify"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.OK", value: "OK"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Release", value: "Release"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Save", value: "Save"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Send", value: "Send"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Verify", value: "Verify"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Button.Yes", value: "Yes"});
                                        
                                        //Rail: CAPS (DataType)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.DataType.BOOLEAN", value: "BOOLEAN"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.DataType.INTEGER", value: "INTEGER"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.DataType.NUMBER", value: "NUMBER"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.DataType.STRING", value: "STRING"});
                                        
                                        //Rail: CAPS (DuplicateJobOrder)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.DuplicateJobOrder", value: "Duplicate Job Order"});
                                        
                                        //Rail: CAPS (EditShift)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.EditShift", value: "Edit Shift"});
                                        
                                        //Rail: CAPS (EquipmentType)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.EquipmentType.Area", value: "Area"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.EquipmentType.Enterprise", value: "Enterprise"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.EquipmentType.Line", value: "Line"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.EquipmentType.Site", value: "Site"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.EquipmentType.Tool", value: "Tool"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.EquipmentType.WorkStation", value: "WorkStation"});
                                        
                                        //Rail: CAPS (ExpectedDuration)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ExpectedDuration", value: "Expected Duration"});
                                        
                                        //Rail: CAPS (Grid)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Actual", value: "Actual"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ActualStartDate", value: "Actual Start Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.CalibrationDate", value: "Cal. Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.CalibrationFrequency", value: "Cal. Freq."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Category", value: "Category"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ClassID", value: "Class ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Collected", value: "Collected"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Contact", value: "Contact"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.DataType", value: "Data Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Department", value: "Department"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Description", value: "Description"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Display", value: "Display"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.DisplaySequence", value: "Display Sequence"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Download", value: "Download"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Duration", value: "Duration"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.EndTime", value: "End Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ExpiryDate", value: "Expiry Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Frequency", value: "Frequency"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ID", value: "ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.IPAddress", value: "IP Address"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.InAssembly", value: "In Assembly"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.IssueNo", value: "Issue #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.JobOrderID", value: "Job Order ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.LastModifiedDate", value: "Last Modified Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Log", value: "Log"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.LotNumber", value: "Lot Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Manufacturer", value: "Manufacturer"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Max", value: "Max"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Min", value: "Min"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ModelNumber", value: "Model #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Name", value: "Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Operator", value: "Operator"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Part", value: "Part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.PartDescription", value: "Part Description"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.PartNumber", value: "Part #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ProcessPlanID", value: "Process Plan ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ProcessPlanName", value: "Process Plan Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ProcessPlanVersion", value: "Process Plan Version"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Property", value: "Property"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Quantity", value: "Quantity"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ReferenceNumber", value: "Ref. #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ResourceID", value: "Resource ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.RevisionNumber", value: "Revision Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Sequence", value: "Sequence"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.SerialNo", value: "Serial #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.SerialNumber", value: "Serial Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Severity", value: "Severity"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ShiftName", value: "Shift Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Size", value: "Size"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.SolveDate", value: "Solve Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.StartDate", value: "Start Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.StartTime", value: "Start Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Station", value: "Station"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.StationType", value: "Station Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Status", value: "Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.SuperiorID", value: "Superior ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.TargetTimeFormat", value: "Target Time (sec)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.TargetUnits", value: "Target Units"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.TaskName", value: "Task Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.TaskType", value: "Task Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.TeamLead", value: "Team Lead"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ThingName", value: "Thing Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ThingPropertyID", value: "Thing Property ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ThingTemplate", value: "Thing Template"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.TimeElapsed", value: "Time Elapsed"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ToBeReplaced", value: "To Be Replaced"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.ToolCheck", value: "Tool Check"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Type", value: "Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Validate", value: "Validate"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Version", value: "Version"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.When", value: "When"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Grid.Workstation", value: "Workstation"});
                                        
                                        //Rail: CAPS (Home)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Home.MU.Label.MashupTitle", value: "Factory Assembly Digital Work Instruction"});
                                        
                                        //Rail: CAPS (Invalid Material)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Invalid Material", value: "Invalid Part Was Specified"});
                                        
                                        //Rail: CAPS (JobOrder)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.JobOrder.Menu.JobOrder", value: "Job Order"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.JobOrder.Menu.ManageTPMTask", value: "Manage TPM Task"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.JobOrder.Menu.Name", value: "Menu"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.JobOrder.Menu.SelectAssembly", value: "Select Assembly"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.JobOrderCompleted", value: "Job Order Completed"});
                                        
                                        //Rail: CAPS (Label)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ALL", value: "ALL"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Action", value: "Action"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Active", value: "Active"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Actual", value: "Actual"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Address", value: "Address"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.After", value: "After"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.AlertID", value: "Alert ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.AssemblyOperator", value: "Assembly Operator"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.BOM", value: "BOM"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.BatchExpiration", value: "Batch Expiration"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.BatchNumber", value: "Batch Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Before", value: "Before"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.CalibrationFrequency", value: "Calibration Freq."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Category", value: "Category"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Certification", value: "Certification"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ChangeTo", value: "Change To"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ClassID", value: "Class ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Contact", value: "Contact"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.CreatedBy", value: "Created By"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Current", value: "Current"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.CurrentOperationStep", value: "Current Operation Step"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.CurrentOperator", value: "Current Operator"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.DataType", value: "Data Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Date", value: "Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Day", value: "Day"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Department", value: "Department"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.DepartmentNotAvailable", value: "Department Not Currently Available"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Description", value: "Description"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Display", value: "Display"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.DisplaySequence", value: "Display Sequence"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Documents", value: "Documents"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Download", value: "Download"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.EmailSMSGateway", value: "Email/SMS Gateway"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.EndDate", value: "End Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.EndTime", value: "End Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.EndTimeFormat", value: "End Time (HH:MM)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.EnterPartNo", value: "Enter Part No"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.EnterRevisionNo", value: "Enter Revision No (Or Next Part No)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.EnterSerialNo", value: "Enter Serial No"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.EscalationContact", value: "Escalation Contact"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.EscalationTimes", value: "Escalation Times"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Expert", value: "Expert"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ExpiryDate", value: "Select Expiry Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.FixingComplete", value: "Fixing(s) Complete"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Frequency", value: "Frequency"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Hour", value: "Hour"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ID", value: "ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.IPAddress", value: "IP Address"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.IncludeCompletedJob", value: "Include Completed Job"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.IncludeSolvedAlert", value: "Include Solved Alerts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.InvalidLabel", value: "Invalid Label"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.IssueLetter", value: "Issue Letter"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Item", value: "Item"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ItemsToReplace", value: "Number of items to replace"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.JobNumber", value: "Job #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Line", value: "Line"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Log", value: "Log"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.LotNumber", value: "Enter Lot Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ManageShift", value: "Manage Shift"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Manufacturer", value: "Manufacturer"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Max", value: "Max"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Member", value: "Member"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Message", value: "Message"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Min", value: "Min"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Minute", value: "Minute"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Minutes", value: "Minutes"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ModelNumber", value: "Model Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ModificationState", value: "Modification State"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Name", value: "Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.NewSerialNumber", value: "New Serial #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Note", value: "Note"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Novice", value: "Novice"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Operation", value: "Operation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.OperationFile", value: "Operation File"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.OperationID", value: "Operation ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.OperationName", value: "Operation Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.OrderNumber", value: "Order #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.PartNumber", value: "Part #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Password", value: "Password"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.PlantManager", value: "Plant Manager"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Problem", value: "Problem"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ProcessPlan", value: "Process Plan"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ProcessPlanID", value: "Process Plan ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Project", value: "Project"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Property", value: "Property"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.QNumber", value: "Q #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Qualification", value: "Qualification"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ReferenceNumber", value: "Reference Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.RequiredQuantity", value: "Required Qty"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Resource", value: "Resource"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ResourceClass", value: "Resource Class"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ResourceClassProperty", value: "Resource Class Property"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ResourceProperty", value: "Resource Property"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ResourceType", value: "Resource Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.RespondedBy", value: "Responded By"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Result", value: "Result"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.SelectedPart", value: "Selected Part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.SelectedSerialNumber", value: "Selected Serial #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Sequence", value: "Sequence"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.SerialNumber", value: "Serial #"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ServiceTime", value: "Service Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Severity", value: "Severity"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Simulate", value: "Simulate"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.SolveDate", value: "Solve Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.StartDate", value: "Start Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.StartTime", value: "Start Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.StartTimeFormat", value: "Start Time (HH:MM)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.StationType", value: "Station Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Status", value: "Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Stoppage", value: "Stoppage"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.SuperiorID", value: "Superior ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.TargetTime", value: "Target Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.TargetTimeFormat", value: "Target Time (sec)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.TargetUnits", value: "Target Units"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.TaskName", value: "Task Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.TaskType", value: "Task Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.TeamLead", value: "Team Lead"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.TestSimulation", value: "Test Simulation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ThingName", value: "Thing Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ThingPropertyID", value: "Thing Property ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.TimeElapsed", value: "Time Elapsed"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ToolCalibrationCheck", value: "Tool Calibration Check"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.ToolName", value: "Tool Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Type", value: "Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.UID", value: "UID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.UnitsSelected", value: "Units Selected"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.UserID", value: "User ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Validate", value: "Validate"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Value", value: "Value"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.VerifiedOperator", value: "Verified Operator"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Version", value: "Version"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Visualization", value: "Visualization"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Label.Workstation", value: "Workstation"});
                                        
                                        //Rail: CAPS (ManageShifts)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ManageShifts", value: "Manage Shifts"});
                                        
                                        //Rail: CAPS (ManageWorkInstruction)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ManageWorkInstruction.MU.RetryLocked", value: "Retries maximum count reached. Step is locked."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ManageWorkInstruction.MU.SequenceComplete", value: "Tool Sequence Complete"});
                                        
                                        //Rail: CAPS (Menu)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Menu.Home", value: "Home"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Menu.Name", value: "Menu"});
                                        
                                        //Rail: CAPS (Message)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.AcknowledgeAndonAlert.NotDepartmentMember", value: "Acknowledged user is not a member of the requested alert department"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.AcknowledgeAndonAlert.Success", value: "Acknowledge Successfully"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.AddItemToOrder.LookupDescription", value: "Enter the part number and press the ENTER key to lookup the description if the part already exists."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.AddItemToOrder.MissingField", value: "All fields are mandatory"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.CreateOrder.ErrorCreateProcessPlan", value: "Error creating order - Unable to create order process plan"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.CreateOrder.InvalidMaterial", value: "Error creating order - Invalid order material."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.CreateOrder.InvalidProcessPlan", value: "Error creating order - Invalid process plan selected"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.CreateOrder.JobExists", value: "Error creating order - Job has been defined for selected order/serial numbers."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.CreateOrder.Success", value: "Creating Job Order Successfully"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.DimensionalInspection.MissingMeasurement", value: "Missing one or more inspections, confirm skipping inspection?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.DimensionalInspection.OutOfLimitMeasurement", value: "Dimension value is out of range, confirm override?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.EditResourceClass.MissingField", value: "Missing Required Field"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.EditShift.MissingField", value: "Missing required field(s)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.EditShift.NoWorkstation", value: "Could not identify workstation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.EditTPMTask.MissingField", value: "Missing required field"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.EditTPMTask.NoWorkstation", value: "Could not identify workstation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.MClassQualityInspection.TooManyFiles", value: "There are more then five media clips saved for this operation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageJobOrder.CannotLoadProcessPlan", value: "Cannot load Process Plan"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageJobOrder.CreateJobError", value: "Create Job Error"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageJobOrder.CreateMaterial", value: "Cannot fetch or create material"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageJobOrder.ModifySerialNumber", value: "Modify Serial Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageJobOrder.UpdateJob", value: "Edit"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageJobTicket.CreateJobError", value: "Create Job Error"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageResourceClass.ResourceClassIsUsed", value: "Resource class is used. Please remove associated resources and try again."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageResourceClass.Status", value: "Status Message"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.BadAngleStatus", value: "Bad angle status. Retry"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.BadAngleValue", value: "Bad Angle Value"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.BadEncoderPosition", value: "Bad Encoder Positions"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.BadResultsRecieved", value: "Actual value out of range. Retry"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.BadResultsStatus", value: "Actual value out of range. Retry"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.BadTorqueStatus", value: "Bad torque status. Retry"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.BadTorqueValue", value: "Bad Torque Value"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.CalibrationFailed", value: "Tool requires calibration to proceed. Restart step."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.ConnectionLoss", value: "Warning: Lost communication with device"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.ConnectionReconnect", value: "Communication is reconnected. Restart Step"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.CorrectEncoderPosition", value: "Correct Position Encoders"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.CorrectProgramNumberSelected", value: "Correct Program. Perform Tool Operation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.CorrectToolboxPosition", value: "Correct Toolbox Position Bit"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.DimensionCheckBad", value: "Dimension value out of range. Retry"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.DimensionCheckGood", value: "Dimension checked successfully"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.DimensionCheckStart", value: "Auto dimension check started. Waiting for value"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.GoodAngleValue", value: "Good Angle Value"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.GoodResultsRecieved", value: "Actual value within range"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.GoodResultsStatus", value: "Actual value within range"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.GoodTorqueValue", value: "Good Torque Value"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.IncorrectProgramNumberSelected", value: "ALERT: Incorrect program"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.IncorrectTool", value: "Incorrect Tool Selection"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.IncorrectToolboxPosition", value: "Incorrect toolbox position"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.IncorrectXEncoderPosition", value: "Error: X pos outside limits"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.IncorrectYEncoderPosition", value: "Error: Y pos outside limits"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.JobOrderCompleted", value: "Job Order Completed"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.LabelPrinting", value: "Printing Label"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.LoctiteReset", value: "Operation reset"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.LoctiteStart", value: "Loctite bottle sequence started"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.LoctiteStep1", value: "Step 1 complete. Loctite bottle placed."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.LoctiteStep2", value: "Step 2 complete. Loctite bottle lifted."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.LoctiteStep3", value: "Step 3 complete. Loctite bottle placed."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.PrintFailed", value: "Label failed to print, contact a system administrator"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.PrintSuccessful", value: "Label printed successfully"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.ProgramNumberSelected", value: "Program Number Selected"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.RetryLocked", value: "Retries maximum count reached. Step is locked."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.ToolNotRequested", value: "Tool Not Requested"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.ToolRequested", value: "Tool Requested"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.UnexpectedRepeatableType", value: "Unexpected Repeatable Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ManageWorkInstruction.UserCCNotFound", value: "User Control Characteristic not found in database for the operation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartCollection.GenericPartNotCreated", value: "Could not create the GENERIC PART material specification for Work Definition"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartCollection.GenericPartNotFound", value: "GENERIC PART not found in database"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartCollection.InvalidMas", value: "Input value length does not match mask length"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartCollection.InvalidPartNumber", value: "Invalid part number scanned, please try again"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartCollection.NoBOM", value: "No BOM items to validate for the selected part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartCollection.PartNotFound", value: "Expected a previously scanned part number, but found none"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartCollection.PartNumbersInvalid", value: "The input Part Number must match the selected Part Number in the grid"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartCollection.UnexpecetdParts", value: "Unexpected number of matching collected parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartCollection.UnexpectedInputType", value: "Unexpected input type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartConfirmation.BOMValidationFailed", value: "The input Part Number does not match a BOM Item in the current operation BOM"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartConfirmation.InvalidMask", value: "Input value length does not match mask length"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartReplacement.QuantityReplace", value: "Quantity to be replaced must be greater than quantity in assembly for current BOM parts or less than 100 for parts not in the original assembly."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartValidation.AssemblyConsumed", value: "Assembly Consumed"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartValidation.AssemblyNotFinished", value: "Assembly Not Finished"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartValidation.AssemblyNotFound", value: "Assembly Not Found"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartValidation.InvalidAssembly", value: "Invalid Assembly"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.PartValidation.UnexpectedAssembly", value: "Unexpected Assembly"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.QualityInspection.InvalidFile", value: "Could not identify a recording to review for the given operation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.QualityInspection.InvalidOperationUID", value: "Invalid OperationUID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.QualityInspection.OperationNotFound", value: "Operation not found"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ReleaseJob.Error", value: "Error releasing job order. Please refer to Thingworx logs for details."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ReleaseJob.Success", value: "Release job order successfully"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.CannotLoadProcessPlan", value: "Cannot load Process Plan"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.CannotRework", value: "This user is not authorized to use the REWORK station"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.CreateMaterialError", value: "Could not find or create material"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.InvalidCertification", value: "Invalid Certification value"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.InvalidModState", value: "Invalid Modification State value"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.JobNotComplete", value: "The job has been completed"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.JobNotFound", value: "Job not found"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.JobNotReleased", value: "The Job has not been released for production"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.JobUnknownDispatch", value: "Job has unexpected dispatch status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.NoWorkstation", value: "Could not identify workstation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.PrevOpNotComplete", value: "Previous operation not complete"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.TPMPending", value: "A TPM Task or tool calibration needs to be completed"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.SelectAssembly.UserNotCertified", value: "The current user does not have the proper qualifications for the job on this workstation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.StatusMessage.InvalidCertification", value: "Certification must be an integer between 1 and 5"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.StatusMessage.InvalidModState", value: "Modification State must be an integer between 0 and 7"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.TestResultOverride.OK", value: "Confirm passing test result and complete the work step?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ToolResultOverride.NOK", value: "Confirm recording unqualified result (NOK)?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ToolResultOverride.OK", value: "Confirm recording qualified result (OK) and complete the work step?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.TotalProductiveMaintenanceRequest.Status", value: "A task status can only be marked as complete"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ValidateUser.Error", value: "Error validating user, refer to the application log for details."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ValidateUser.InvalidUser", value: "Invalid user was entered"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Message.ValidateUser.SameUser", value: "Validation failed. Verified operator cannot be the assembly operator."});
                                        
                                        //Rail: CAPS (OperatioNoteDescription)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.OperatioNoteDescription", value: "Operation Description"});
                                        
                                        //Rail: CAPS (Operation)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Operation", value: "Operation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.OperationDescription", value: "Operation"});
                                        
                                        //Rail: CAPS (OrderAssemblyParts)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.OrderAssemblyParts.MU.Button.Accept", value: "Accept"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.OrderAssemblyParts.MU.Label.NumberOfItemsToReplace", value: "Number of Items to Replace"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.OrderAssemblyParts.MU.Label.OrderAssemblyParts", value: "Order Assembly Parts"});
                                        
                                        //Rail: CAPS (PlantShift)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.PlantShift.Shift1", value: "Shift 1"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.PlantShift.Shift2", value: "Shift 2"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.PlantShift.Shift3", value: "Shift 3"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.PlantShift.Shift4", value: "Shift 4"});
                                        
                                        //Rail: CAPS (ProcessingResource)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ProcessingResource.Area", value: "Area"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ProcessingResource.Enterprise", value: "Enterprise"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ProcessingResource.Line", value: "Line"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ProcessingResource.Site", value: "Site"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ProcessingResource.Tool", value: "Tool"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ProcessingResource.WorkStation", value: "WorkStation"});
                                        
                                        //Rail: CAPS (ResourceType)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ResourceType.Area", value: "Area"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ResourceType.Enterprise", value: "Enterprise"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ResourceType.Line", value: "Line"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ResourceType.Site", value: "Site"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ResourceType.Tool", value: "Tool"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.ResourceType.WorkStation", value: "WorkStation"});
                                        
                                        //Rail: CAPS (Setup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Setup.Menu.ManageResource", value: "Resource"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Setup.Menu.ManageResourceClass", value: "Resource Class"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Setup.Menu.Name", value: "Setup"});
                                        
                                        //Rail: CAPS (StartTime)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.StartTime", value: "Start Time (hh:mm)"});
                                        
                                        //Rail: CAPS (StationType)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.StationType.PRODUCTION", value: "PRODUCTION"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.StationType.REWORK", value: "REWORK"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.StationType.TEST", value: "TEST"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.StationType.VIRTUAL", value: "VIRTUAL"});
                                        
                                        //Rail: CAPS (StatusMessage)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.StatusMessage.MU.StatusMessage.InvalidCertification", value: "Certification must be an integer between 1 and 5"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.StatusMessage.MU.StatusMessage.InvalidModState", value: "Modification State must be an integer between 0 and 7"});
                                        
                                        //Rail: CAPS (TOOL)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TOOL.ToolClass", value: "6"});
                                        
                                        //Rail: CAPS (TPMTaskDay)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskDay.Friday", value: "Friday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskDay.Monday", value: "Monday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskDay.Saturday", value: "Saturday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskDay.Sunday", value: "Sunday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskDay.Thursday", value: "Thursday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskDay.Tuesday", value: "Tuesday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskDay.Wednesday", value: "Wednesday"});
                                        
                                        //Rail: CAPS (TPMTaskFrequency)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskFrequency.Daily", value: "Daily"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskFrequency.Monthly", value: "Monthly"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskFrequency.ShiftEnd", value: "Shift End"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskFrequency.ShiftStart", value: "Shift Start"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskFrequency.Weekly", value: "Weekly"});
                                        
                                        //Rail: CAPS (TPMTaskType)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskType.5S", value: "5S"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskType.Calibration", value: "Calibration"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskType.Engineering", value: "Engineering"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskType.Maintenance", value: "Maintenance"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TPMTaskType.Service", value: "Service"});
                                        
                                        //Rail: CAPS (TargetUnitis)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TargetUnitis", value: "Target Units"});
                                        
                                        //Rail: CAPS (Text)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Text.AudioControl", value: "Audio Control"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Text.Message", value: "Message"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Text.OperationFile", value: "Operation Files"});
                                        
                                        //Rail: CAPS (Title)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.AcknowledgeAndonAlert", value: "Acknowledge Andon Alert"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.AddItemToOrder", value: "Add Item To Order"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.AddToAction", value: "Add Action"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.AddToIssue", value: "Add Issue"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.BatchEnd", value: "Batch End"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.BatchPreparation", value: "Batch Preparation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.BatchSelection", value: "Batch Selection"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.CollectPart", value: "Collect Part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.CollectPartExpiry", value: "Collect Part Expiry"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ConfirmOverride", value: "Confirm Override"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ConfirmPart", value: "Confirm Part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.CreateAndonAlert", value: "Create Andon Alert"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.CreateOrder", value: "Create Order"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.DimensionalInspection", value: "Dimensional Inspection"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditAndonAlert", value: "Edit Andon Alert"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditCategory", value: "Edit Category"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditDepartment", value: "Edit Department"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditDepartmentLine", value: "Edit Department Line"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditDepartmentMember", value: "Edit Department Member"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditDepartmentServiceTime", value: "Edit Department Service Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditResource", value: "Edit Resource"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditResourceClass", value: "Edit Resource Class"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditResourceClassProperty", value: "Edit Resource Class Property"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditShift", value: "Edit Shift"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.EditTPMTask", value: "Edit TPM Task"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.Home", value: "CAPS - The Future Of Assembly"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageAndonAlert", value: "Manage Andon Alert"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageAndonCategory", value: "Manage Andon Category"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageAndonDepartment", value: "Manage Andon Department"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageAndonEscalation", value: "Manage Andon Escalation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageJobOrder", value: "Manage Job Order"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageOperationFile", value: "Manage Operation File"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageResource", value: "Manage Resource"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageResourceClass", value: "Manage Resource Class"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageShift", value: "Manage Shift"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageTPMTask", value: "Manage TPM Task"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageWorkinstruction", value: "Manage Assembly"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ManageWorkstation", value: "Manage Workstation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ModifySerialNumber", value: "Modify Serial Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.OperationNote", value: "Operation Note"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.PartValidation", value: "Part Validation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.QualityInspectionAudio", value: "Quality Inspection Audio"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.QualityInspectionImage", value: "Quality Inspection Image"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.QualityInspectionReviewAudio", value: "Quality Inspection Review Audio"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.QualityInspectionReviewImage", value: "Quality Inspection Review Image"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.QualityInspectionReviewVideo", value: "Quality Inspection Review Video"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.QualityInspectionVideo", value: "Quality Inspection Video"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.RecordIssueLetter", value: "Record Issue Letter"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ReleaseJobOrder", value: "Release Job Order"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ReplacePart", value: "Replace Part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.SelectAssembly", value: "Select Assembly"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.TotalProductiveMaintenanceRequest", value: "Total Productive Maintenance Request"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ValidatePart", value: "Validate Part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.ValidateUser", value: "Validate User"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.VisualInspection", value: "Visual Inspection Signoff"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.Title.WorkInstruction", value: "Manage Assembly"});
                                        
                                        //Rail: CAPS (TotalProductiveMaintenanceRequest)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.TotalProductiveMaintenanceRequest.MU.ValidationMessage.Status", value: "A task status can only be marked as complete"});
                                        
                                        //Rail: CAPS (UserSub)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.UserSub.Menu.LogOut", value: "Log Out"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.UserSubMenu.Menu.DisplayName", value: "User Menu"});
                                        
                                        //Rail: CAPS (WorkstationSchedule)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.WorkstationSchedule.Regular", value: "Regular"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.WorkstationShift.Shift1", value: "Shift 1"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.WorkstationShift.Shift2", value: "Shift 2"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.WorkstationShift.Shift3", value: "Shift 3"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "CAL.DWI.WorkstationShift.Shift4", value: "Shift 4"});
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CreateDefaultTokensCVS">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //CVS: Pareto for Time Losses (KBLocalSmartKPIProductiveTimeLossesFrameMashup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.OEE", value: "OEE"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Utilization", value: "Utilization"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.RQ", value: "RQ"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.OKParts", value: "OK-Parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.NOKParts", value: "NOK-Parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.ParetoForTimeLosses", value: "Pareto for Time Losses"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Status", value: "Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Name", value: "Name"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Minutes", value: "Minutes"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Percent", value: "Percent"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.CycleTime", value: "Cycle Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Parts", value: "Parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Name1", value: "Name 1"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Name2", value: "Name 2"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Occurrences", value: "Occurrences"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Excel", value: "Excel"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.CurrentShift", value: "Current Shift"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.LastShift", value: "Last Shift"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Today", value: "Today"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Yesterday", value: "Yesterday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.hideProductiveState", value: "hide Productive State"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.useSubStatus", value: "use Sub Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.APOPlan", value: "APO Plan"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.TheoreticalActualTime", value: "Theoretical vs. Actual Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.TimeLosses", value: "Time Losses"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Unplanned", value: "Unplanned"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Unknown", value: "Unknown"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Changeover", value: "Changeover (Auto.)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.TheoreticalTime", value: "Theoretical Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Quality", value: "Quality"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.PlannedBreak", value: "Planned Break"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.PlannedWorkingTime", value: "Planned Working Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.PlannedDowntimeM", value: "Planned Downtime (M)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.PlannedDowntimeP", value: "Planned Downtime (P)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.UnplannedDowntimeD", value: "Unplanned Downtime (D)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.NoShiftData", value: "No planned shift"});
                                        
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.OpeningTime", value: "Opening time"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.SumAllLosses", value: "Sum [all losses]"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPITimeLossesMashup.Level", value: "Level"});
                                        										
                                        
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.1.TI", value: "Technical issue"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.1.Pr", value: "Production"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.1.OI", value: "Other issue"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.1.PI", value: "Planned issue"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.1.ND", value: "Unknown"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.1.RQ", value: "Quality"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.1.NA", value: "N/A"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.1.ND.AutoSet", value: "Unkown reason"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.2.ND.AutoSet.Start", value: "Unkown reason"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.2.ND.AutoSet.unspecifiedmachineerror", value: "Unkown technical reason"});
                                        
                                        //CVS: Pareto for Part Losses (KBLocalSmartKPIMachinePartLossesFrameMashup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "LocalSmartKPIPartLossesMashup.NOK-Reasons", value: "Reasons for NOK (KPI)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "LocalSmartKPIPartLossesMashup.Retest-Reasons", value: "Reasons for Retests"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "LocalSmartKPIPartLossesMashup.PercentageCummulated", value: "Percent Cumulated"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "LocalSmartKPIPartLossesMashup.Ocurances", value: "Ocurances"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "LocalSmartKPIPartLossesMashup.Top10", value: "Show Top 10 only"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "LocalSmartKPIPartLossesMashup.ShowRetestRework", value: "Show Retest / Rework"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "LocalSmartKPIPartLossesMashup.NOKMessageKPI", value: "NOK from  KPI Table / Messages"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "LocalSmartKPIPartLossesMashup.NOK-Reasons-Messages", value: "Reasons for NOK (Messages)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "LocalSmartKPIPartLossesMashup.Rework-Reasons", value: "Reasons for Reworks"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPIMachinePartLossesFrameMashup.Station", value: "Stations"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPIMachinePartLossesFrameMashup.Machine", value: "Machines"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDetailedNOKReasonsMashup.Count", value: "Count"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDetailedNOKReasonsMashup.CumulativePercent", value: "Cumulative percent"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDetailedNOKReasonsMashup.LineOnly", value: "KPI relevant only"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDetailedNOKReasonsMashup.Percent", value: "Percent"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDetailedNOKReasonsMashup.Property", value: "Property"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDetailedNOKReasonsMashup.Title", value: "NOK data related to:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDetailedNOKReasonsMashup.Top10", value: "Top 10 only"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalSmartKPIMachinePartLossesMashup.NOKDetails", value: "NOK details"});
                                        
                                        //CVS: Production Advisor (KBProductionAdvisorCvsMashup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Status", value: "Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.OEE", value: "OEE"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Utilization", value: "Utilization"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.RQ", value: "RQ"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.OKParts", value: "OK-Parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Retests", value: "NOK-Parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.ReworkParts", value: "Retests"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.ShiftFactor", value: "Shift Factor"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.TimeBase", value: "Time Base"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.WeeklyStatistic", value: "Weekly Statistic"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.TimeLoss", value: "Time Loss"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.CVSProductionAdvisor", value: "CVS Production Advisor"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.CalculationBase", value: "Calculation Base"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Target", value: "Target"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.WeeklyStatisticforMachine", value: "Weekly Statistic for Machine"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.UserDateStart", value: "Date Start"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.UserDateEnd", value: "Date End"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Area", value: "Area"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.WorkersAtLine", value: "Actual"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.WorkersPlanned", value: "Planned"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Actual", value: " "});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.KB", value: " "});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.DLP3", value: " "});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Customer", value: " "});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Average", value: " "});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.StepTimeback", value: "Step Time back"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Lines", value: "Lines/Machines"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Parts", value: "Parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.TargetDelta", value: "Target delta"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.DLP1", value: "DLP1"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Workers", value: "Workers"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Info", value: "Info"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsSingleMachineFooterMashup.SummaryLabel", value: "Summary "});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Year", value: "Year"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Month", value: "Month"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Week", value: "Week"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Day", value: "Day"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.4Hours", value: "4Hours"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.8Hours", value: "8Hours"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Quarter", value: "Quarter"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.Shift", value: "Shift"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.UserSet", value: "User set"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBProductionAdvisorCvsMashup.ShowHide", value: "Show/Hide"});
                                        
                                        //KBAssetAdvisorCvsMashup
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.CVSAssetAdvisor", value: "CVS Asset Advisor"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.Actual", value: "Actual"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.Month", value: "Month"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.Week", value: "Week"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.Target", value: "Target"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.SpareParts", value: "Spare Parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.InternalLabor", value: "Internal Labor"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.Quarter", value: "Quarter"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.ExternalLabor", value: "External Labor"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.MaintenanceCosts", value: "Maintenance Costs"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.MTBF", value: "MTBF"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.MTTR", value: "MTTR"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.Downtime", value: "Downtime"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.ReactionTime", value: "Reaction Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.Breakdown", value: "Breakdown"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.Malfunction", value: "Malfunction"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.SpareParts", value: "Spare Parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.InternalLabour", value: "Internal Labour"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.ExternalLabour", value: "External Labour"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBAssetAdvisorCvsMashup.DowntimeSAP", value: "Downtime SAP"});
                                                                                
                                        //CVS: KBSAPPMInputDataMashup 
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.Label", value: "Record breakdown to SAP PM"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.DSID", value: "DSID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.ARBPL", value: "Workcenter (ARBPL)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.QMART", value: "Type (QMART)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.QMTXT", value: "Short Text (QMTXT)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.TPLNR", value: "SAP functional place (TPLNR)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.EQUNR", value: "Reason Type number (EQUNR)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.TEXT_LINE", value: "Long Text (TEXT_LINE)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.QMNAM", value: "User name (QMNAM)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.PARNR", value: "User ID (PARNR)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.MSAUS", value: "Use explicit Date&Time (MSAUS)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.PRIOK", value: "PRIOK"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.AUSVN", value: "Date (AUSVN)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.AUZTV", value: "Time (AUZTV)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.STATE", value: "STATE"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.ID", value: "ID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.MissingField1", value: "The Field"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.MissingField2", value: "is mandatory!"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.DefineReason", value: "Define reason "});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.DefineStation", value: "Define station "});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.ErrorAt", value: "Error at: "});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.MTNotified", value: "MT notified "});    			
                                            			
                                        
                                        //CVS: Operator Screen Frame (KBLocalLevel0FrameCVSMashup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0FrameCVSMashup.On", value: "On"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0FrameCVSMashup.Off", value: "Off"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0FrameCVSMashup.RefreshNow", value: "Refresh Now"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0FrameCVSMashup.LogoutAllUsers", value: "Logout all Users from Station"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0FrameCVSMashup.LogoutMessage", value: "All Users were logged out"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0FrameCVSMashup.OKBreakDownEnd", value: "End of Maintenance work"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0FrameCVSMashup.MaintenanceOnSite", value: "Maintenance onsite"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0FrameCVSMashup.OKBreakDownEndNotification", value: "Recorded end of Maintenance work"});
                                        
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.CVS.ChangeMachineStatus", value: "Change Machine Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.CVS.InputMachineSlowdown", value: "Input Machine Slowdown"});
                                         
                                        
                                        //CVS: Operator Screen (KBOperatorScreenCVSV2Mashup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.TitleRateOfQuality", value: "Rate of Quality"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.PerformanceEfficency", value: "Performance Efficency"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.EquipementAvailability", value: "Equipement Availability"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschMessage.Button.NokPart", value: "Nok part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschMessage.Button.Retest", value: "Retest"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschMessage.Button.Rework", value: "Rework"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschMessage.Button.ProcessEfficiency", value: "Process efficiency"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.CVS.History", value: "History"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.CVS.Change", value: "Change"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.close", value: "close"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.back", value: "back"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.save", value: "save"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.StatusTime", value: "Status Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.Duration", value: "Duration"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.CurrentLevel1Status", value: "Current Level 1 Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.CurrentLevel2Status", value: "Current Level 2 Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.NewLevel1Status", value: "New Level 1 Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.NewLevel2Status", value: "New Level 2 Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.Status", value: "Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.SubStatus", value: "Sub-Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.Description", value: "Description"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.NOKReasonsOnly", value: "Record Reasons"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.NOKReasonsAndPartsproduction", value: "Record reasons and parts production"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.NOKParts", value: "NOK parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.Record", value: "Record"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.Order", value: "Order:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.PartNr", value: "Part Number:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.OKpartRecorded", value: "OK parts were recorded"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.NOKpartRecorded", value: "NOK parts were recorded"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.DowntimeRecorded", value: "Downtime Reason was recorded"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenCVSV2Mashup.MessageRecorded", value: "Part information recorded"});
                                        
                                        
                                        //CVS KBLocalLevel0AddPartCSVMashup
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0AddPartCSVMashup.NOKReasonsOnly", value: "Record Reasons"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0AddPartCSVMashup.NOKReasonsAndPartsproduction", value: "Record reasons and parts production"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0AddPartCSVMashup.Title", value: "Confirm produced parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0AddPartCSVMashup.NOKReason", value: "NOK reason:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0AddPartCSVMashup.OKParts", value: "OK parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalLevel0AddPartCSVMashup.NOKParts", value: "NOK parts"});
                                        
                                        
                                        //CVS: Andon Screen (KBLocalAndonCVSMashup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.CVS.TargetNow", value: "Target now"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.CVS.TargetShift", value: "Target shift"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.CVS.StopPopup", value: "Stop automatic Popup window"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.CVS.StopPopupMessage", value: "Automatic popup window was temporarily stopped!"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.Actual", value: "Actual"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.APOTargetNow", value: "APO Target now"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.LabourTargetNow", value: "Labor Target now"});
                                        									    LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.Partnumber", value: "Partnumber"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.RQ", value: "RQ"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.OEE", value: "OEE"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.Order", value: "Order"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.Operation", value: "Op."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.Part", value: "Part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.Qty", value: "#"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.TargetDLP1", value: "Target DLP1"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.DLP1", value: "DLP1"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.DLP1Actual", value: "DLP1 Actual"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.DLP1Target", value: "DLP1 Target"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.ActualDLP1Target", value: "Actual DLP1 Target"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.nextUpdateIn", value: "Next update in "});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.minutes", value: "minute(s)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.PartNotifText1", value: "Manualy assigned part number ("});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalAndonCVSMashup.PartNotifText2", value: ") is not the same as provided by PLC ("});
                                        
                                        
                                        //  KBLocalStationOrderAssignementMashup
                                        
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalStationOrderAssignementMashup.PartNumber", value: "PartNumber"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalStationOrderAssignementMashup.OrderNumber", value: "OrderNumber"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalStationOrderAssignementMashup.Operation", value: "Operation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalStationOrderAssignementMashup.EarliestScheduledStartExecution", value: "Earliest Scheduled Start"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalStationOrderAssignementMashup.PlannedEndTime", value: "Planned End Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalStationOrderAssignementMashup.PlannedQuantities", value: "Planned Quantities"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalStationOrderAssignementMashup.ConfirmedParts", value: "Confirmed Parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLocalStationOrderAssignementMashup.ConfirmSelection", value: "Confirm Selection"});
                                        
                                        // Order&ShiftInfoBoard
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.ShiftTitle", value: "Shift Info Board"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.OrderTitle", value: "Order Info Board"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.SelectArea", value: "Select Area"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.PreviousWeek", value: "Previous Week"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.NextWeek", value: "Next Week"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.Monday", value: "Monday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.Tuesday", value: "Tuesday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.Wednesday", value: "Wednesday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.Thursday", value: "Thursday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.Friday", value: "Friday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.Saturday", value: "Saturday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.Sunday", value: "Sunday"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.PlannedOrders", value: "Planned Orders"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.ActualOrders", value: "Actual Orders"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.EarliestStart", value: "Earliest Start"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.LatestStart", value: "Latest Start"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.Break", value: "Break (B)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.WorkingTime", value: "Working Time (W)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.PMOrder", value: "PM Order (M)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.PlannedDowntime", value: "Planned Downtime (P)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.ResourceInactive", value: "Resource Inactive (D)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.Undefined", value: "Undefined"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "OrderShiftInfoBoard.Legend", value: "Legend:"});
                                        
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBDailyManagementSystemType1ShiftMashup.Shift", value: "Shift"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBDailyManagementSystemType1ShiftMashup.LineStatus", value: "Line Status"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBDailyManagementSystemType1ShiftMashup.Order", value: "Order"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBDailyManagementSystemType1ShiftMashup.APOOrder", value: "APO Order"});
                                        										
                                        										//CVS: Visualization of Production Deviation
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.LessThen10Diference", value: "Less then 10% Diference"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.Difference10To20", value: "Diference 10% - 20%"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.MoreThen20Difference", value: "More then 20% Difference"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.PartNumber", value: "Part Number"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.NumberOfProducedParts", value: "QTY Produced"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.ProcessingTimeInSecCO", value: "ProcessingTime InSecCO"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.tgMaxInSec", value: "tgMax InSec"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.AVG_realProcessingTimeInSec", value: "AVG RealProcessingTime InSec"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.Median_RealProcessingTime", value: "Median RealProcessingTime"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.ProcessingTimeInSecCO_minus_realProcessingTime", value: "ProcessingTimeInSecCO - RealProcessingTime"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.MedianRealProcessingTime_minus_realProcessingTime", value: "MedianRealProcessingTime - realProcessingTime"});
                                        									                                        	LocalizationTables["Default"].AddOrUpdateToken({name: "KBCVSVisualizationProductionDeviationMashup.PlannedNumberOfWorkers", value: "Planned Operators"});
                                        									                                        
                                        									                                        
                                        									    //CVS: Part Treaceability 
                                        									                                        
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.PartNumber", value: "Part Number"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.SerialNumber", value: "Serial Number"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.ExportProcesData", value: "Export process Data"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.CreationTime", value: "Creation Time"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.ProductionTime", value: "Production Time"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.isPartOK", value: "isPartOK"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.SAPOperationNumber", value: "SAP Operation Number"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.OrderNumber", value: "Order Number"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.timePerPartSec", value: "Time Per Part Sec"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.ScrapReason", value: "Scrap Reason"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.numberOfParts", value: "Number Of Parts"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.Station", value: "Station"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.confirmToSAP", value: "Confirm To SAP"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.SAPconfirmationResult", value: "SAP Confirmation Result"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.confirmedToSAP", value: "Confirmed To SAP"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.isUpdated", value: "isUpdated"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.Machine", value: "Machine"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.WorkCenterNumber", value: "Work Center Number"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.Measured_Item", value: "Measured Item"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.Measured_Item2", value: "Measured Item2"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.Further_Description", value: "Further Description"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.ProcessDataMIN", value: "Process Data MIN"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.ProcessDataActual", value: "Process Data Actual"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.ProcessDataMAX", value: "Process Data MAX"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.ProcessDataString", value: "Process Data String"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.Time_of_measured_data", value: "Time_of_measured_data"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.Comment", value: "Comment"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.FloatValue", value: "Float Value"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.TextValue", value: "Text Value"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.DateTimeValue", value: "DateTime Value"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.KeyValueUpdateTime", value: "KeyValue Update Time"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.Operation", value: "Operation"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.PropertyKey1", value: "Property Key1"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.OrderData", value: "Order Data"});
                                        										LocalizationTables["Default"].AddOrUpdateToken({name: "KBPartTraceabilityMashup.ProcessData", value: "Process Data"});
                                        										
                                        																				
                                        										//CVS: KBSAPPMInputDataMashup 
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.Title", value: "Record breakdown to SAP PM"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.DSID", value: "DSID"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.ARBPL", value: "Production Workcenter"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.QMART", value: "Notification Type"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.QMTXT", value: "Short Text"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.TPLNR", value: "Functional location"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.EQUNR", value: "Equipment number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.TEXT_LINE", value: "Long Text"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.QMNAM", value: "Reported by"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.PARNR", value: "Contact person/maintenance dep."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.MSAUS", value: "Breakdown?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.PRIOK", value: "Priority"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.AUSVN", value: "Date"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.AUZTV", value: "Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.STATE", value: "STATE"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.ID", value: "ID"});    	
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.Machine", value: "Machine"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.StatusTime", value: "Malfunction Date/Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.RecordRequest", value: "Record request"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.Confirmation", value: "SAP PM notification was recorded."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.MailConfirmation", value: "The e-mail was sent."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.UseFreeText", value: "Use free text"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBSAPPMInputDataMashup.UseListOfValues", value: "Use list of values"});
                                        
                                        //CVS: KBMultiMachineLossComparison
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMultiMachineLossComparisonCVSMashup.MultiMachine", value: "Multi Machine Loss Comparison"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMultiMachineLossComparisonCVSMashup.GanttDiagram", value: "Gantt diagram:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMultiMachineLossComparisonCVSMashup.KPI", value: "KPI values:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMultiMachineLossComparisonCVSMashup.Operator", value: "Operator"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMultiMachineLossComparisonCVSMashup.APOplan", value: "APO plan:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMultiMachineLossComparisonCVSMashup.PleaseSelectEither", value: "Please select either Show Gantt or Table View"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMultiMachineLossComparisonCVSMashup.Table View", value: "Table View:"});
                                        
                                        
                                        //CVS: KBDLPAdministrationMashup
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDLPAdministrationMashup.Title", value: "Local DLP value configuration"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDLPAdministrationMashup.OperatorQuantity", value: "Operator Quantity"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDLPAdministrationMashup.DLP1Value", value: "DLP1 Value"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDLPAdministrationMashup.PartNumber", value: "Part Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBDLPAdministrationMashup.UpdateTime", value: "Update Time"});
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CreateDefaultTokensOthers">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //others
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.MachineStatus", value: "Machine Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.PlannedDowntime", value: "Planned Downtime"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.TitleCurrentStatus", value: "Current Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.TitleLastStatusChange", value: "Last Status Change"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.TitleCurrentOrderNumber", value: "Current Order/Part Number"});
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="CreateDefaultTokensRail">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //Rail: Operator Screen, Part Confirmation (KBOperatorScreenRailV2ConfirmPartMashup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ConfirmPartMashup.ConfirmationNumber", value: "Confirmation Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ConfirmPartMashup.PartNumber", value: "Part Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ConfirmPartMashup.OperationNumber", value: "Operation Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ConfirmPartMashup.OKParts", value: "OK parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ConfirmPartMashup.EmptyFixture", value: "Empty Fixture"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ConfirmPartMashup.NOKParts", value: "NOK parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ConfirmPartMashup.ConfirmParts", value: "CONFIRM PARTS"});
                                        
                                        //Rail: Operator Screen, Part Change (KBOperatorScreenRailV2ChangePartMashup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ChangePartMashup.ConfirmationNumber", value: "Confirmation Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ChangePartMashup.PartNumber", value: "Part Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ChangePartMashup.OperationNumber", value: "Operation Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2ChangePartMashup.ChangeParts", value: "CHANGE PARTS"});
                                        
                                        
                                        //Rail: Operator Screen (KBOperatorScreenRailV2Mashup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.UnplannedRepairBreakdown", value: "UNPLANNED REPAIR/BREAKDOWN"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.TestsTechnology", value: "TESTS & TECHNOLOGY"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.OperatorAbsence", value: "OPERATOR ABSENCE"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.Changeover", value: "CHANGEOVER"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.Miscellaneous", value: "MISCELLANEOUS"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.CurrentTime", value: "Current Time:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.StartShift", value: "Start Shift:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.EndShift", value: "End Shift:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.CollisionButton", value: "Collision"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.MachineErrorButton", value: "Machine Error"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ToolBreakButton", value: "Tool Break"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.UnplannedMaintenanceButton", value: "Unplanned Maintenance"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ProblemTechnologyButton", value: "Problem Technology"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.NewTechnologyButton", value: "New Technology"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.FixtureTestButton", value: "Fixture Test"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ToolTestButton", value: "Tool Test"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.NoStaffButton", value: "No Staff"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.MultiMachineServiceButton", value: "Multi-Machine Service"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.TeamMeetingButton", value: "Team Meeting"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.BreakButton", value: "Break"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.TrainingButton", value: "Training"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.3DMeasurementButton", value: "3D Measurement"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ChangeoverButtonRight", value: "Changeover"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.NoMaterialButton", value: "No Material"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ToolChangeWearButton", value: "Tool Change/Wear"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.SinglePalletHandlingButton", value: "Single Pallet Handling"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.NoOrderButton", value: "No Order"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.CleaningButton", value: "Cleaning"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.SerialProductionButton", value: "SERIAL PRODUCTION"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ChangeoverButtonLeft", value: "CHANGEOVER"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ReworkButton", value: "REWORK"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ConfirmPartsButton", value: "CONFIRM PARTS"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ChangePartButton", value: "MANUALLY CHANGE PART / OPERATION"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.PlannedMaintenanceButton", value: "PLANNED MAINTENANCE"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.TestTechnologyButton", value: "TEST & TECHNOLOGY"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.UnknownButton", value: "Unknown"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.CurrentOrder", value: "Current Order"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ConfirmedOrders", value: "Confirmed Orders"});
                                        
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.LiveOee", value: "LIVE OEE"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.OeeTarget", value: "OEE TARGET"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.RateOfQuality", value: "Rate of Quality"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.Production", value: "Prod."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.Ok", value: "OK"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.Nok", value: "NOK"});
                                        
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.CurrentOperation", value: "Current Operation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.CycleTime", value: "Part Current Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ReferenceTime", value: "Part Reference Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.PartNumber", value: "Part No."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.Operation", value: "Operation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.NcProgram", value: "NC Program"});
                                        
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ProducedParts", value: "Current Operation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ProducedPartsPartNo", value: "Part No."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ProducedPartsRunningPartNo", value: "Running Part No."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ProducedPartsExecutedPartNo", value: "Executed Part No."});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ProducedPartsOp", value: "OP"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ProducedPartsOk", value: "OK"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBOperatorScreenRailV2Mashup.ProducedPartsNok", value: "NOK"});
                                        
                                        //Rail: Operator Screen (KBLocalLevel0FrameRailMashup)
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.MachineStatus", value: "Machine Status"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Downtime", value: "Downtime"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.QualityLosses", value: "Quality Losses"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.SpeedLosses", value: "Speed Losses"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.LongIdleTime", value: "Long idle time!   INSERT DOWNTIME"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.OEEPlan", value: "OEE plan"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.TargetNow", value: "Target now"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.TargetShift", value: "Target shift"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.OrderOKParts", value: "Order OK parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.OrderNOKParts", value: "Order NOK parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.ChangeCurrentOrder", value: "Change Current order and part number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.AddProducedParts", value: "Confirm produced parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.Actual", value: "Actual"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.RQ", value: "RQ"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.ChangePartOrderNumber", value: "Change current order and part number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.OrderNumber", value: "Order number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.PartNumber", value: "Part number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.OKParts", value: "OK parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.NOKParts", value: "NOK parts"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.SetTargets", value: "Set targets"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.TargetForCurrentShift", value: "Target for current shift"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.NoStation", value: "No Station"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.NoTime", value: "No Time"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBMaschStatus.Title.Rail.OEE", value: "OEE"});
                                        
                                        //added for microelectrica label
                                        
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.orderNumber", value: "Order Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.search", value: "Search"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.reset", value: "Reset"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.microelectricaLabelPriniting", value: "Microelettrica Label Printing"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.chooseLine", value: "Choose Line"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.setup", value: "Setup"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.showalreadyprintedserialnumbers", value: "Show already printed serial numbers?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.batchprintsetalllabelsasdefault", value: "Batch print (set all labels as default)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.labelsToPrint", value: "Labels to print"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.printGS1ProductLabel", value: "Print GS1 Product Label"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.printGS1PackagingLabel", value: "Print GS1 Packaging Label"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.printProtocol", value: "Print Protocol"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.printANSIProductLabel", value: "Print ANSI Product Label"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.serialNumber", value: "Serial Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.numberofLabelstoprint", value: "Number of Labels to print"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBLabelPrintMashup.printLabel", value: "Print Label"});
                                        
                                        //added for manual part data administration
                                        
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.enterPartNumberToSearch", value: "Enter Part Number to Search"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.partNumber", value: "Part Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.addNewPartNumber", value: "Add New Part Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.enterNewPartNumber", value: "Enter New Part Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.createNewPart", value: "Create New Part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.deleteExistingPartNumber", value: "Delete Existing Part Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.confirmToDeleteSelectedPartNumber", value: "Confirm to delete Selected Part Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.confirmAction", value: "Confirm Action"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.yes", value: "Yes"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.no", value: "No"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.editSelectedPartNumber", value: "Edit Selected Part Number"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.editValues", value: "Edit Values"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.propertyKey", value: "PropertyKey"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.textValue", value: "TextValue"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.description", value: "Description"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.auxVoltage", value: "AUX VOLTAGE"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.customerSpecification", value: "CUSTOMER SPECIFICATION"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.dimensionDrawingNumber", value: "DIMENSION DRAWING NUMBER"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.nominalVoltage", value: "NOMINAL VOLTAGE"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.nameOrDescriptionOfThePart", value: "Name or description of the part"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.thermalCurrent", value: "THERMAL CURRENT"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.automatedAnsi", value: "AUTOMATED ANSI PRINTING (YES/NO)?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.protocolPrinting", value: "PROTOCOL PRINTING (YES/NO)?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.alreadyExistDoYouWantToRewrite?", value: "already exist Do you want to rewrite?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.save", value: "Save"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.updateThingWorxDB", value: "Update ThingWorx DB"});
										LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.lastUpdated", value: "Last updated:"});
										LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.popupMessage", value: "Do you really want to update the ThingWorx database with the latest Sirio database data? (Notice: It will NOT be updated for the one selected part number data only, but ALL part number data in ThingWorx, which are available in the Sirio database!)"});
										LocalizationTables["Default"].AddOrUpdateToken({name: "KBManualPartDataAdministrationMainMashup.cancel", value: "Cancel"});
                                        
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.workstations", value: "Work Stations"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.workstation", value: "Work Station"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.printers", value: "Printers"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.printer", value: "Printer"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.ipAddress", value: "IP Address"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.labelPrinter", value: "Label Printer"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.printerConfiguration", value: "Printer Configuration"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.labelPrinting", value: "Label Printing"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.yes", value: "Yes"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.no", value: "No"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.labelPrintingYesNo", value: "Label Printing (Yes/No)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.labelPrinterIPAddress", value: "Label Printer IP Address"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.packagingPrinter", value: "Packaging Printer"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.packagingPrinting", value: "Packaging Printing"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.packagingPrintingYesNo", value: "Packaging Printing (Yes/No)"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.packagingPrinterIPAddress", value: "Packaging Printer IP Address"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.createPrinter", value: "Create Printer"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.PrinterAssignmentSetIPAddress", value: "Printer Assignment / Set IP Address"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.deletePrinter", value: "Delete Printer"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.printerNotes", value: "Note: When assigning the printer name please be aware of the following:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.printerNotesForPackagingPrinter", value: "2. For Packaging Printer, please give name like ZebraPrinterA6MILP4031"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.note:", value: "Note:"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.areTheStationsFromWhichSelectedPrinterWillGetDeleted", value: "are the Stations from which selected Printer will get deleted"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.deleteConfirmation", value: "Delete Confirmation"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.setPrinter", value: "Set Printer"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.areYouSure,YouWantToDelete?", value: "Are you sure,you want to delete?"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.printerTypes", value: "Printer Types"});
                                        LocalizationTables["Default"].AddOrUpdateToken({name: "KBPrinterSationMashup.typesOfPrinters", value: "Types of Printers"});
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="DeleteLevel2Row">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        if (Level2 != "KBMaschStatus.2.Productive.Start" && Level2 != "KBMaschStatus.2.OI.AutoSet.Start"){
                                        	
                                        
                                        	// result: STRING
                                        	var DB = Resources["KBThingWorxServerSystem"].GetKPILocalThingWorxDatabaseThing();
                                        	
                                        	
                                        	var params = {
                                        		Status: Level2 /* STRING */,
                                        		Division: Division /* STRING */,
                                        		SubStatus: Level1 /* STRING */,
                                        		Machine: Station /* STRING */
                                        	};
                                        	
                                        	logger.debug("DeleteLevel2Row Level1: " + Level1);
                                        	logger.debug("DeleteLevel2Row Level2: " + Level2);
                                        	logger.debug("DeleteLevel2Row Station: " + Station);
                                        	logger.debug("DeleteLevel2Row Division: " + Division);
                                        	
                                        	// result: NUMBER
                                        	Things[DB].DeleteOperatorInputMachineDefinition(params);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetAllStationsForTranslation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try{    
                                            var MyMachine;
                                            var params = {
                                                infoTableName : "InfoTable",
                                                dataShapeName : "KBMachineAdminDataShape"
                                            };
                                            var MyPlant="";
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBMachineAdminDataShape)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                            var params = {
                                            	maxItems: 500 /* NUMBER */,
                                            	nameMask: undefined /* STRING */,
                                            	thingTemplate: "KBLocalStationThingTemplate" /* THINGTEMPLATENAME */
                                            };
                                            // result: INFOTABLE dataShape: SpotlightSearchWithPersistent
                                            var things = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params);
                                          	var params = {
                                        	    infoTableName : "InfoTable",
                                        	    dataShapeName : "KBMachineAdminDataShape"
                                        	};
                                        	var tableLength = things.rows.length;
                                        	for (var x=0; x < tableLength; x++) {
                                        	    var row = things.rows[x];
                                                MyPlant="";
                                        	    //Your code here
                                        	    // KBMachineAdminDataShape entry object
                                                MyMachine=row.name;
                                        	    var newEntry = new Object();
                                        	    newEntry.ShiftFactor = undefined; // NUMBER
                                        	    newEntry.MachineThingName = row.name; // STRING
                                        	    newEntry.MainStationForStatus = undefined; // STRING
                                        	    newEntry.FullName = Things[row.name].FullName; // STRING
                                        	    newEntry.DisplayName = Things[row.name].DisplayName + " ("+newEntry.MachineThingName+")"; // STRING
                                        	    newEntry.isActive = Things[row.name].isActive; // BOOLEAN
                                        	
                                        	    if (newEntry.DisplayName === "") {
                                        	    	newEntry.DisplayName = newEntry.MachineThingName;
                                        	    }
                                                
                                                try{
                                                	MyPlant =Things[Things[row.name].KBLocalLineThing].KBPlantThing;
                                                }catch(err){
                                            		logger.debug('Service issue in GetAllStationsForTranslation ' + me.name + ' at ' + err.lineNumber + ': ' + err +", machine: "+MyMachine);
                                        		}
                                                    if (newEntry.isActive && MyPlant !== "") {
                                                        if(MyPlant == PlantThing){
                                                            newEntry.DisplayName=newEntry.DisplayName;
                                                		 	result.AddRow(newEntry);
                                                        }
                                                    }
                                           }
                                            var sort = new Object();
                                            	sort.name = "DisplayName";
                                            	sort.ascending = true;
                                            	result.Sort(sort);
                                            
                                        }catch(err){
                                            logger.error('Service error in GetAllStationsForTranslation ' + me.name + ' at ' + err.lineNumber + ': ' + err +", machine: "+MyMachine);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetLocalizationTableNames">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE dataShape: LanguageDescription
                                        var tables = Resources["RuntimeLocalizationFunctions"].GetLanguages();
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "LanguageDescription"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(LanguageDescription)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var tableLength = tables.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = tables.rows[x];
                                            //Your code here
                                            // LanguageDescription entry object
                                            if (row.name.length > 3 && row.name != "System" && row.name != "Default") {
                                                var newEntry = new Object();
                                                newEntry.languageCommon = row.languageCommon+" -> "+row.name; // STRING
                                                newEntry.name = row.name; // STRING [Primary Key]
                                                newEntry.description = row.description; // STRING
                                                newEntry.avatar = row.avatar; // IMAGELINK
                                                newEntry.languageNative = row.languageNative; // STRING
                                        
                                                result.AddRow(newEntry);
                                            }
                                        }
                                        
                                        
                                        
                                        var sort = new Object();
                                        sort.name = "languageCommon";
                                        sort.ascending = true;
                                        result.Sort(sort);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMachinesForTranslation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	maxItems: undefined /* NUMBER */,
                                        	nameMask: undefined /* STRING */,
                                        	thingTemplate: "KBLocalMachineThingTemplate" /* THINGTEMPLATENAME */
                                        };
                                        
                                        // result: INFOTABLE dataShape: SpotlightSearchWithPersistent 
                                        var things = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params);
                                        
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBMachineAdminDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBMachineAdminDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var tableLength = things.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = things.rows[x];
                                            //Your code here
                                            // KBMachineAdminDataShape entry object
                                            var newEntry = new Object();
                                            newEntry.ShiftFactor = undefined; // NUMBER
                                            newEntry.MachineThingName = row.name; // STRING
                                            newEntry.MainStationForStatus = undefined; // STRING
                                            newEntry.FullName = Things[row.name].DisplayName + " ("+newEntry.MachineThingName+")"; // STRING
                                            newEntry.DisplayName = Things[row.name].DisplayName + " ("+newEntry.MachineThingName+")"; // STRING
                                            newEntry.isActive = Things[row.name].isActive; // BOOLEAN
                                        
                                            if (newEntry.DisplayName === "") {
                                            	newEntry.DisplayName = newEntry.MachineThingName;
                                            }
                                            
                                        	var params = {
                                        	    MachineThingName : newEntry.MachineThingName
                                        	};
                                            
                                           
                                            
                                            var stations =me.GetStationsForTranslation(params);
                                            
                                            
                                            if (newEntry.isActive && Things[row.name].KBPlantThing == PlantThingName && stations.rows.length > 0) {
                                                result.AddRow(newEntry);
                                        
                                            }
                                        
                                        
                                        }
                                        
                                        var newEntry = new Object();
                                        newEntry.ShiftFactor = undefined; // NUMBER
                                        newEntry.MachineThingName = "all"; // STRING
                                        newEntry.MainStationForStatus = undefined; // STRING
                                        newEntry.FullName = "00000000000000000000000000000"; // STRING
                                        newEntry.DisplayName = "all"; // STRING
                                        newEntry.isActive = true; // BOOLEAN
                                        
                                        result.AddRow(newEntry);
                                        var sort = new Object();
                                        sort.name = "FullName";
                                        sort.ascending = true;
                                        result.Sort(sort);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupsForDropdown">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var newEntry = new Object();
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: Operator Screen Frame (KBLocalLevel0FrameCVSMashup + KBOperatorScreenCVSV2Mashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: Operator Screen (KBOperatorScreenRailV2Mashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: Operator Screen, Part Confirmation (KBOperatorScreenRailV2ConfirmPartMashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: Operator Screen, Part Change (KBOperatorScreenRailV2ChangePartMashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: Operator Screen Level 1 (KBOperatorScreenCVSV2Mashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: Condition Monitoring"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: Visualization of Production Deviation"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: ShiftAndOrder Administration"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: Part Traceability"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: Operator Screen Level 1 (KBLocalLevel0FrameRailMashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: Andon Screen (KBLocalAndonCVSMashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: Pareto for Time Losses (KBLocalSmartKPIProductiveTimeLossesFrameMashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: Production Advisor (KBProductionAdvisorCvsMashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: Operator Screen Level 2 for Status (KBOperatorScreenCVSV2Mashup)"; // STRING
                                        newEntry.Tab = "Level2";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "CVS: Operator Screen Level 2 for Messages (KBOperatorScreenCVSV2Mashup)"; // STRING
                                        newEntry.Tab = "Level2";
                                        newEntry.Division = "CVS";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: Operator Screen (KBLocalLevel0FrameRailMashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: Operator Screen Level 2 (KBLocalLevel0FrameRailMashup)"; // STRING
                                        newEntry.Tab = "Level2";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Andon)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Button)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (DataType)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (DuplicateJobOrder)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (EditShift)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (EquipmentType)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (ExpectedDuration)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Grid)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Home)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Invalid Material)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (JobOrder)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Label)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (ManageShifts)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (ManageWorkInstruction)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Menu)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Message)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (OperatioNoteDescription)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Operation)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (OrderAssemblyParts)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (PlantShift)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (ProcessingResource)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (ResourceType)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Setup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (StartTime)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (StationType)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (StatusMessage)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (TOOL)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (TPMTaskDay)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (TPMTaskFrequency)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (TPMTaskType)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: Microelectrica Printer Assignment (KBPrinterSationMashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        //added for microelectrica label printing
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: Microelectrica Label Priniting (KBLabelPrintMashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: Manual Part Data Administration (KBManualPartDataAdministrationMainMashup)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (TargetUnitis)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Text)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (Title)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (TotalProductiveMaintenanceRequest)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (UserSub)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        newEntry = new Object();
                                        newEntry.Name = "Rail: CAPS (WorkstationSchedule)"; // STRING
                                        newEntry.Tab = "Standard";
                                        newEntry.Division = "Rail";
                                        result.AddRow(newEntry);
                                        
                                        var sort = new Object();
                                        sort.name = "Name";
                                        sort.ascending = true;
                                        result.Sort(sort);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokens">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        if (MashupName == "CVS: Pareto for Time Losses (KBLocalSmartKPIProductiveTimeLossesFrameMashup)"){
                                        	result = me.GetMashupTokensKBLocalSmartKPIProductiveTimeLossesFrameMashup();
                                        }
                                        
                                        if (MashupName == "CVS: Production Advisor (KBProductionAdvisorCvsMashup)"){
                                        	result = me.GetMashupTokensKBProductionAdvisorCvsMashup();
                                        }
                                        
                                        if (MashupName == "CVS: Andon Screen (KBLocalAndonCVSMashup)"){
                                        	result = me.GetMashupTokensKBLocalAndonCVSMashup();
                                        }
                                        
                                        if (MashupName == "CVS: Visualization of Production Deviation"){
                                        	result = me.GetMashupTokensKBCVSVisualizationProductionDeviation();
                                        }
                                        
                                        if (MashupName == "CVS: Part Traceability"){
                                        											result = me.GetMashupTokensKBCVSPartTraceability();
                                        										}
                                        										
                                                                               if (MashupName == "CVS: ShiftAndOrder Administration"){
                                                                               	result = me.GetMashupTokensKBOrderAndShiftInfoBoard();
                                                                               }
                                        
                                        if (MashupName == "Rail: Operator Screen Level 1 (KBLocalLevel0FrameRailMashup)"){
                                        	result = me.GetMashupTokensKBLocalLevel0FrameRailMashupL1();
                                        }
                                        
                                        if (MashupName == "CVS: Operator Screen Level 1 (KBOperatorScreenCVSV2Mashup)"){
                                        	result = me.GetMashupTokensKBOperatorScreenCVSV2MashupL1();
                                        }
                                        
                                        if (MashupName == "Rail: Operator Screen Level 2 (KBLocalLevel0FrameRailMashup)"){
                                        	result = me.GetMashupTokensKBLocalLevel0FrameRailMashupL2();
                                        }
                                        if (MashupName == "CVS: Condition Monitoring"){
                                        	result = me.GetMashupTokensKBCMAll();
                                        }
                                        
                                        if (MashupName == "CVS: Operator Screen Level 2 for Status (KBOperatorScreenCVSV2Mashup)"){
                                        	result = me.GetMashupTokensKBOperatorScreenCVSV2MashupL2S();
                                        }
                                        
                                        if (MashupName == "CVS: Operator Screen Level 2 for Messages (KBOperatorScreenCVSV2Mashup)"){
                                        	result = me.GetMashupTokensKBOperatorScreenCVSV2MashupL2M();
                                        }
                                        
                                        if (MashupName == "CVS: Operator Screen Frame (KBLocalLevel0FrameCVSMashup + KBOperatorScreenCVSV2Mashup)"){
                                        	result = me.GetMashupTokensKBLocalLevel0FrameCVSMashup();
                                        }
                                        
                                        if (MashupName == "Rail: Operator Screen, Part Confirmation (KBOperatorScreenRailV2ConfirmPartMashup)") {
                                        	result = me.GetMashupTokensKBOperatorScreenRailV2ConfirmPartMashup();
                                        }
                                        
                                        if (MashupName == "Rail: Operator Screen, Part Change (KBOperatorScreenRailV2ChangePartMashup)"){
                                        	result = me.GetMashupTokensKBOperatorScreenRailV2ChangePartMashup();
                                        }
                                        
                                        if (MashupName == "Rail: Operator Screen (KBOperatorScreenRailV2Mashup)"){
                                        	result = me.GetMashupTokensKBOperatorScreenRailV2Mashup();
                                        }
                                        
                                        if (MashupName == "Rail: Operator Screen (KBLocalLevel0FrameRailMashup)"){
                                        	result = me.GetMashupTokensKBLocalLevel0FrameRailMashup();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Andon)"){
                                        	result = me.GetMashupTokensCAPSAndon();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Button)"){
                                        	result = me.GetMashupTokensCAPSButton();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (DataType)"){
                                        	result = me.GetMashupTokensCAPSDataType();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (DuplicateJobOrder)"){
                                        	result = me.GetMashupTokensCAPSDuplicateJobOrder();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (EditShift)"){
                                        	result = me.GetMashupTokensCAPSEditShift();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (EquipmentType)"){
                                        	result = me.GetMashupTokensCAPSEquipmentType();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (ExpectedDuration)"){
                                        	result = me.GetMashupTokensCAPSExpectedDuration();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Grid)"){
                                        	result = me.GetMashupTokensCAPSGrid();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Home)"){
                                        	result = me.GetMashupTokensCAPSHome();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Invalid Material)"){
                                        	result = me.GetMashupTokensCAPSInvalidMaterial();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (JobOrder)"){
                                        	result = me.GetMashupTokensCAPSJobOrder();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Label)"){
                                        	result = me.GetMashupTokensCAPSLabel();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (ManageShifts)"){
                                        	result = me.GetMashupTokensCAPSManageShifts();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (ManageWorkInstruction)"){
                                        	result = me.GetMashupTokensCAPSManageWorkInstruction();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Menu)"){
                                        	result = me.GetMashupTokensCAPSMenu();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Message)"){
                                        	result = me.GetMashupTokensCAPSMessage();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (OperatioNoteDescription)"){
                                        	result = me.GetMashupTokensCAPSOperatioNoteDescription();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Operation)"){
                                        	result = me.GetMashupTokensCAPSOperation();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (OrderAssemblyParts)"){
                                        	result = me.GetMashupTokensCAPSOrderAssemblyParts();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (PlantShift)"){
                                        	result = me.GetMashupTokensCAPSPlantShift();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (ProcessingResource)"){
                                        	result = me.GetMashupTokensCAPSProcessingResource();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (ResourceType)"){
                                        	result = me.GetMashupTokensCAPSResourceType();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Setup)"){
                                        	result = me.GetMashupTokensCAPSSetup();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (StartTime)"){
                                        	result = me.GetMashupTokensCAPSStartTime();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (StationType)"){
                                        	result = me.GetMashupTokensCAPSStationType();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (StatusMessage)"){
                                        	result = me.GetMashupTokensCAPSStatusMessage();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (TOOL)"){
                                        	result = me.GetMashupTokensCAPSTOOL();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (TPMTaskDay)"){
                                        	result = me.GetMashupTokensCAPSTPMTaskDay();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (TPMTaskFrequency)"){
                                        	result = me.GetMashupTokensCAPSTPMTaskFrequency();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (TPMTaskType)"){
                                        	result = me.GetMashupTokensCAPSTPMTaskType();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (TargetUnitis)"){
                                        	result = me.GetMashupTokensCAPSTargetUnitis();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Text)"){
                                        	result = me.GetMashupTokensCAPSText();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (Title)"){
                                        	result = me.GetMashupTokensCAPSTitle();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (TotalProductiveMaintenanceRequest)"){
                                        	result = me.GetMashupTokensCAPSTotalProductiveMaintenanceRequest();
                                        }
                                        
                                        if (MashupName == "Rail: CAPS (UserSub)"){
                                        	result = me.GetMashupTokensCAPSUserSub();
                                        }
                                        
                                        // Done Changes here for label priniting
                                        if (MashupName == "Rail: Microelectrica Label Priniting (KBLabelPrintMashup)"){
                                        	result = me.GetMashupTokensKBLabelPrintRailMashup();
                                        }
                                        //
                                        
                                        //Done changes hre for Printer Mashup
                                        if (MashupName == "Rail: Microelectrica Printer Assignment (KBPrinterSationMashup)") {
                                        	result = me.GetMashupTokensKBPrinterStationRailMashup();
                                        }
                                        
                                        // Done Changes here for Manual Part Data Administration
                                        if (MashupName == "Rail: Manual Part Data Administration (KBManualPartDataAdministrationMainMashup)"){
                                        	result = me.GetMashupTokensKBManualPartDataAdministrationMainMashup();
                                        }
                                        //
                                        
                                        if (MashupName == "Rail: CAPS (WorkstationSchedule)"){
                                        	result = me.GetMashupTokensCAPSWorkstationSchedule();
                                        }
                                        
                                        var tableLength = result.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = result.rows[x];
                                            //Your code here
                                        	try {
                                        		var params1 = {	name: row.shorttext /* STRING */};
                                        		row.englishText = LocalizationTables["Default"].GetToken(params1);
                                        		row.localText = Language;
                                        		try {
                                        			row.localTranslatedText = LocalizationTables[Language].GetToken(params1);
                                        		} catch(err) {
                                        			row.localTranslatedText = row.englishText;
                                        		}
                                        			
                                        	} catch(err) {
                                        		logger.warn("Error KBAdministratorTranslationUtilityThing : "+err);
                                        	}
                                        }
                                        
                                        
                                        var sort = new Object();
                                        sort.name = "localTranslatedText";
                                        sort.ascending = true;
                                        result.Sort(sort);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSAndon">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Andon.Department.Department01"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Andon.Department.Department02"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Andon.Department.Department03"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Andon.Department.IndustrialEngineering"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Andon.Department.QualityInspection"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.AndonAlertMessage.Body"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.AndonAlertMessage.Subject"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.AndonDepartment.DEPT01"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.AndonDepartment.DEPT02"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.AndonDepartment.DEPT03"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSButton">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Accept"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Add"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Apply"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Cancel"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Close"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Edit"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Load"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.NOK"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.No"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Notify"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.OK"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Release"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Save"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Send"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Verify"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Button.Yes"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSDataType">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.DataType.BOOLEAN"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.DataType.INTEGER"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.DataType.NUMBER"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.DataType.STRING"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSDuplicateJobOrder">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.DuplicateJobOrder"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSEditShift">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.EditShift"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSEquipmentType">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.EquipmentType.Area"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.EquipmentType.Enterprise"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.EquipmentType.Line"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.EquipmentType.Site"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.EquipmentType.Tool"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.EquipmentType.WorkStation"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSExpectedDuration">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ExpectedDuration"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSGrid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Actual"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ActualStartDate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.CalibrationDate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.CalibrationFrequency"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Category"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ClassID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Collected"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Contact"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.DataType"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Department"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Description"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Display"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.DisplaySequence"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Download"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Duration"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.EndTime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ExpiryDate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Frequency"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.IPAddress"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.InAssembly"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.IssueNo"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.JobOrderID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.LastModifiedDate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Log"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.LotNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Manufacturer"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Max"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Min"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ModelNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Name"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Operator"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Part"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.PartDescription"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.PartNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ProcessPlanID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ProcessPlanName"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ProcessPlanVersion"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Property"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Quantity"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ReferenceNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ResourceID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.RevisionNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Sequence"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.SerialNo"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.SerialNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Severity"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ShiftName"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Size"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.SolveDate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.StartDate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.StartTime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Station"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.StationType"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Status"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.SuperiorID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.TargetTimeFormat"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.TargetUnits"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.TaskName"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.TaskType"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.TeamLead"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ThingName"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ThingPropertyID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ThingTemplate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.TimeElapsed"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ToBeReplaced"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.ToolCheck"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Type"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Validate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Version"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.When"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Grid.Workstation"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSHome">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Home.MU.Label.MashupTitle"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSInvalidMaterial">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Invalid Material"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSJobOrder">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.JobOrder.Menu.JobOrder"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.JobOrder.Menu.ManageTPMTask"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.JobOrder.Menu.Name"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.JobOrder.Menu.SelectAssembly"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.JobOrderCompleted"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSLabel">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ALL"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Action"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Active"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Actual"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Address"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.After"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.AlertID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.AssemblyOperator"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.BOM"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.BatchExpiration"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.BatchNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Before"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.CalibrationFrequency"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Category"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Certification"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ChangeTo"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ClassID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Contact"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.CreatedBy"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Current"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.CurrentOperationStep"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.CurrentOperator"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.DataType"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Date"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Day"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Department"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.DepartmentNotAvailable"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Description"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Display"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.DisplaySequence"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Documents"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Download"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.EmailSMSGateway"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.EndDate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.EndTime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.EndTimeFormat"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.EnterPartNo"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.EnterRevisionNo"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.EnterSerialNo"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.EscalationContact"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.EscalationTimes"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Expert"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ExpiryDate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.FixingComplete"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Frequency"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Hour"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.IPAddress"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.IncludeCompletedJob"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.IncludeSolvedAlert"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.InvalidLabel"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.IssueLetter"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Item"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ItemsToReplace"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.JobNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Line"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Log"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.LotNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ManageShift"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Manufacturer"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Max"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Member"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Message"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Min"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Minute"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Minutes"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ModelNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ModificationState"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Name"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.NewSerialNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Note"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Novice"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Operation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.OperationFile"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.OperationID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.OperationName"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.OrderNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.PartNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Password"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.PlantManager"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Problem"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ProcessPlan"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ProcessPlanID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Project"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Property"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.QNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Qualification"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ReferenceNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.RequiredQuantity"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Resource"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ResourceClass"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ResourceClassProperty"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ResourceProperty"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ResourceType"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.RespondedBy"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Result"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.SelectedPart"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.SelectedSerialNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Sequence"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.SerialNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ServiceTime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Severity"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Simulate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.SolveDate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.StartDate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.StartTime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.StartTimeFormat"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.StationType"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Status"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Stoppage"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.SuperiorID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.TargetTime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.TargetTimeFormat"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.TargetUnits"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.TaskName"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.TaskType"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.TeamLead"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.TestSimulation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ThingName"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ThingPropertyID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.TimeElapsed"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ToolCalibrationCheck"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.ToolName"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Type"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.UID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.UnitsSelected"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.UserID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Validate"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Value"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.VerifiedOperator"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Version"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Visualization"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Label.Workstation"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSManageShifts">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ManageShifts"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSManageWorkInstruction">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ManageWorkInstruction.MU.RetryLocked"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ManageWorkInstruction.MU.SequenceComplete"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSMenu">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Menu.Home"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Menu.Name"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSMessage">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.AcknowledgeAndonAlert.NotDepartmentMember"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.AcknowledgeAndonAlert.Success"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.AddItemToOrder.LookupDescription"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.AddItemToOrder.MissingField"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.CreateOrder.ErrorCreateProcessPlan"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.CreateOrder.InvalidMaterial"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.CreateOrder.InvalidProcessPlan"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.CreateOrder.JobExists"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.CreateOrder.Success"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.DimensionalInspection.MissingMeasurement"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.DimensionalInspection.OutOfLimitMeasurement"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.EditResourceClass.MissingField"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.EditShift.MissingField"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.EditShift.NoWorkstation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.EditTPMTask.MissingField"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.EditTPMTask.NoWorkstation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.MClassQualityInspection.TooManyFiles"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageJobOrder.CannotLoadProcessPlan"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageJobOrder.CreateJobError"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageJobOrder.CreateMaterial"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageJobOrder.ModifySerialNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageJobOrder.UpdateJob"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageJobTicket.CreateJobError"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageResourceClass.ResourceClassIsUsed"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageResourceClass.Status"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.BadAngleStatus"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.BadAngleValue"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.BadEncoderPosition"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.BadResultsRecieved"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.BadResultsStatus"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.BadTorqueStatus"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.BadTorqueValue"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.CalibrationFailed"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.ConnectionLoss"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.ConnectionReconnect"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.CorrectEncoderPosition"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.CorrectProgramNumberSelected"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.CorrectToolboxPosition"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.DimensionCheckBad"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.DimensionCheckGood"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.DimensionCheckStart"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.GoodAngleValue"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.GoodResultsRecieved"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.GoodResultsStatus"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.GoodTorqueValue"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.IncorrectProgramNumberSelected"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.IncorrectTool"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.IncorrectToolboxPosition"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.IncorrectXEncoderPosition"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.IncorrectYEncoderPosition"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.JobOrderCompleted"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.LabelPrinting"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.LoctiteReset"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.LoctiteStart"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.LoctiteStep1"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.LoctiteStep2"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.LoctiteStep3"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.PrintFailed"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.PrintSuccessful"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.ProgramNumberSelected"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.RetryLocked"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.ToolNotRequested"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.ToolRequested"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.UnexpectedRepeatableType"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ManageWorkInstruction.UserCCNotFound"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartCollection.GenericPartNotCreated"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartCollection.GenericPartNotFound"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartCollection.InvalidMas"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartCollection.InvalidPartNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartCollection.NoBOM"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartCollection.PartNotFound"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartCollection.PartNumbersInvalid"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartCollection.UnexpecetdParts"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartCollection.UnexpectedInputType"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartConfirmation.BOMValidationFailed"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartConfirmation.InvalidMask"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartReplacement.QuantityReplace"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartValidation.AssemblyConsumed"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartValidation.AssemblyNotFinished"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartValidation.AssemblyNotFound"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartValidation.InvalidAssembly"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.PartValidation.UnexpectedAssembly"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.QualityInspection.InvalidFile"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.QualityInspection.InvalidOperationUID"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.QualityInspection.OperationNotFound"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ReleaseJob.Error"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ReleaseJob.Success"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.CannotLoadProcessPlan"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.CannotRework"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.CreateMaterialError"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.InvalidCertification"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.InvalidModState"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.JobNotComplete"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.JobNotFound"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.JobNotReleased"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.JobUnknownDispatch"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.NoWorkstation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.PrevOpNotComplete"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.TPMPending"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.SelectAssembly.UserNotCertified"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.StatusMessage.InvalidCertification"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.StatusMessage.InvalidModState"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.TestResultOverride.OK"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ToolResultOverride.NOK"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ToolResultOverride.OK"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.TotalProductiveMaintenanceRequest.Status"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ValidateUser.Error"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ValidateUser.InvalidUser"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Message.ValidateUser.SameUser"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSOperation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Operation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.OperationDescription"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSOperatioNoteDescription">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.OperatioNoteDescription"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSOrderAssemblyParts">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.OrderAssemblyParts.MU.Button.Accept"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.OrderAssemblyParts.MU.Label.NumberOfItemsToReplace"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.OrderAssemblyParts.MU.Label.OrderAssemblyParts"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSPlantShift">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.PlantShift.Shift1"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.PlantShift.Shift2"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.PlantShift.Shift3"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.PlantShift.Shift4"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSProcessingResource">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ProcessingResource.Area"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ProcessingResource.Enterprise"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ProcessingResource.Line"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ProcessingResource.Site"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ProcessingResource.Tool"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ProcessingResource.WorkStation"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSResourceType">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ResourceType.Area"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ResourceType.Enterprise"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ResourceType.Line"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ResourceType.Site"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ResourceType.Tool"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.ResourceType.WorkStation"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSSetup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Setup.Menu.ManageResource"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Setup.Menu.ManageResourceClass"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Setup.Menu.Name"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSStartTime">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.StartTime"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSStationType">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.StationType.PRODUCTION"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.StationType.REWORK"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.StationType.TEST"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.StationType.VIRTUAL"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSStatusMessage">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.StatusMessage.MU.StatusMessage.InvalidCertification"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.StatusMessage.MU.StatusMessage.InvalidModState"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSTargetUnitis">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TargetUnitis"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSText">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Text.AudioControl"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Text.Message"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Text.OperationFile"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSTitle">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.AcknowledgeAndonAlert"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.AddItemToOrder"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.AddToAction"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.AddToIssue"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.BatchEnd"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.BatchPreparation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.BatchSelection"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.CollectPart"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.CollectPartExpiry"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ConfirmOverride"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ConfirmPart"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.CreateAndonAlert"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.CreateOrder"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.DimensionalInspection"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditAndonAlert"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditCategory"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditDepartment"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditDepartmentLine"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditDepartmentMember"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditDepartmentServiceTime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditResource"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditResourceClass"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditResourceClassProperty"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditShift"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.EditTPMTask"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.Home"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageAndonAlert"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageAndonCategory"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageAndonDepartment"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageAndonEscalation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageJobOrder"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageOperationFile"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageResource"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageResourceClass"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageShift"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageTPMTask"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageWorkinstruction"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ManageWorkstation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ModifySerialNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.OperationNote"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.PartValidation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.QualityInspectionAudio"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.QualityInspectionImage"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.QualityInspectionReviewAudio"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.QualityInspectionReviewImage"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.QualityInspectionReviewVideo"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.QualityInspectionVideo"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.RecordIssueLetter"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ReleaseJobOrder"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ReplacePart"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.SelectAssembly"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.TotalProductiveMaintenanceRequest"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ValidatePart"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.ValidateUser"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.VisualInspection"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.Title.WorkInstruction"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSTOOL">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TOOL.ToolClass"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSTotalProductiveMaintenanceRequest">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TotalProductiveMaintenanceRequest.MU.ValidationMessage.Status"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSTPMTaskDay">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskDay.Friday"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskDay.Monday"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskDay.Saturday"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskDay.Sunday"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskDay.Thursday"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskDay.Tuesday"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskDay.Wednesday"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSTPMTaskFrequency">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskFrequency.Daily"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskFrequency.Monthly"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskFrequency.ShiftEnd"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskFrequency.ShiftStart"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskFrequency.Weekly"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSTPMTaskType">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskType.5S"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskType.Calibration"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskType.Engineering"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskType.Maintenance"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.TPMTaskType.Service"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSUserSub">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.UserSub.Menu.LogOut"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.UserSubMenu.Menu.DisplayName"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensCAPSWorkstationSchedule">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.WorkstationSchedule.Regular"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.WorkstationShift.Shift1"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.WorkstationShift.Shift2"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.WorkstationShift.Shift3"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "CAL.DWI.WorkstationShift.Shift4"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBCMAll">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        logger.debug("GetMashupTokensKBCMAll: Start" );
                                        var InfotableLocalizationTokens = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        	searchExpression: "KBCM%"
                                        });
                                        
                                        if (InfotableLocalizationTokens.rows.length>= 1) {
                                            var params = {
                                            	infoTableName : "InfoTable",
                                            	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                            };
                                            
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        	for (i=0;i<InfotableLocalizationTokens.rows.length;i++){
                                        
                                          	  	newEntry = new Object(); newEntry.shorttext = InfotableLocalizationTokens.rows[i].name; result.AddRow(newEntry);
                                            }
                                            
                                        }else{
                                            logger.error("GetMashupTokensKBCMAll: No KBCM% tokens" );
                                        }
                                        logger.debug("GetMashupTokensKBCMAll: End" );
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBCVSPartTraceability">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        logger.debug("GetMashupTokensKBCVSPartTraceability: Start" );
                                        var InfotableLocalizationTokens = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        	searchExpression: "KBPartTraceability%"
                                        });
                                        
                                        if (InfotableLocalizationTokens.rows.length>= 1) {
                                            var params = {
                                            	infoTableName : "InfoTable",
                                            	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                            };
                                            
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        	for (i=0;i<InfotableLocalizationTokens.rows.length;i++){
                                        
                                          	  	newEntry = new Object(); newEntry.shorttext = InfotableLocalizationTokens.rows[i].name; result.AddRow(newEntry);
                                            }
                                            
                                        }else{
                                            logger.error("GetMashupTokensKBCVSPartTraceability: No KBPartTraceability% tokens" );
                                        }
                                        
                                        var InfotableLocalizationTokens2 = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        	searchExpression: "KBDLPAdministrationMashup%"
                                        });
                                        
                                        if (InfotableLocalizationTokens2.rows.length>= 1) {
                                            var params = {
                                            	infoTableName : "InfoTable",
                                            	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                            };
                                            
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        	for (i=0;i<InfotableLocalizationTokens2.rows.length;i++){
                                        
                                          	  	newEntry = new Object(); newEntry.shorttext = InfotableLocalizationTokens2.rows[i].name; result.AddRow(newEntry);
                                            }
                                            
                                        }else{
                                            logger.error("GetMashupTokensKBCVSPartTraceability: No KBPartTraceability% tokens" );
                                        }
                                        logger.debug("GetMashupTokensKBCVSPartTraceability: End" );
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBCVSVisualizationProductionDeviation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        logger.debug("GetMashupTokensKBCVSVisualizationProductionDeviation: Start" );
                                        var InfotableLocalizationTokens = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        	searchExpression: "KBCVSVisualizationProductionDeviation%"
                                        });
                                        
                                        if (InfotableLocalizationTokens.rows.length>= 1) {
                                            var params = {
                                            	infoTableName : "InfoTable",
                                            	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                            };
                                            
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        	for (i=0;i<InfotableLocalizationTokens.rows.length;i++){
                                        
                                          	  	newEntry = new Object(); newEntry.shorttext = InfotableLocalizationTokens.rows[i].name; result.AddRow(newEntry);
                                            }
                                            
                                        }else{
                                            logger.error("GetMashupTokensKBCVSVisualizationProductionDeviation: No KBCVSVisualizationProductionDeviation% tokens" );
                                        }
                                        logger.debug("GetMashupTokensKBCVSVisualizationProductionDeviation: End" );
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBLabelPrintRailMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.orderNumber"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.search"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.reset"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.microelectricaLabelPriniting"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.chooseLine"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.setup"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.showalreadyprintedserialnumbers"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.batchprintsetalllabelsasdefault"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.labelsToPrint"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.printGS1ProductLabel"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.printGS1PackagingLabel"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.printProtocol"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.printANSIProductLabel"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.serialNumber"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.numberofLabelstoprint"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBLabelPrintMashup.printLabel"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBLocalAndonCVSMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        logger.debug("GetMashupTokensKBLocalAndonCVSMashup: Start" );
                                        var InfotableLocalizationTokens1 = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        	searchExpression: "KBLocalAndonCVSMashup.%"
                                        });
                                        var InfotableLocalizationTokens2 = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        	searchExpression: "KBSAPPMInputDataMashup.%"
                                        });
                                        var InfotableLocalizationTokens3 = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        	searchExpression: "KBLocalStationOrderAssignementMashup.%"
                                        });
                                        
                                        var params = {
                                                                               		t1: InfotableLocalizationTokens1, // INFOTABLE
                                        	t2: InfotableLocalizationTokens2 // INFOTABLE
                                                                               };
                                        
                                                                               var InfotableLocalizationTokens = Resources["InfoTableFunctions"].Union(params);
                                        
                                                                               var params2 = {
                                                                               	t1: InfotableLocalizationTokens, // INFOTABLE
                                                                               	t2: InfotableLocalizationTokens3 // INFOTABLE
                                                                               };
                                        
                                        InfotableLocalizationTokens = Resources["InfoTableFunctions"].Union(params2);
                                        
                                        
                                                                               if (InfotableLocalizationTokens.rows.length>= 1) {
                                           var params3 = {
                                           	infoTableName : "InfoTable",
                                           	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                           };
                                            
                                           // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                           var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params3);
                                                                               	for (i=0;i<InfotableLocalizationTokens.rows.length;i++){
                                        
                                         	  	newEntry = new Object(); newEntry.shorttext = InfotableLocalizationTokens.rows[i].name; result.AddRow(newEntry);
                                           }
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.CVS.TargetNow"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.CVS.TargetShift"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBDailyManagementSystemType1ShiftMashup.LineStatus"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBDailyManagementSystemType1ShiftMashup.Shift"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBDailyManagementSystemType1ShiftMashup.Order"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBDailyManagementSystemType1ShiftMashup.APOOrder"; result.AddRow(newEntry);
                                        }else{
                                            logger.error("GetMashupTokensKBLocalAndonCVSMashup: No KBLocalAndonCVSMashup.% tokens" );
                                        }
                                        logger.debug("GetMashupTokensKBLocalAndonCVSMashup: End" );
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBLocalLevel0FrameCVSMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var InfotableLocalizationTokens1 = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        	searchExpression: "KBLocalLevel0FrameCVSMashup.%"
                                        });
                                        var InfotableLocalizationTokens2 = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        	searchExpression: "KBOperatorScreenCVSV2Mashup.%"
                                        });
                                        var params = {
                                        	t1: InfotableLocalizationTokens1, // INFOTABLE
                                        	t2: InfotableLocalizationTokens2 // INFOTABLE
                                        };
                                        
                                        var InfotableLocalizationTokens = Resources["InfoTableFunctions"].Union(params);
                                        
                                        if (InfotableLocalizationTokens.rows.length>= 1) {
                                            var params = {
                                            	infoTableName : "InfoTable",
                                            	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                            };
                                        	for (i=0;i<InfotableLocalizationTokens.rows.length;i++){
                                          	  	newEntry = new Object(); newEntry.shorttext = InfotableLocalizationTokens.rows[i].name; result.AddRow(newEntry);
                                            }
                                        }
                                            
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.TitleRateOfQuality"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.PerformanceEfficency"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.EquipementAvailability"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.CVS.ChangeMachineStatus"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.CVS.InputMachineSlowdown"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.CVS.History"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.CVS.StopPopup"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.CVS.StopPopupMessage"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.CVS.Change"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.Pr"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.PI"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.ND"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.RQ"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.ND.AutoSet"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.2.ND.AutoSet.Start"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.2.ND.AutoSet.unspecifiedmachineerror"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBLocalLevel0FrameRailMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.MachineStatus"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Downtime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.QualityLosses"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.SpeedLosses"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.LongIdleTime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.OEEPlan"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.TargetNow"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.TargetShift"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.OrderOKParts"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.OrderNOKParts"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.ChangeCurrentOrder"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.AddProducedParts"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.Actual"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.RQ"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.ChangePartOrderNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.OrderNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.PartNumber"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.OKParts"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.NOKParts"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.SetTargets"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.TargetForCurrentShift"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.NoStation"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.NoTime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.Title.Rail.OEE"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBLocalLevel0FrameRailMashupL1">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.Productive"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.NA"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.AutoSet"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.OperatorAbsence"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.Changeover"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.ToolChange"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.UnplannedRepair"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.Tests"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.QualityCheck"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.MissingMaterial"; result.AddRow(newEntry);
                                            
                                            //newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.QL.Scrap"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.QL.Rework"; result.AddRow(newEntry);
                                            //newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.SL.SmallStops"; result.AddRow(newEntry);
                                            //newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.SL.ReducedCNCSpeed"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBLocalLevel0FrameRailMashupL2">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.Productive"; newEntry.statusType="P"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.NA"; newEntry.statusType="NA"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.AutoSet"; newEntry.statusType="OI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.OperatorAbsence"; newEntry.statusType="DT"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.Changeover"; newEntry.statusType="DT"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.ToolChange"; newEntry.statusType="DT"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.UnplannedRepair"; newEntry.statusType="DT"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.Tests"; newEntry.statusType="DT"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.QualityCheck"; newEntry.statusType="DT"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.DT.MissingMaterial"; newEntry.statusType="DT"; result.AddRow(newEntry);
                                            
                                            //newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.QL.Scrap"; newEntry.statusType="QL"; result.AddRow(newEntry);
                                            //newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.QL.Rework"; newEntry.statusType="QL"; result.AddRow(newEntry);
                                            //newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.SL.SmallStops"; newEntry.statusType="SL"; result.AddRow(newEntry);
                                            //newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.SL.ReducedCNCSpeed"; newEntry.statusType="SL"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBLocalSmartKPIProductiveTimeLossesFrameMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.OEE"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Utilization"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.RQ"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.OKParts"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.NOKParts"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.ParetoForTimeLosses"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Status"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Name"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Minutes"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Percent"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.CycleTime"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Parts"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Name1"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Name2"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Occurrences"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Excel"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.CurrentShift"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.LastShift"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Today"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Yesterday"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.hideProductiveState"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.useSubStatus"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.APOPlan"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.TheoreticalActualTime"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.TimeLosses"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.NoShiftData"; result.AddRow(newEntry);
                                            
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Unplanned"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Unknown"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Changeover"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.TheoreticalTime"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Quality"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.PlannedBreak"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.PlannedWorkingTime"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.PlannedDowntimeM"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.PlannedDowntimeP"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.UnplannedDowntimeD"; result.AddRow(newEntry);
                                        	
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.Pr"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.PI"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.ND"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.RQ"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.ND.AutoSet"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.2.ND.AutoSet.Start"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.2.ND.AutoSet.unspecifiedmachineerror"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "LocalSmartKPIPartLossesMashup.NOK-Reasons"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "LocalSmartKPIPartLossesMashup.Retest-Reasons"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "LocalSmartKPIPartLossesMashup.PercentageCummulated"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "LocalSmartKPIPartLossesMashup.Ocurances"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "LocalSmartKPIPartLossesMashup.Top10"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "LocalSmartKPIPartLossesMashup.ShowRetestRework"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "LocalSmartKPIPartLossesMashup.NOKMessageKPI"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "LocalSmartKPIPartLossesMashup.NOK-Reasons-Messages"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "LocalSmartKPIPartLossesMashup.Rework-Reasons"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPIMachinePartLossesFrameMashup.Station"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPIMachinePartLossesFrameMashup.Machine"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.OpeningTime"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.SumAllLosses"; result.AddRow(newEntry);										
                                        											newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPITimeLossesMashup.Level"; result.AddRow(newEntry);										
                                        											
                                        											newEntry = new Object(); newEntry.shorttext = "KBDetailedNOKReasonsMashup.Count"; result.AddRow(newEntry);
                                        											newEntry = new Object(); newEntry.shorttext = "KBDetailedNOKReasonsMashup.CumulativePercent"; result.AddRow(newEntry);
                                        											newEntry = new Object(); newEntry.shorttext = "KBDetailedNOKReasonsMashup.LineOnly"; result.AddRow(newEntry);
                                        											newEntry = new Object(); newEntry.shorttext = "KBDetailedNOKReasonsMashup.Percent"; result.AddRow(newEntry);
                                        											newEntry = new Object(); newEntry.shorttext = "KBDetailedNOKReasonsMashup.Property"; result.AddRow(newEntry);
                                        											newEntry = new Object(); newEntry.shorttext = "KBDetailedNOKReasonsMashup.Title"; result.AddRow(newEntry);
                                        											newEntry = new Object(); newEntry.shorttext = "KBDetailedNOKReasonsMashup.Top10"; result.AddRow(newEntry);
                                        											newEntry = new Object(); newEntry.shorttext = "KBLocalSmartKPIMachinePartLossesMashup.NOKDetails"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBManualPartDataAdministrationMainMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.enterPartNumberToSearch"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.partNumber"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.addNewPartNumber"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.enterNewPartNumber"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.createNewPart"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.deleteExistingPartNumber"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.confirmToDeleteSelectedPartNumber"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.confirmAction"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.yes"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.no"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.editSelectedPartNumber"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.editValues"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.propertyKey"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.textValue"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.description"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.auxVoltage"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.customerSpecification"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.dimensionDrawingNumber"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.nominalVoltage"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.nameOrDescriptionOfThePart"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.thermalCurrent"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.automatedAnsi"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.protocolPrinting"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.alreadyExistDoYouWantToRewrite?"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.updateThingWorxDB"; result.AddRow(newEntry);
										newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.lastUpdated"; result.AddRow(newEntry);
										newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.popupMessage"; result.AddRow(newEntry);
										newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.cancel"; result.AddRow(newEntry);
                                        newEntry = new Object(); newEntry.shorttext = "KBManualPartDataAdministrationMainMashup.save"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBOperatorScreenCVSV2MashupL1">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.Productive"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.NA"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschMessage.Button.NokPart"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschMessage.Button.Retest"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschMessage.Button.Rework"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschMessage.Button.ProcessEfficiency"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.RegularChangeover"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.5Sactivities"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.FirstTimeSetup"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.OthersEA"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.MissingConsumables"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.MachineBreakdown"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.Break"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.PI.Meeting"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.PI.Training"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.SpecificProcessMenu"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.OthersPE"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.QualityRelease"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.MissingMaterial"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBOperatorScreenCVSV2MashupL2M">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschMessage.Button.NokPart"; newEntry.statusType="TimeLoss"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschMessage.Button.Retest"; newEntry.statusType="TimeLoss"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschMessage.Button.Rework"; newEntry.statusType="TimeLoss"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschMessage.Button.ProcessEfficiency"; newEntry.statusType="TimeLoss"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBOperatorScreenCVSV2MashupL2S">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.Productive"; newEntry.statusType="P"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.NA"; newEntry.statusType="NA"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.RegularChangeover"; newEntry.statusType="TI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.5Sactivities"; newEntry.statusType="TI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.FirstTimeSetup"; newEntry.statusType="TI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.OthersEA"; newEntry.statusType="TI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.MissingConsumables"; newEntry.statusType="TI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.TI.MachineBreakdown"; newEntry.statusType="TI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.Break"; newEntry.statusType="PI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.PI.Meeting"; newEntry.statusType="PI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.PI.Training"; newEntry.statusType="PI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.SpecificProcessMenu"; newEntry.statusType="OI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.OthersPE"; newEntry.statusType="OI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.QualityRelease"; newEntry.statusType="OI"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBMaschStatus.1.OI.MissingMaterial"; newEntry.statusType="OI"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBOperatorScreenRailV2ChangePartMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ChangePartMashup.ConfirmationNumber"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ChangePartMashup.PartNumber"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ChangePartMashup.OperationNumber"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ChangePartMashup.ChangeParts"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBOperatorScreenRailV2ConfirmPartMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ConfirmPartMashup.ConfirmationNumber"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ConfirmPartMashup.PartNumber"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ConfirmPartMashup.OperationNumber"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ConfirmPartMashup.OKParts"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ConfirmPartMashup.EmptyFixture"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ConfirmPartMashup.NOKParts"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2ConfirmPartMashup.ConfirmParts"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBOperatorScreenRailV2Mashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName : "InfoTable",
                                        	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.UnplannedRepairBreakdown"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.TestsTechnology"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.OperatorAbsence"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.Changeover"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.Miscellaneous"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.CurrentTime"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.StartShift"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.EndShift"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.CollisionButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.MachineErrorButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ToolBreakButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.UnplannedMaintenanceButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ProblemTechnologyButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.NewTechnologyButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.FixtureTestButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ToolTestButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.NoStaffButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.MultiMachineServiceButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.TeamMeetingButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.BreakButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.TrainingButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.3DMeasurementButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ChangeoverButtonRight"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.NoMaterialButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ToolChangeWearButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.SinglePalletHandlingButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.NoOrderButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.CleaningButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.SerialProductionButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ChangeoverButtonLeft"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ReworkButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ConfirmPartsButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ChangePartButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.PlannedMaintenanceButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.TestTechnologyButton"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.UnknownButton"; result.AddRow(newEntry);
                                         
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.LiveOee"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.OeeTarget"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.RateOfQuality"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.Production"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.Ok"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.Nok"; result.AddRow(newEntry);
                                            
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.CurrentOperation"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.CycleTime"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ReferenceTime"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.PartNumber"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.Operation"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.NcProgram"; result.AddRow(newEntry);
                                            
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ProducedParts"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ProducedPartsPartNo"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ProducedPartsRunningPartNo"; result.AddRow(newEntry);
                                        	newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ProducedPartsExecutedPartNo"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ProducedPartsOp"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ProducedPartsOk"; result.AddRow(newEntry);
                                            newEntry = new Object(); newEntry.shorttext = "KBOperatorScreenRailV2Mashup.ProducedPartsNok"; result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBOrderAndShiftInfoBoard">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        	logger.debug("GetMashupTokensKBOrderAndShiftInfoBoard: Start");
                                        	var InfotableLocalizationTokens = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        		searchExpression: "OrderShiftInfoBoard.%"
                                        	});
                                        	if (InfotableLocalizationTokens.rows.length >= 1) {
                                        		var params = {
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "KBAdministratorTranslationMashupTokensDataShape"
                                        		};
                                        
                                        		// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        		var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        		for (i = 0; i < InfotableLocalizationTokens.rows.length; i++) {
                                        
                                        			newEntry = new Object();
                                        			newEntry.shorttext = InfotableLocalizationTokens.rows[i].name;
                                        			result.AddRow(newEntry);
                                        		}
                                        
                                        	} else {
                                        		logger.error("GetMashupTokensKBOrderAndShiftInfoBoard: No OrderAndShiftInfoBoard.% tokens");
                                        	}
                                        	logger.debug("GetMashupTokensKBOrderAndShiftInfoBoard: End");
                                        } catch (err) {
                                        	logger.error("Error on service GetMashupTokensKBOrderAndShiftInfoBoard: " + err + " on thing:" + me.name + " at:" + err.lineNumber);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBPrinterStationRailMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "KBAdministratorTranslationMashupTokensDataShape"
                                        };
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.workstations";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.workstation";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.printers";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.printer";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.ipAddress";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.labelPrinter";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.printerConfiguration";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.labelPrinting";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.labelPrintingYesNo";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.labelPrinterIPAddress";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.packagingPrinter";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.packagingPrinting";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.packagingPrintingYesNo";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.packagingPrinterIPAddress";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.createPrinter";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.PrinterAssignmentSetIPAddress";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.deletePrinter";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.printerNotes";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.printerNotesForLabelPrinter";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.printerNotesForPackagingPrinter";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.note:";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.areTheStationsFromWhichSelectedPrinterWillGetDeleted";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.deleteConfirmation";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.areYouSure,YouWantToDelete?";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.yes";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.no";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.setPrinter";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.printerTypes";
                                        result.AddRow(newEntry);
                                        newEntry = new Object();
                                        newEntry.shorttext = "KBPrinterSationMashup.typesOfPrinters";
                                        result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMashupTokensKBProductionAdvisorCvsMashup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try{
                                            var InfotableLocalizationTokens = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                            	searchExpression: "KBProductionAdvisorCvsMashup%"
                                            });
                                            
                                            if (InfotableLocalizationTokens.rows.length>= 1) {
                                                var params = {
                                                	infoTableName : "InfoTable",
                                                	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                                };
                                                
                                                // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                                var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                            	for (i=0;i<InfotableLocalizationTokens.rows.length;i++){
                                            
                                              	  	newEntry = new Object(); newEntry.shorttext = InfotableLocalizationTokens.rows[i].name; result.AddRow(newEntry);
                                                }
                                                newEntry = new Object(); newEntry.shorttext = "KBProductionAdvisorCvsSingleMachineFooterMashup.SummaryLabel"; result.AddRow(newEntry);
                                                
                                                var sort = new Object();
                                                sort.name = 'name';
                                                sort.ascending = true;
                                                result.Sort(sort);
                                                
                                            }else{
                                                logger.error("GetMashupTokensKBProductionAdvisorCvsMashup: No KBProductionAdvisorCvsMashup% tokens" );
                                            }
                                        											var InfotableLocalizationTokens2 = Resources["RuntimeLocalizationFunctions"].SearchDefaultLocalizationTokens({
                                        	searchExpression: "KBAssetAdvisorCvsMashup%"
                                        });
                                        
                                        if (InfotableLocalizationTokens2.rows.length>= 1) {
                                            var params = {
                                            	infoTableName : "InfoTable",
                                            	dataShapeName : "KBAdministratorTranslationMashupTokensDataShape"
                                            };
                                            
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBAdministratorTranslationMashupTokensDataShape)
                                            var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        	for (i=0;i<InfotableLocalizationTokens2.rows.length;i++){
                                        
                                          	  	newEntry = new Object(); newEntry.shorttext = InfotableLocalizationTokens2.rows[i].name; result.AddRow(newEntry);
                                            }
                                            
                                        }else{
                                            logger.error("GetMashupTokensKBProductionAdvisorCvsMashup: No KBAssetAdvisorCvsMashup% tokens" );
                                        }
                                        logger.debug("GetMashupTokensKBProductionAdvisorCvsMashup: End" );
                                        											
                                        } catch(err) {
                                        		logger.error(me.name + " on GetMashupTokensKBProductionAdvisorCvsMashup() Error on line " + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPlantsForTranslation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	maxItems: undefined /* NUMBER */,
                                        	nameMask: undefined /* STRING */,
                                        	query: undefined /* QUERY */,
                                        	thingTemplate: "KBLocalPlantThingTemplate" /* THINGTEMPLATENAME */,
                                        	tags: undefined /* TAGS */
                                        };
                                        
                                        // result: INFOTABLE dataShape: RootEntityList
                                        var things = Resources["SearchFunctions"].SearchThingsByTemplate(params);
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBMachineAdminDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBMachineAdminDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        var tableLength = things.rows.length;
                                        for (var x=0; x < tableLength; x++) {
                                            var row = things.rows[x];
                                            //Your code here
                                            // KBMachineAdminDataShape entry object
                                            var newEntry = new Object();
                                            newEntry.ShiftFactor = undefined; // NUMBER
                                            newEntry.MachineThingName = row.name; // STRING
                                            newEntry.MainStationForStatus = undefined; // STRING
                                            newEntry.FullName = Things[row.name].FullName; // STRING
                                            newEntry.DisplayName = Things[row.name].DisplayName + " ("+newEntry.MachineThingName+")"; // STRING
                                            newEntry.isActive = Things[row.name].isActive; // BOOLEAN
                                            
                                            if (newEntry.DisplayName == "") {
                                            	newEntry.DisplayName = newEntry.MachineThingName;
                                            }
                                            
                                            if (newEntry.isActive) {
                                                result.AddRow(newEntry);
                                        
                                            }
                                        
                                        
                                        }
                                        
                                        var sort = new Object();
                                        sort.name = "DisplayName";
                                        sort.ascending = true;
                                        result.Sort(sort);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetStationsForTranslation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBMachineAdminDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBMachineAdminDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        if (MachineThingName == "all") {
                                            var newEntry = new Object();
                                            newEntry.ShiftFactor = undefined; // NUMBER
                                            newEntry.MachineThingName = "all"; // STRING
                                            newEntry.MainStationForStatus = undefined; // STRING
                                            newEntry.FullName = "all"; // STRING
                                            newEntry.DisplayName = "all"; // STRING
                                            newEntry.isActive = true; // BOOLEAN
                                        
                                            result.AddRow(newEntry);
                                        } else {
                                            
                                            var params = {
                                            	maxItems: undefined /* NUMBER */,
                                            	nameMask: undefined /* STRING */,
                                            	thingTemplate: "KBLocalStationThingTemplate" /* THINGTEMPLATENAME */
                                            };
                                            
                                            // result: INFOTABLE dataShape: SpotlightSearchWithPersistent
                                            var things = Resources["SearchFunctions"].SearchThingsByTemplateWithPersistent(params);
                                            
                                        
                                        	var params = {
                                        	    infoTableName : "InfoTable",
                                        	    dataShapeName : "KBMachineAdminDataShape"
                                        	};
                                        	
                                        	
                                        	var tableLength = things.rows.length;
                                        	for (var x=0; x < tableLength; x++) {
                                        	    var row = things.rows[x];
                                        	    //Your code here
                                        	    // KBMachineAdminDataShape entry object
                                        	    var newEntry = new Object();
                                        	    newEntry.ShiftFactor = undefined; // NUMBER
                                        	    newEntry.MachineThingName = row.name; // STRING
                                        	    newEntry.MainStationForStatus = undefined; // STRING
                                        	    newEntry.FullName = Things[row.name].FullName; // STRING
                                        	    newEntry.DisplayName = Things[row.name].DisplayName + " ("+newEntry.MachineThingName+")"; // STRING
                                        	    newEntry.isActive = Things[row.name].isActive; // BOOLEAN
                                        	
                                        	    if (newEntry.DisplayName == "") {
                                        	    	newEntry.DisplayName = newEntry.MachineThingName;
                                        	    }
                                        	    
                                        	    if (newEntry.isActive && Things[row.name].KBLocalLineThing == MachineThingName) {
                                        	        result.AddRow(newEntry);
                                        	    }
                                        	
                                        	
                                        	}
                                        
                                        	var sort = new Object();
                                        	sort.name = "DisplayName";
                                        	sort.ascending = true;
                                        	result.Sort(sort);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetTokenValue">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                        	name: Token /* STRING */
                                        };
                                        
                                        // result: STRING
                                        var result = "";
                                        try {
                                        	result = LocalizationTables[Language].GetToken(params);
                                        } catch(err) {
                                        	result = Token;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="InstallTileConsole">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description="Script"
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var values = Things["KB.LocalAdministration.TileConsole.DataTable"].CreateValues();
                                        
                                        values.Context = "PTC:factory-mv;PTC:FactoryAdministration"; //TAGS
                                        values.TileBackground = "PTC.DarkBlue"; //STRING
                                        values.InAppSwitcher = false; //BOOLEAN
                                        values.TileIcon = "KB.AdministrationLevel2.Icon"; //STRING
                                        values.LocalizedLabel = "Mashup Translation"; //TEXT
                                        values.InConvergeConsole = false; //BOOLEAN
                                        values.TileMashupOrURL = "KBAdministratorTranslationFrameMashup"; //STRING
                                        values.TileTooltip = ""; //
                                        values.TileLabel = "Mashup Translation";
                                        values.TileOrder = 200; //INTEGER [Primary Key]
                                        values.IsMashup = true; //BOOLEAN
                                        values.OpenInNewWindow = false;
                                        values.key = 200; //STRING
                                        
                                        var params = {
                                            sourceType: undefined /* STRING */,
                                            values: values /* INFOTABLE*/,
                                            location: undefined /* LOCATION */,
                                            source: undefined /* STRING */,
                                            tags: undefined /* TAGS */
                                        };
                                        
                                        //	logger.warn("before " + Things["KB.LocalAdministration.TileConsole.DataTable"].GetDataTableEntryCount());
                                        // result: STRING
                                        var id = Things["KB.LocalAdministration.TileConsole.DataTable"].AddOrUpdateDataTableEntry(params);
                                        
                                        
                                         values = Things["KB.LocalAdministration.TileConsole.DataTable"].CreateValues();
                                        
                                        values.Context = "PTC:factory-mv;PTC:FactoryAdministration"; //TAGS
                                        values.TileBackground = "PTC.DarkBlue"; //STRING
                                        values.InAppSwitcher = false; //BOOLEAN
                                        values.TileIcon = "KB.AdministrationLevel2.Icon"; //STRING
                                        values.LocalizedLabel = "DLP Configuration (CVS)"; //TEXT
                                        values.InConvergeConsole = false; //BOOLEAN
                                        values.TileMashupOrURL = "KBDLPAdministrationMashup"; //STRING
                                        values.TileTooltip = ""; //
                                        values.TileLabel = "DLP Configuration (CVS)";
                                        values.TileOrder = 600; //INTEGER [Primary Key]
                                        values.IsMashup = true; //BOOLEAN
                                        values.OpenInNewWindow = false;
                                        values.key = 600; //STRING
                                        
                                        var params = {
                                            sourceType: undefined /* STRING */,
                                            values: values /* INFOTABLE*/,
                                            location: undefined /* LOCATION */,
                                            source: undefined /* STRING */,
                                            tags: undefined /* TAGS */
                                        };
                                        
                                        //	logger.warn("before " + Things["KB.LocalAdministration.TileConsole.DataTable"].GetDataTableEntryCount());
                                        // result: STRING
                                        var id = Things["KB.LocalAdministration.TileConsole.DataTable"].AddOrUpdateDataTableEntry(params);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions>
                    <Subscription
                     description=""
                     enabled="true"
                     eventName="ThingStart"
                     name="Autostart"
                     source=""
                     sourceProperty=""
                     sourceType="Thing">
                        <ServiceImplementation
                         description=""
                         handlerName="Script"
                         name="Autostart">
                            <ConfigurationTables>
                                <ConfigurationTable
                                 dataShapeName=""
                                 description=""
                                 isMultiRow="false"
                                 name="Script"
                                 ordinal="0">
                                    <DataShape>
                                        <FieldDefinitions>
                                            <FieldDefinition
                                             baseType="STRING"
                                             description="code"
                                             name="code"
                                             ordinal="0"></FieldDefinition>
                                        </FieldDefinitions>
                                    </DataShape>
                                    <Rows>
                                        <Row>
                                            <code>
                                            <![CDATA[
                                            try {										
                                            	me.CreateDefaultTokensCVS();
                                            } catch(err) {logger.error("Error CreateDefaultTokensCVS : "+err);}
                                            try {										
                                            	me.CreateDefaultTokensRail();
                                            } catch(err) {logger.error("Error CreateDefaultTokensRail : "+err);}
                                            try {										
                                            	me.CreateDefaultTokensCAPS();
                                            } catch(err) {logger.error("Error CreateDefaultTokensCAPS : "+err);}
                                            try {										
                                            	me.CreateDefaultTokensOthers();
                                            } catch(err) {logger.error("Error CreateDefaultTokensOthers : "+err);}
                                            try {										
                                            	me.InstallTileConsole();
                                            } catch(err) {logger.error("Error InstallTileConsole : "+err);}
                                            ]]>
                                            </code>
                                        </Row>
                                    </Rows>
                                </ConfigurationTable>
                            </ConfigurationTables>
                        </ServiceImplementation>
                    </Subscription>
                </Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
