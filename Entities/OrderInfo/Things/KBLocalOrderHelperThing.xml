<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b706"
 majorVersion="9"
 minorVersion="0"
 modelPersistenceProviderPackage="MssqlPersistenceProviderPackage"
 revision="12"
 schemaVersion="1109"
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         lastModifiedDate="2022-03-07T06:18:44.609Z"
         name="KBLocalOrderHelperThing"
         projectName="KBLocalOrderInfo"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions>
                <Permissions
                 resourceName="GetActualOrderDataForKanban">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="eKanban"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                         <Principal
                         isPermitted="true"
                         name="KBMachineOperatorUserGroup"
                         type="Group"></Principal>
                         <Principal
                         isPermitted="true"
                         name="KBMesKitHelperUser"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                         <Principal
                         isPermitted="true"
                         name="KBMachineOperatorUserGroup"
                         type="Group"></Principal>
                         <Principal
                         isPermitted="true"
                         name="KBMesKitHelperUser"
                         type="User"></Principal>
                    </PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                         <Principal
                         isPermitted="true"
                         name="KBMachineOperatorUserGroup"
                         type="Group"></Principal>
                         <Principal
                         isPermitted="true"
                         name="KBMesKitHelperUser"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </EventInvoke>
                    <EventSubscribe>
                        <Principal
                         isPermitted="true"
                         name="KBUserGroup"
                         type="Group"></Principal>
                    </EventSubscribe>
                </Permissions>
            </RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="KBBackGroundWorker"
                     type="Organization"></Principal>
                    <Principal
                     isPermitted="true"
                     name="KBOrganization"
                     type="Organization"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetActualOrderDataForKanban">
                        <ResultType
                         aspect.dataShape="KBOrderKanbanDatashape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetActualOrderInfoByStation">
                        <ResultType
                         aspect.dataShape="KBLocalOrderInfoDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="MachineThingName"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="NextNweek"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="PlantCode"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="SAPMachineName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="ShowMachineName"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="UID"
                             ordinal="6"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetOrderInfoByStation">
                        <ResultType
                         aspect.dataShape="KBLocalOrderInfoDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="NextNweek"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="OrderType"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="PlantCode"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="SAPMachineName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="ShowMachineName"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="UID"
                             ordinal="6"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPlannedOrActualOrderInfoByStation">
                        <ResultType
                         aspect.dataShape="KBLocalOrderInfoDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="ActionType"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="MachineThingName"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="NextNweek"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="OrderType"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="PlantCode"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="SAPMachineName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="ShowMachineName"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="UID"
                             ordinal="8"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="OutputOrderInfo">
                        <ResultType
                         aspect.dataShape="KBLocalOrderInfoDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="KBLocalOrderInfoDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="OriOrderInfo"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="OutputOrderInfoCopy">
                        <ResultType
                         aspect.dataShape="KBLocalOrderInfoDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="KBLocalOrderInfoDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="OriOrderInfo"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SplitAllOrder">
                        <ResultType
                         aspect.dataShape="KBLocalOrderInfoLoopDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="KBLocalOrderInfoDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="OriOrderInfo"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="SplitOrderInfo">
                        <ResultType
                         aspect.dataShape="KBLocalSplitOrderInfoDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="KBLocalOrderInfoDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="OriOrderInfo"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="tempJS">
                        <ResultType
                         baseType="INTEGER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="a"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="b"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetOrderBOMDetails">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="OrderNumber"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetMESOrderData">
                        <ResultType
                         aspect.dataShape="KBOrderMESDatashape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.minimumValue="0.0"
                             baseType="NUMBER"
                             description=""
                             name="DaysAgo"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="WorkCenter"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetActualOrderDataForKanban">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try{
                                            var dateValue=new Date();
                                            var fromTime= dateAddHours(dateValue, -24);
                                        
                                        
                                            // result: INFOTABLE dataShape: "KBOrderKanbanDatashape"
                                        var result =  Things["KBKPILocalThingWorxDatabaseThing"].GetDBOrderDataForKanban({
                                        	EndTime: dateAddMinutes(dateValue, 10) /* DATETIME */,
                                        	StartTime: fromTime /* DATETIME */
                                        });
                                        } catch(err) {
                                        	logger.error("Error on service GetActualOrderDataForKanban: " + err + " on thing:" + me.name+ " at:" + err.lineNumber);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetActualOrderInfoByStation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        
                                        	// GetActualOrderInfoByStation
                                        	// #0. Get T1(WeekStart), T2(WeekEnd)
                                        	var shiftDay = Things["KBTimeHelperThing"].GetCurrentWeekStart();
                                        	var T1 = dateAddDays(shiftDay, 7*NextNweek+0);
                                        	var T2 = dateAddDays(shiftDay, 7*NextNweek+7);
                                        	//var result = T1;
                                        	//logger.debug("GetOrderInfoByStation #0 done");
                                        
                                        	// #1. Get Order Number list
                                        	var OrderList =  Things["KBKPILocalThingWorxDatabaseThing"].GetActualOrdersByStation({
                                        		MachineThingName: MachineThingName /* STRING */,
                                        		NextNweek: NextNweek /* INTEGER */
                                        	});
                                        
                                        	//logger.debug("GetOrderInfoByStation #1 done");
                                        
                                        	// #2. Create Temp InfoTabel for output
                                        	var params9 = {
                                        		infoTableName : "InfoTable",
                                        		dataShapeName : "KBLocalOrderInfoDataShape"
                                        	};
                                        	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params9);
                                        	//logger.debug("GetOrderInfoByStation #2 done");
                                        
                                        	// #3. Loop Order Number list, to get detail properyty values
                                        	var tableLength = OrderList.rows.length;
                                        	for (var x=0; x < tableLength; x++) {
                                        		var row = OrderList.rows[x];
                                        
                                        		// #4. Loop OrderProperty to get detail values and check		
                                                var dateValue = new Date();
                                                var utcOffset1 = Things["KBKPILocalThingWorxDatabaseThing"].GetUTCOffsetAtDate({
                                                    DateTime: dateValue /* DATETIME */
                                                });
                                                var utcOffset2 = 0 - utcOffset1.rows[0].Offset;
                                                // dateAddMinutes(dateValue:DATETIME, amount:NUMBER):STRING
                                                var FirstBuildTime2 = dateAddMinutes(row.FirstBuildTime, utcOffset2);        
                                                var LastBuildTime2 = dateAddMinutes(row.LastBuildTime, utcOffset2);   					
                                        		var Label = row.OrderNumber + ", " + row.PartNumber + ", " + row.SAPOperationNumber + ", " + row.Qty + ", ";
                                        		Label = Label + dateFormat(FirstBuildTime2, "yyyy-MM-dd HH:mm:ss") + " ~ ";
                                        		Label = Label + dateFormat(LastBuildTime2, "yyyy-MM-dd HH:mm:ss");	 
                                                Label = Label + ", " + ShowMachineName;
                                                Label = Label + ", UID = " + UID;        
                                        		if(row.FirstBuildTime < T1) {row.FirstBuildTime = T1;}	
                                        		if(row.LastBuildTime >= dateAddMinutes(T2, -15)) {row.LastBuildTime = dateAddMinutes(T2, -15);}
                                        		result.AddRow({
                                        			Id: 1,
                                        			PlantCode: PlantCode,
                                        			SAPMachineName: SAPMachineName,
                                        			OrderNumber: row.OrderNumber,
                                        			UpdateTime: new Date(),
                                        			MaterialNumber: row.PartNumber,
                                        			Operations: '',
                                        			op: row.SAPOperationNumber,
                                        			TotalOrderQuantity: row.Qty,
                                        			ScheduledStartDate: row.FirstBuildTime,
                                        			ScheduledFinishDate: row.LastBuildTime,
                                        			T1: T1,
                                        			T2: T2,
                                        			Label: Label
                                        		}); // add row into result
                                        	} // OrderList Loop end
                                        	//logger.debug("GetOrderInfoByStation #4 done");
                                        
                                        } catch(err) {
                                        	logger.error("GetActualOrderInfoByStation error.");
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetOrderInfoByStation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        
                                        	// GetOrderInfoByStation
                                        	// #0. Get T1(WeekStart), T2(WeekEnd)
                                        	var shiftDay = Things["KBTimeHelperThing"].GetCurrentWeekStart();
                                        	var T1 = dateAddDays(shiftDay, 7*NextNweek+0);
                                        	var T2 = dateAddDays(shiftDay, 7*NextNweek+7);
                                        	//var result = T1;
                                        	//logger.debug("GetOrderInfoByStation #0 done");
                                        
                                        	// #1. Get OrderList
                                        	var OrderList;
                                        	if (OrderType ==1) {
                                        		OrderList =  Things["KBKPILocalThingWorxDatabaseThing"].GetEarliestPlannedOrdersByStation({
                                        			SAPMachineName: SAPMachineName /* STRING */,
                                        			StartDate: T1,
                                        			EndDate: T2
                                        		});
                                        	} else {
                                        		OrderList =  Things["KBKPILocalThingWorxDatabaseThing"].GetLatestPlannedOrdersByStation({
                                        			SAPMachineName: SAPMachineName /* STRING */,
                                        			StartDate: T1,
                                        			EndDate: T2
                                        		});
                                        	}
                                        											
                                        	// #2. Create Temp InfoTabel for output
                                        	var params9 = {
                                        		infoTableName : "InfoTable",
                                        		dataShapeName : "KBLocalOrderInfoDataShape"
                                        	};
                                        	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params9);
                                        	//logger.debug("GetOrderInfoByStation #2 done");
                                        
                                        	// #3. Loop Order Number list, to get detail properyty values
                                        	var tableLength = OrderList.rows.length;
                                        	for (var x=0; x < tableLength; x++) {
                                        		var row = OrderList.rows[x];				
                                                var dateValue = new Date();
                                                var utcOffset1 = Things["KBKPILocalThingWorxDatabaseThing"].GetUTCOffsetAtDate({
                                                    DateTime: dateValue /* DATETIME */
                                                });
                                                var utcOffset2 = 0 - utcOffset1.rows[0].Offset;
                                                // dateAddMinutes(dateValue:DATETIME, amount:NUMBER):STRING
                                                var ScheduledStartExecution2 = dateAddMinutes(row.ScheduledStartExecution, utcOffset2);        
                                                var ScheduledFinishExecution2 = dateAddMinutes(row.ScheduledFinishExecution, utcOffset2);   						
                                        		Label = row.OrderNumber + ", " + row.MaterialNumber + ", " + row.Operation + ", " + row.TotalOrderQuantity + ", ";
                                        		Label = Label + dateFormat(ScheduledStartExecution2, "yyyy-MM-dd HH:mm:ss") + " ~ ";
                                        		Label = Label + dateFormat(ScheduledFinishExecution2, "yyyy-MM-dd HH:mm:ss");
                                        		if (OrderType ==1) {
                                        			Label = Label + " (Earliest Scheduled Date)";
                                        		} else {
                                        			Label = Label + " (Latest Scheduled Date)";
                                        		}
                                                Label = Label + ", " + ShowMachineName;
                                                Label = Label + ", UID = " + UID;
                                        		if(row.ScheduledStartExecution < T1) {row.ScheduledStartExecution = T1;}	
                                        		if(row.ScheduledFinishExecution >= dateAddMinutes(T2, -15)) {row.ScheduledFinishExecution = dateAddMinutes(T2, -15);}
                                        		result.AddRow({
                                        			Id: 1,
                                        			PlantCode: PlantCode,
                                        			SAPMachineName: SAPMachineName,
                                        			OrderNumber: row.OrderNumber,
                                        			UpdateTime: row.UpdateTime,
                                        			MaterialNumber: row.MaterialNumber,
                                        			Operations: row.Operations,
                                        			op: row.Operation,
                                        			TotalOrderQuantity: row.TotalOrderQuantity,
                                        			ScheduledStartDate: row.ScheduledStartExecution,
                                        			ScheduledFinishDate: row.ScheduledFinishExecution,
                                        			T1: T1,
                                        			T2: T2,
                                        			Label: Label
                                        		});
                                        	} // OrderList Loop end
                                        	//logger.debug("GetOrderInfoByStation #4 done");
                                        
                                        } catch(err) {
                                        	logger.error("GetOrderInfoByStation error.");
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPlannedOrActualOrderInfoByStation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBLocalOrderInfoDataShape"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        if(ActionType==1){
                                            outputTable =  me.GetOrderInfoByStation({
                                                SAPMachineName: SAPMachineName /* STRING */,
                                                PlantCode: PlantCode /* STRING */,
                                                NextNweek: NextNweek /* INTEGER */,
                                                OrderType: OrderType,
                                                ShowMachineName: ShowMachineName /* STRING */,
                                                UID: UID /* INTEGER */        
                                            });
                                        }
                                        
                                        if(ActionType==2){
                                        // result: INFOTABLE dataShape: "KBLocalOrderInfoDataShape"
                                            outputTable =  me.GetActualOrderInfoByStation({
                                                MachineThingName: MachineThingName /* STRING */,
                                                SAPMachineName: SAPMachineName /* STRING */,
                                                PlantCode: PlantCode /* STRING */,
                                                NextNweek: NextNweek /* INTEGER */,
                                                ShowMachineName: ShowMachineName /* STRING */,
                                                UID: UID /* INTEGER */        
                                            });
                                        }
                                        
                                        var result = outputTable;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="OutputOrderInfo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // OutputOrderInfo
                                        // #0. case of 0 record
                                        var params9 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBLocalOrderInfoDataShape"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params9);
                                        var result = outputTable;
                                        
                                        try {
                                        	var tableLength = OriOrderInfo.rows.length;	
                                            logger.debug("OutputOrderInfo: inputTable length =" + tableLength);
                                            
                                        	// #1 Create Base InfoTabel for compare
                                        	var params0 = {
                                        		infoTableName : "InfoTable",
                                        		dataShapeName : "KBLocalOrderInfoDataShape"
                                        	};
                                        	var baseTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params0);
                                        	var T1 = OriOrderInfo.rows[0].T1;
                                        	var T2 = OriOrderInfo.rows[0].T2;
                                        	//var PlantCode = OriOrderInfo.rows[0].PlantCode;
                                        	//var SAPMachineName = OriOrderInfo.rows[0].SAPMachineName;
                                        	var st = T1; 
                                        	
                                        	/*
                                        	baseTable.AddRow({ // add start stick
                                        		Id: 0,
                                        		PlantCode: "",
                                        		SAPMachineName: "",
                                        		OrderNumber: "",
                                        		UpdateTime: "",
                                        		MaterialNumber: "",
                                        		Operations: "",
                                        		op: "",
                                        		TotalOrderQuantity: 0,
                                        		ScheduledStartDate: T1,
                                        		ScheduledFinishDate: T1,
                                        		T1: T1,
                                        		T2: T2,
                                        		Label: ""
                                        	});	
                                        
                                        	baseTable.AddRow({	// add end stick
                                        		Id: 0,
                                        		PlantCode: "",
                                        		SAPMachineName: "",
                                        		OrderNumber: "",
                                        		UpdateTime: "",
                                        		MaterialNumber: "",
                                        		Operations: "",
                                        		op: "",
                                        		TotalOrderQuantity: 0,
                                        		ScheduledStartDate: T2,
                                        		ScheduledFinishDate: T2,
                                        		T1: T1,
                                        		T2: T2,
                                        		Label: ""
                                        	});	
                                        	*/	
                                        	
                                        	for (var c0=0; c0<677; c0++) {
                                        		var et = dateAddMinutes(st, 15);
                                        		baseTable.AddRow({
                                        			Id: 0,
                                        			PlantCode: "",
                                        			SAPMachineName: "",
                                        			OrderNumber: "",
                                        			UpdateTime: "",
                                        			MaterialNumber: "",
                                        			Operations: "",
                                        			op: "",
                                        			TotalOrderQuantity: 0,
                                        			ScheduledStartDate: st,
                                        			ScheduledFinishDate: et,
                                        			T1: T1,
                                        			T2: T2,
                                        			Label: ""
                                        		});
                                        		st = et;
                                        	}
                                        		
                                        	var c = 0;
                                        	// #2. Change Id
                                        	for (var x=0; x < tableLength; x++) {
                                        		var row = OriOrderInfo.rows[x];
                                        		var Id = x%2+1;
                                        		outputTable.AddRow({
                                        			Id: Id,
                                        			PlantCode: row.PlantCode,
                                        			SAPMachineName: row.SAPMachineName,
                                        			OrderNumber: row.OrderNumber,
                                        			UpdateTime: row.UpdateTime,
                                        			MaterialNumber: row.MaterialNumber,
                                        			Operations: row.Operations,
                                        			op: row.op,
                                        			TotalOrderQuantity: row.TotalOrderQuantity,
                                        			ScheduledStartDate: row.ScheduledStartDate,
                                        			ScheduledFinishDate: row.ScheduledFinishDate,
                                        			T1: row.T1,
                                        			T2: row.T2,
                                        			Label: row.Label
                                        		});    
                                        		c = c + 1;
                                        		logger.debug("OutputOrderInfo: inputTable length with id =" + c);
                                        	}
                                        	logger.debug("OutputOrderInfo: OutputTable length with id =" + outputTable.rows.length);
                                        
                                        	// #3. Compare outputTable with baseTable
                                        	for (var cb=0; cb<677; cb++) {
                                        		var rowb = baseTable.rows[cb]; 
                                        		var flag = false;
                                        		for (var co=0; co < tableLength; co++) {	
                                        			var rowo = outputTable.rows[co]; 
                                        			var diff1 = dateDifference(rowo.ScheduledStartDate, rowb.ScheduledStartDate)/1000/60;
                                        			var diff2 = dateDifference(rowo.ScheduledFinishDate, rowb.ScheduledFinishDate)/1000/60;		
                                        			//var diff1 = Math.abs(diff1);
                                        			//var diff2 = Math.abs(diff2);
                                        			if(((Math.abs(diff1)<=15) && (diff2>=15)) || ((diff1<=-15) && (diff2>=15)) || ((diff1<=-15) && (Math.abs(diff2)<=15))){
                                        			//if ((diff1 <= 15) || (diff2 <= 15)) {
                                        				flag = true;
                                        			}
                                        		}
                                        		if(flag === false) {
                                        			outputTable.AddRow({
                                        				Id: 0,
                                        				PlantCode: "",
                                        				SAPMachineName: "",
                                        				OrderNumber: "",
                                        				UpdateTime: "",
                                        				MaterialNumber: "",
                                        				Operations: "",
                                        				op: "",
                                        				TotalOrderQuantity: 0,
                                        				ScheduledStartDate: rowb.ScheduledStartDate,
                                        				ScheduledFinishDate: rowb.ScheduledFinishDate,
                                        				T1: T1,
                                        				T2: T2,
                                        				Label: ""
                                        			});
                                        			//st = et;
                                        		}
                                        	}
                                        
                                        	// #4. Reorder outputTable
                                        	var sort = new Object();
                                        	sort.name = "ScheduledStartDate";
                                        	sort.ascending = true;
                                        	outputTable.Sort(sort); 
                                        
                                        	result = outputTable;	
                                        } catch(err) {
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="OutputOrderInfoCopy">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // OutputOrderInfo
                                        // #0. case of 0 record
                                        var params9 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBLocalOrderInfoDataShape"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params9);
                                        var result = outputTable;
                                        
                                        try {
                                        	var tableLength = OriOrderInfo.rows.length;	
                                            logger.debug("OutputOrderInfo: inputTable length =" + tableLength);
                                            
                                        	// #1 Create Base InfoTabel for compare
                                        	var params0 = {
                                        		infoTableName : "InfoTable",
                                        		dataShapeName : "KBLocalOrderInfoDataShape"
                                        	};
                                        	var baseTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params0);
                                        	var T1 = OriOrderInfo.rows[0].T1;
                                        	var T2 = OriOrderInfo.rows[0].T2;
                                        	//var PlantCode = OriOrderInfo.rows[0].PlantCode;
                                        	//var SAPMachineName = OriOrderInfo.rows[0].SAPMachineName;
                                        	var st = T1; 
                                        	
                                        	baseTable.AddRow({ // add start stick
                                        		Id: 0,
                                        		PlantCode: "",
                                        		SAPMachineName: "",
                                        		OrderNumber: "",
                                        		UpdateTime: "",
                                        		MaterialNumber: "",
                                        		Operations: "",
                                        		op: "",
                                        		TotalOrderQuantity: 0,
                                        		ScheduledStartDate: T1,
                                        		ScheduledFinishDate: T1,
                                        		T1: T1,
                                        		T2: T2,
                                        		Label: ""
                                        	});	
                                        
                                        	baseTable.AddRow({	// add end stick
                                        		Id: 0,
                                        		PlantCode: "",
                                        		SAPMachineName: "",
                                        		OrderNumber: "",
                                        		UpdateTime: "",
                                        		MaterialNumber: "",
                                        		Operations: "",
                                        		op: "",
                                        		TotalOrderQuantity: 0,
                                        		ScheduledStartDate: T2,
                                        		ScheduledFinishDate: T2,
                                        		T1: T1,
                                        		T2: T2,
                                        		Label: ""
                                        	});		
                                        	
                                        	for (var c0=0; c0<673; c0++) {
                                        		var et = dateAddMinutes(st, 15);
                                        		baseTable.AddRow({
                                        			Id: 0,
                                        			PlantCode: "",
                                        			SAPMachineName: "",
                                        			OrderNumber: "",
                                        			UpdateTime: "",
                                        			MaterialNumber: "",
                                        			Operations: "",
                                        			op: "",
                                        			TotalOrderQuantity: 0,
                                        			ScheduledStartDate: st,
                                        			ScheduledFinishDate: et,
                                        			T1: T1,
                                        			T2: T2,
                                        			Label: ""
                                        		});
                                        		st = et;
                                        	}
                                        	
                                        
                                        	
                                        	var c = 0;
                                        	// #2. Change Id
                                        	for (var x=0; x < tableLength; x++) {
                                        		var row = OriOrderInfo.rows[x];
                                        		var Id = x%2+1;
                                        		outputTable.AddRow({
                                        			Id: Id,
                                        			PlantCode: row.PlantCode,
                                        			SAPMachineName: row.SAPMachineName,
                                        			OrderNumber: row.OrderNumber,
                                        			UpdateTime: row.UpdateTime,
                                        			MaterialNumber: row.MaterialNumber,
                                        			Operations: row.Operations,
                                        			op: row.op,
                                        			TotalOrderQuantity: row.TotalOrderQuantity,
                                        			ScheduledStartDate: row.ScheduledStartDate,
                                        			ScheduledFinishDate: row.ScheduledFinishDate,
                                        			T1: row.T1,
                                        			T2: row.T2,
                                        			Label: row.Label
                                        		});    
                                        		c = c + 1;
                                        		logger.debug("OutputOrderInfo: inputTable length with id =" + c);
                                        	}
                                        	logger.debug("OutputOrderInfo: OutputTable length with id =" + outputTable.rows.length);
                                        
                                        	// #3. Compare outputTable with baseTable
                                        	for (var cb=0; cb<673; cb++) {
                                        		var rowb = baseTable.rows[cb]; 
                                        		var flag = false;
                                        		for (var co=0; co < tableLength; co++) {	
                                        			var rowo = outputTable.rows[co]; 
                                        			var diff1 = dateDifference(rowo.ScheduledStartDate, rowb.ScheduledStartDate)/1000/60;
                                        			var diff2 = dateDifference(rowo.ScheduledFinishDate, rowb.ScheduledFinishDate)/1000/60;		
                                        			if(((diff1 <= 0) && (diff2 >= 15)) || ((diff1 <= 15) && (diff2 >= 0))){
                                        				flag = true;
                                        			}
                                        		}
                                        		if(flag === false) {
                                        			outputTable.AddRow({
                                        				Id: 0,
                                        				PlantCode: "",
                                        				SAPMachineName: "",
                                        				OrderNumber: "",
                                        				UpdateTime: "",
                                        				MaterialNumber: "",
                                        				Operations: "",
                                        				op: "",
                                        				TotalOrderQuantity: 0,
                                        				ScheduledStartDate: rowb.ScheduledStartDate,
                                        				ScheduledFinishDate: rowb.ScheduledFinishDate,
                                        				T1: T1,
                                        				T2: T2,
                                        				Label: ""
                                        			});
                                        			//st = et;
                                        		}
                                        	}
                                        
                                        
                                        
                                        
                                        	// #4. Reorder outputTable
                                        	var sort = new Object();
                                        	sort.name = "ScheduledStartDate";
                                        	sort.ascending = true;
                                        	outputTable.Sort(sort); 
                                        
                                        	result = outputTable;	
                                        } catch(err) {
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SplitAllOrder">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //SplitAllOrder
                                        // #1. create output Table for collection
                                        var params9 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBLocalOrderInfoLoopDataShape"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params9);
                                        var UID = 0;
                                        var T1 = new Date();
                                        var T2 = new Date();
                                        
                                        // #2. create temp Table for loop
                                        var Dataset1 = outputTable;
                                        var Dataset2 = outputTable;
                                        var c2 = 0;
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBLocalSplitOrderInfoDataShape"
                                        };
                                        var tempTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var tempTable2 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        tempTable = OriOrderInfo;
                                        
                                        
                                        // #3 create temp Table with base time slot, for output
                                        var params3 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBLocalSplitOrderInfoDataShape"
                                        };
                                        var tempTable3 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params3);
                                        //var c = 0;
                                        
                                        //logger.debug("SplitAllOrder: start loop");
                                        // #4. loop and split
                                        try {
                                            do {
                                                tempTable2 =  me.SplitOrderInfo({
                                                    OriOrderInfo: tempTable /* INFOTABLE */    
                                            	}); 
                                                //c = c + 1;
                                                //logger.debug("SplitAllOrder: splict#" + c);
                                                Dataset1 = tempTable2.Dataset1;
                                                Dataset2 = tempTable2.Dataset2;
                                                c2 = tempTable2.Dataset2C;
                                                T1 = tempTable2.T1;
                                                T2 = tempTable2.T2;
                                                //logger.debug("SplitAllOrder: c2=" + c2);
                                                
                                                tempTable3 =  me.OutputOrderInfo({
                                                    OriOrderInfo: Dataset1 /* INFOTABLE */
                                                });
                                                UID = UID + 1;
                                                
                                                outputTable.AddRow({
                                                	LoopData: tempTable3,
                                                    UID: UID,
                                                    T1: T1,
                                                    T2: T2
                                                });
                                                tempTable = Dataset2;		
                                            } while (c2 > 0);    
                                        } catch(err) {
                                        	logger.error("SplitAllOrder error.");
                                        }
                                        
                                        var result = outputTable;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="SplitOrderInfo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // SplitOrderInfo
                                        // #1. Create temp Table 1/2 for output
                                        //logger.debug("SplitOrderInfo: start");
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBLocalOrderInfoDataShape"
                                        };
                                        var tempTable1 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        var tempTable2 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // #2. Create output Table for output
                                        var params2 = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBLocalSplitOrderInfoDataShape"
                                        };
                                        var outputTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params2);
                                        outputTable.Dataset1 = tempTable1;
                                        outputTable.Dataset2 = tempTable2;
                                        var T1 = new Date();
                                        var T2 = new Date();
                                        outputTable.T1 = T1;
                                        outputTable.T2 = T2;
                                        var result = outputTable;
                                        
                                        // #3. Add 1st record into temp table 1
                                        ////logger.debug("trace start");
                                        var tableLength = OriOrderInfo.rows.length;
                                        //logger.debug("SplitOrderInfo: tableLength=" + tableLength);
                                        var c2 = 0; // Dataset2 Counter
                                        //logger.debug("SplitOrderInfo: tableLength=" + tableLength);
                                        var c = 1;
                                        if(tableLength > 0) {
                                        	//var row = OriOrderInfo.rows[0];
                                        	T1 = OriOrderInfo.rows[0].T1;
                                        	T2 = OriOrderInfo.rows[0].T2;
                                        	tempTable1.AddRow({
                                        		Id: 1,
                                        		PlantCode: OriOrderInfo.rows[0].PlantCode,
                                        		SAPMachineName: OriOrderInfo.rows[0].SAPMachineName,
                                        		OrderNumber: OriOrderInfo.rows[0].OrderNumber,
                                        		UpdateTime: OriOrderInfo.rows[0].UpdateTime,
                                        		MaterialNumber: OriOrderInfo.rows[0].MaterialNumber,
                                        		Operations: OriOrderInfo.rows[0].Operations,
                                        		op: OriOrderInfo.rows[0].op,
                                        		TotalOrderQuantity: OriOrderInfo.rows[0].TotalOrderQuantity,
                                        		ScheduledStartDate: OriOrderInfo.rows[0].ScheduledStartDate,
                                        		ScheduledFinishDate: OriOrderInfo.rows[0].ScheduledFinishDate,
                                        		T1: OriOrderInfo.rows[0].T1,
                                        		T2: OriOrderInfo.rows[0].T2,
                                        		Label: OriOrderInfo.rows[0].Label
                                        	});
                                        	//logger.debug("SplitOrderInfo: tempTable1.AddRow#" + c);
                                        
                                        	// #4. Split original tabel
                                        	//var tableLength = OriOrderInfo.rows.length;
                                        
                                        	for (var x=1; x < tableLength; x++) { // Loop of OriOrderInfo
                                        		var row = OriOrderInfo.rows[x];
                                        		var tableLength1 = tempTable1.rows.length;
                                        		var flag = false;	
                                        		for (var x1=0; x1 < tableLength1; x1++) { // Loop of tempTable1
                                        			////logger.debug("x="+x+"/"+tableLength+", x1="+x1+"/"+tableLength1);
                                        			var row1 = tempTable1.rows[x1];
                                        			var st = row.ScheduledStartDate;
                                        			var st1 = row1.ScheduledStartDate;
                                        			var diff1 = dateDifference(row.ScheduledStartDate, row1.ScheduledStartDate)/1000/60;
                                        			////logger.debug("row.ScheduledStartDate="+row.ScheduledStartDate+" ,row1.ScheduledStartDate"+row1.ScheduledStartDate+" diff1="+diff1);
                                        			var diff2 = dateDifference(row.ScheduledFinishDate, row1.ScheduledFinishDate)/1000/60;	
                                        			////logger.debug("row.ScheduledFinishDate="+row.ScheduledFinishDate+" ,row1.ScheduledFinishDate"+row1.ScheduledFinishDate+" diff2="+diff2);
                                        			if((diff1 >= 0) && (diff1 <= 60)){
                                        				flag = true;
                                        			}
                                        			 
                                        		} // Loop of tempTable1
                                        		////logger.debug("flag=" + flag);
                                        		if(flag === false) {
                                        			tempTable1.AddRow({
                                        				Id: 1,
                                        				PlantCode: row.PlantCode,
                                        				SAPMachineName: row.SAPMachineName,
                                        				OrderNumber: row.OrderNumber,
                                        				UpdateTime: row.UpdateTime,
                                        				MaterialNumber: row.MaterialNumber,
                                        				Operations: row.Operations,
                                        				op: row.op,
                                        				TotalOrderQuantity: row.TotalOrderQuantity,
                                        				ScheduledStartDate: row.ScheduledStartDate,
                                        				ScheduledFinishDate: row.ScheduledFinishDate,
                                        				T1: row.T1,
                                        				T2: row.T2,
                                        				Label: row.Label
                                        			});        
                                        			c = c + 1;
                                        			//logger.debug("SplitOrderInfo: tempTable1.AddRow#" + c);
                                        		} // Addd to temp Table1
                                        		if(flag === true) {
                                        			c2 = c2 + 1;
                                                    tempTable2.AddRow({
                                        				Id: 1,
                                        				PlantCode: row.PlantCode,
                                        				SAPMachineName: row.SAPMachineName,
                                        				OrderNumber: row.OrderNumber,
                                        				UpdateTime: row.UpdateTime,
                                        				MaterialNumber: row.MaterialNumber,
                                        				Operations: row.Operations,
                                        				op: row.op,
                                        				TotalOrderQuantity: row.TotalOrderQuantity,
                                        				ScheduledStartDate: row.ScheduledStartDate,
                                        				ScheduledFinishDate: row.ScheduledFinishDate,
                                        				T1: row.T1,
                                        				T2: row.T2,
                                        				Label: row.Label
                                        			});          
                                        		} // Addd to temp Table2     
                                        	} // Loop of OriOrderInfo
                                        
                                        	// #5. Output
                                        	//logger.debug("SplitOrderInfo: c2=" + c2);
                                            outputTable.Dataset1 = tempTable1;
                                        	outputTable.Dataset2 = tempTable2;
                                            //logger.debug("SplitOrderInfo: tempTable1.count= " + tempTable1.rows.length);
                                            outputTable.Dataset2C = c2;
                                        	outputTable.T1 = T1;
                                        	outputTable.T2 = T2;
                                        	result = outputTable;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="tempJS">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result = Math.abs(a - b);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetOrderBOMDetails">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try{
                                        // result: INFOTABLE dataShape: "KBBOMFromOrderDataShape"
                                        var BOMData = Things["KBKPILocalThingWorxDatabaseThing"].GetBOMFromOrderData({
                                        	OrderNumber: OrderNumber /* STRING */
                                        });
                                            var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "KBDetailedBOMOrderDataShape"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(KBDetailedBOMOrderDataShape)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        for(var x=0; x < BOMData.rows.length;x++){
                                            switch (BOMData.rows[x].PropertyKey){
                                                case "BOMMaterialNumber":
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey,
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].TextValue});
                                                	break;
                                                 case "BOMMovementType":
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey,
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].TextValue});
                                                	break;
                                                 case "BOMSpecialStockIndicator":
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey,
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].TextValue});
                                                	break;
                                                 case "BOMRequirementType":
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey,
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].TextValue});
                                                	break;
                                                 case "BOMStorageLocation":
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey,
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].TextValue});
                                                	break;
                                                 case "BOMRequirementQuantity":
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey,
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].FloatValue});
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey+'-Unit',
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].TextValue});
                                                	break;
                                                case "BOMIndicatorBulkMaterial":
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey,
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].TextValue});
                                                	break;
                                                 case "BOMDebitCreditFlag":
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey,
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].TextValue});
                                                	break;
                                                  case "BOMConfirmedQuantity":
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey,
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].FloatValue});
                                                     result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey+'-Unit',
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].TextValue});
                                                	break;
                                                default:
                                                    result.AddRow({PropertyKey: BOMData.rows[x].PropertyKey,
                                        					PropertyID: BOMData.rows[x].PropertyID,
                                        					Operation: BOMData.rows[x].Operation,
                                        					Value: BOMData.rows[x].TextValue});
                                            }
                                        }
                                        
                                        } catch(err) {
                                        	logger.error("Error on service GetOrderBOMDetails: " + err + " on thing:" + me.name+ " at:" + err.lineNumber);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetMESOrderData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try{
                                            // result: INFOTABLE dataShape: ""
                                        var result = Things["KBKPILocalThingWorxDatabaseThing"].GetMESOrderData({
                                        	WorkCenter: WorkCenter /* STRING */,
                                        	DaysAgo: DaysAgo /* NUMBER */
                                        });
                                            
                                        } catch(err) {
                                        	logger.error("Error on service GetMESOrderData: " + err + " on thing:" + me.name+ " at:" + err.lineNumber);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
